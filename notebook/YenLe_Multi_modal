{
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "### Importing Data"
      ],
      "metadata": {
        "id": "9kICvFvOQ0aA"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "id": "4H5mH8uATaWl"
      },
      "outputs": [],
      "source": [
        "#Importing required libraries\n",
        "import matplotlib.pyplot as plt\n",
        "from PIL import Image\n",
        "import seaborn as sns\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import os\n",
        "from tensorflow.keras.utils import to_categorical\n",
        "from glob import glob"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive/')\n",
        "\n",
        "path = '/content/drive/MyDrive/HAMdatset/HAM10000_images_part_1.zip/'"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "nJFpR2EWaVho",
        "outputId": "56980dbf-8eae-48f0-96a0-1ad9745a0a4d"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mounted at /content/drive/\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import zipfile\n",
        "import os\n",
        "\n",
        "# Path to the ZIP file\n",
        "zip_path = '/content/drive/MyDrive/HAMdatset/HAM10000_images_part_1.zip'\n",
        "\n",
        "# Directory where you want to extract the images\n",
        "extraction_directory = '/content'\n",
        "\n",
        "# Specific folder inside the ZIP from which you want to extract images\n",
        "target_folder = 'HAM10000_images_part_1/'\n",
        "\n",
        "# Create the directory if it does not exist\n",
        "if not os.path.exists(extraction_directory):\n",
        "    os.makedirs(extraction_directory)\n",
        "\n",
        "# Open the ZIP file\n",
        "with zipfile.ZipFile(zip_path, 'r') as zip_ref:\n",
        "    # Iterate over each file in the ZIP file\n",
        "    for file in zip_ref.namelist():\n",
        "        # Check if the file is in the target folder and is an image\n",
        "        if file.startswith(target_folder) and file.endswith(('.jpg', '.png')):\n",
        "            # Extract the image file\n",
        "            zip_ref.extract(file, extraction_directory)\n",
        "\n",
        "# Optionally, list the files in the extraction directory to confirm\n",
        "extracted_files = os.listdir(extraction_directory)\n",
        "\n"
      ],
      "metadata": {
        "id": "NgI1S4ZMepi5"
      },
      "execution_count": 3,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive/')\n",
        "\n",
        "path = '/content/drive/MyDrive/HAMdatset/HAM10000_images_part_2.zip/'"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Rblvro-Qf4YN",
        "outputId": "ed09c3ee-4221-4113-a77f-881813bc23c3"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Drive already mounted at /content/drive/; to attempt to forcibly remount, call drive.mount(\"/content/drive/\", force_remount=True).\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import zipfile\n",
        "import os\n",
        "\n",
        "# Path to the ZIP file\n",
        "zip_path = '/content/drive/MyDrive/HAMdatset/HAM10000_images_part_2.zip'\n",
        "\n",
        "# Directory where you want to extract the images\n",
        "extraction_directory = '/content'\n",
        "\n",
        "# Specific folder inside the ZIP from which you want to extract images\n",
        "target_folder = 'HAM10000_images_part_2/'\n",
        "\n",
        "# Create the directory if it does not exist\n",
        "if not os.path.exists(extraction_directory):\n",
        "    os.makedirs(extraction_directory)\n",
        "\n",
        "# Open the ZIP file\n",
        "with zipfile.ZipFile(zip_path, 'r') as zip_ref:\n",
        "    # Iterate over each file in the ZIP file\n",
        "    for file in zip_ref.namelist():\n",
        "        # Check if the file is in the target folder and is an image\n",
        "        if file.startswith(target_folder) and file.endswith(('.jpg', '.png')):\n",
        "            # Extract the image file\n",
        "            zip_ref.extract(file, extraction_directory)\n",
        "\n",
        "# Optionally, list the files in the extraction directory to confirm\n",
        "extracted_files = os.listdir(extraction_directory)\n"
      ],
      "metadata": {
        "id": "mJ__DuzAf4bE"
      },
      "execution_count": 5,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "JfNaZdfOepnC"
      },
      "execution_count": 5,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Pre-process HAM dataset"
      ],
      "metadata": {
        "id": "SSILSTIK3ntp"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "meta = pd.read_csv('HAM10000_metadata.csv')\n",
        "\n",
        "meta"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "id": "lv0s1Chofcs7",
        "outputId": "4b855e7b-54d8-4e96-d7df-2120dadb1d06"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "         lesion_id      image_id     dx dx_type   age     sex localization\n",
              "0      HAM_0000118  ISIC_0027419    bkl   histo  80.0    male        scalp\n",
              "1      HAM_0000118  ISIC_0025030    bkl   histo  80.0    male        scalp\n",
              "2      HAM_0002730  ISIC_0026769    bkl   histo  80.0    male        scalp\n",
              "3      HAM_0002730  ISIC_0025661    bkl   histo  80.0    male        scalp\n",
              "4      HAM_0001466  ISIC_0031633    bkl   histo  75.0    male          ear\n",
              "...            ...           ...    ...     ...   ...     ...          ...\n",
              "10010  HAM_0002867  ISIC_0033084  akiec   histo  40.0    male      abdomen\n",
              "10011  HAM_0002867  ISIC_0033550  akiec   histo  40.0    male      abdomen\n",
              "10012  HAM_0002867  ISIC_0033536  akiec   histo  40.0    male      abdomen\n",
              "10013  HAM_0000239  ISIC_0032854  akiec   histo  80.0    male         face\n",
              "10014  HAM_0003521  ISIC_0032258    mel   histo  70.0  female         back\n",
              "\n",
              "[10015 rows x 7 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-f8d045ad-6099-46a3-b1f1-48ac2e77ca55\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>lesion_id</th>\n",
              "      <th>image_id</th>\n",
              "      <th>dx</th>\n",
              "      <th>dx_type</th>\n",
              "      <th>age</th>\n",
              "      <th>sex</th>\n",
              "      <th>localization</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>HAM_0000118</td>\n",
              "      <td>ISIC_0027419</td>\n",
              "      <td>bkl</td>\n",
              "      <td>histo</td>\n",
              "      <td>80.0</td>\n",
              "      <td>male</td>\n",
              "      <td>scalp</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>HAM_0000118</td>\n",
              "      <td>ISIC_0025030</td>\n",
              "      <td>bkl</td>\n",
              "      <td>histo</td>\n",
              "      <td>80.0</td>\n",
              "      <td>male</td>\n",
              "      <td>scalp</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>HAM_0002730</td>\n",
              "      <td>ISIC_0026769</td>\n",
              "      <td>bkl</td>\n",
              "      <td>histo</td>\n",
              "      <td>80.0</td>\n",
              "      <td>male</td>\n",
              "      <td>scalp</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>HAM_0002730</td>\n",
              "      <td>ISIC_0025661</td>\n",
              "      <td>bkl</td>\n",
              "      <td>histo</td>\n",
              "      <td>80.0</td>\n",
              "      <td>male</td>\n",
              "      <td>scalp</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>HAM_0001466</td>\n",
              "      <td>ISIC_0031633</td>\n",
              "      <td>bkl</td>\n",
              "      <td>histo</td>\n",
              "      <td>75.0</td>\n",
              "      <td>male</td>\n",
              "      <td>ear</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10010</th>\n",
              "      <td>HAM_0002867</td>\n",
              "      <td>ISIC_0033084</td>\n",
              "      <td>akiec</td>\n",
              "      <td>histo</td>\n",
              "      <td>40.0</td>\n",
              "      <td>male</td>\n",
              "      <td>abdomen</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10011</th>\n",
              "      <td>HAM_0002867</td>\n",
              "      <td>ISIC_0033550</td>\n",
              "      <td>akiec</td>\n",
              "      <td>histo</td>\n",
              "      <td>40.0</td>\n",
              "      <td>male</td>\n",
              "      <td>abdomen</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10012</th>\n",
              "      <td>HAM_0002867</td>\n",
              "      <td>ISIC_0033536</td>\n",
              "      <td>akiec</td>\n",
              "      <td>histo</td>\n",
              "      <td>40.0</td>\n",
              "      <td>male</td>\n",
              "      <td>abdomen</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10013</th>\n",
              "      <td>HAM_0000239</td>\n",
              "      <td>ISIC_0032854</td>\n",
              "      <td>akiec</td>\n",
              "      <td>histo</td>\n",
              "      <td>80.0</td>\n",
              "      <td>male</td>\n",
              "      <td>face</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10014</th>\n",
              "      <td>HAM_0003521</td>\n",
              "      <td>ISIC_0032258</td>\n",
              "      <td>mel</td>\n",
              "      <td>histo</td>\n",
              "      <td>70.0</td>\n",
              "      <td>female</td>\n",
              "      <td>back</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>10015 rows × 7 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f8d045ad-6099-46a3-b1f1-48ac2e77ca55')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-f8d045ad-6099-46a3-b1f1-48ac2e77ca55 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-f8d045ad-6099-46a3-b1f1-48ac2e77ca55');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-65b21ad1-bd9c-4095-b6da-60ebcca9a21c\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-65b21ad1-bd9c-4095-b6da-60ebcca9a21c')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-65b21ad1-bd9c-4095-b6da-60ebcca9a21c button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_389d2c11-ec19-41c7-bcf6-56e419e7ae1a\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('meta')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_389d2c11-ec19-41c7-bcf6-56e419e7ae1a button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('meta');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Base dictionary\n",
        "import glob\n",
        "base_skin_dir = '/content/'\n",
        "\n",
        "# Assuming you have two folders named 'HAM10000_images_part_1' and 'HAM10000_images_part_2'\n",
        "folders = ['HAM10000_images_part_1', 'HAM10000_images_part_2']\n",
        "\n",
        "# Merge images from both folders into one dictionary and find the images based on the image_id\n",
        "imageid_path_dict = {\n",
        "    os.path.splitext(os.path.basename(x))[0]: x\n",
        "    for folder in folders\n",
        "    for x in glob.glob(os.path.join(base_skin_dir, folder, '*.jpg'))\n",
        "}"
      ],
      "metadata": {
        "id": "rvX62CfLfcvg"
      },
      "execution_count": 7,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "meta['path'] = meta['image_id'].map(imageid_path_dict.get)\n",
        "\n",
        "meta"
      ],
      "metadata": {
        "id": "jnfnWYMXfcyI",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "outputId": "dfce0cd6-c151-44c3-d540-232f3f4ff4d2"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "         lesion_id      image_id     dx dx_type   age     sex localization  \\\n",
              "0      HAM_0000118  ISIC_0027419    bkl   histo  80.0    male        scalp   \n",
              "1      HAM_0000118  ISIC_0025030    bkl   histo  80.0    male        scalp   \n",
              "2      HAM_0002730  ISIC_0026769    bkl   histo  80.0    male        scalp   \n",
              "3      HAM_0002730  ISIC_0025661    bkl   histo  80.0    male        scalp   \n",
              "4      HAM_0001466  ISIC_0031633    bkl   histo  75.0    male          ear   \n",
              "...            ...           ...    ...     ...   ...     ...          ...   \n",
              "10010  HAM_0002867  ISIC_0033084  akiec   histo  40.0    male      abdomen   \n",
              "10011  HAM_0002867  ISIC_0033550  akiec   histo  40.0    male      abdomen   \n",
              "10012  HAM_0002867  ISIC_0033536  akiec   histo  40.0    male      abdomen   \n",
              "10013  HAM_0000239  ISIC_0032854  akiec   histo  80.0    male         face   \n",
              "10014  HAM_0003521  ISIC_0032258    mel   histo  70.0  female         back   \n",
              "\n",
              "                                                   path  \n",
              "0      /content/HAM10000_images_part_1/ISIC_0027419.jpg  \n",
              "1      /content/HAM10000_images_part_1/ISIC_0025030.jpg  \n",
              "2      /content/HAM10000_images_part_1/ISIC_0026769.jpg  \n",
              "3      /content/HAM10000_images_part_1/ISIC_0025661.jpg  \n",
              "4      /content/HAM10000_images_part_2/ISIC_0031633.jpg  \n",
              "...                                                 ...  \n",
              "10010  /content/HAM10000_images_part_2/ISIC_0033084.jpg  \n",
              "10011  /content/HAM10000_images_part_2/ISIC_0033550.jpg  \n",
              "10012  /content/HAM10000_images_part_2/ISIC_0033536.jpg  \n",
              "10013  /content/HAM10000_images_part_2/ISIC_0032854.jpg  \n",
              "10014  /content/HAM10000_images_part_2/ISIC_0032258.jpg  \n",
              "\n",
              "[10015 rows x 8 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-5d781f62-ff6a-4995-a141-e3057550560d\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>lesion_id</th>\n",
              "      <th>image_id</th>\n",
              "      <th>dx</th>\n",
              "      <th>dx_type</th>\n",
              "      <th>age</th>\n",
              "      <th>sex</th>\n",
              "      <th>localization</th>\n",
              "      <th>path</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>HAM_0000118</td>\n",
              "      <td>ISIC_0027419</td>\n",
              "      <td>bkl</td>\n",
              "      <td>histo</td>\n",
              "      <td>80.0</td>\n",
              "      <td>male</td>\n",
              "      <td>scalp</td>\n",
              "      <td>/content/HAM10000_images_part_1/ISIC_0027419.jpg</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>HAM_0000118</td>\n",
              "      <td>ISIC_0025030</td>\n",
              "      <td>bkl</td>\n",
              "      <td>histo</td>\n",
              "      <td>80.0</td>\n",
              "      <td>male</td>\n",
              "      <td>scalp</td>\n",
              "      <td>/content/HAM10000_images_part_1/ISIC_0025030.jpg</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>HAM_0002730</td>\n",
              "      <td>ISIC_0026769</td>\n",
              "      <td>bkl</td>\n",
              "      <td>histo</td>\n",
              "      <td>80.0</td>\n",
              "      <td>male</td>\n",
              "      <td>scalp</td>\n",
              "      <td>/content/HAM10000_images_part_1/ISIC_0026769.jpg</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>HAM_0002730</td>\n",
              "      <td>ISIC_0025661</td>\n",
              "      <td>bkl</td>\n",
              "      <td>histo</td>\n",
              "      <td>80.0</td>\n",
              "      <td>male</td>\n",
              "      <td>scalp</td>\n",
              "      <td>/content/HAM10000_images_part_1/ISIC_0025661.jpg</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>HAM_0001466</td>\n",
              "      <td>ISIC_0031633</td>\n",
              "      <td>bkl</td>\n",
              "      <td>histo</td>\n",
              "      <td>75.0</td>\n",
              "      <td>male</td>\n",
              "      <td>ear</td>\n",
              "      <td>/content/HAM10000_images_part_2/ISIC_0031633.jpg</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10010</th>\n",
              "      <td>HAM_0002867</td>\n",
              "      <td>ISIC_0033084</td>\n",
              "      <td>akiec</td>\n",
              "      <td>histo</td>\n",
              "      <td>40.0</td>\n",
              "      <td>male</td>\n",
              "      <td>abdomen</td>\n",
              "      <td>/content/HAM10000_images_part_2/ISIC_0033084.jpg</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10011</th>\n",
              "      <td>HAM_0002867</td>\n",
              "      <td>ISIC_0033550</td>\n",
              "      <td>akiec</td>\n",
              "      <td>histo</td>\n",
              "      <td>40.0</td>\n",
              "      <td>male</td>\n",
              "      <td>abdomen</td>\n",
              "      <td>/content/HAM10000_images_part_2/ISIC_0033550.jpg</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10012</th>\n",
              "      <td>HAM_0002867</td>\n",
              "      <td>ISIC_0033536</td>\n",
              "      <td>akiec</td>\n",
              "      <td>histo</td>\n",
              "      <td>40.0</td>\n",
              "      <td>male</td>\n",
              "      <td>abdomen</td>\n",
              "      <td>/content/HAM10000_images_part_2/ISIC_0033536.jpg</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10013</th>\n",
              "      <td>HAM_0000239</td>\n",
              "      <td>ISIC_0032854</td>\n",
              "      <td>akiec</td>\n",
              "      <td>histo</td>\n",
              "      <td>80.0</td>\n",
              "      <td>male</td>\n",
              "      <td>face</td>\n",
              "      <td>/content/HAM10000_images_part_2/ISIC_0032854.jpg</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10014</th>\n",
              "      <td>HAM_0003521</td>\n",
              "      <td>ISIC_0032258</td>\n",
              "      <td>mel</td>\n",
              "      <td>histo</td>\n",
              "      <td>70.0</td>\n",
              "      <td>female</td>\n",
              "      <td>back</td>\n",
              "      <td>/content/HAM10000_images_part_2/ISIC_0032258.jpg</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>10015 rows × 8 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-5d781f62-ff6a-4995-a141-e3057550560d')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-5d781f62-ff6a-4995-a141-e3057550560d button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-5d781f62-ff6a-4995-a141-e3057550560d');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-91a674cd-967e-4aa5-8db9-6ba35d129d52\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-91a674cd-967e-4aa5-8db9-6ba35d129d52')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-91a674cd-967e-4aa5-8db9-6ba35d129d52 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_901db3b8-7e03-4fef-b3d2-6bf4b993f572\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('meta')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_901db3b8-7e03-4fef-b3d2-6bf4b993f572 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('meta');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Lesion Dictionary categorical codes\n",
        "lesion_code_dict = {\n",
        "    'nv': 0,\n",
        "    'mel': 1,\n",
        "    'bkl': 2,\n",
        "    'bcc': 3,\n",
        "    'akiec': 4,\n",
        "    'vasc': 5,\n",
        "    'df': 6}\n",
        "\n",
        "meta['dx_code'] = meta['dx'].map(lesion_code_dict.get)\n",
        "\n",
        "meta"
      ],
      "metadata": {
        "id": "qjmRmybrfyFy",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "outputId": "ee229dff-3e86-4f62-d616-da2848ba0054"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "         lesion_id      image_id     dx dx_type   age     sex localization  \\\n",
              "0      HAM_0000118  ISIC_0027419    bkl   histo  80.0    male        scalp   \n",
              "1      HAM_0000118  ISIC_0025030    bkl   histo  80.0    male        scalp   \n",
              "2      HAM_0002730  ISIC_0026769    bkl   histo  80.0    male        scalp   \n",
              "3      HAM_0002730  ISIC_0025661    bkl   histo  80.0    male        scalp   \n",
              "4      HAM_0001466  ISIC_0031633    bkl   histo  75.0    male          ear   \n",
              "...            ...           ...    ...     ...   ...     ...          ...   \n",
              "10010  HAM_0002867  ISIC_0033084  akiec   histo  40.0    male      abdomen   \n",
              "10011  HAM_0002867  ISIC_0033550  akiec   histo  40.0    male      abdomen   \n",
              "10012  HAM_0002867  ISIC_0033536  akiec   histo  40.0    male      abdomen   \n",
              "10013  HAM_0000239  ISIC_0032854  akiec   histo  80.0    male         face   \n",
              "10014  HAM_0003521  ISIC_0032258    mel   histo  70.0  female         back   \n",
              "\n",
              "                                                   path  dx_code  \n",
              "0      /content/HAM10000_images_part_1/ISIC_0027419.jpg        2  \n",
              "1      /content/HAM10000_images_part_1/ISIC_0025030.jpg        2  \n",
              "2      /content/HAM10000_images_part_1/ISIC_0026769.jpg        2  \n",
              "3      /content/HAM10000_images_part_1/ISIC_0025661.jpg        2  \n",
              "4      /content/HAM10000_images_part_2/ISIC_0031633.jpg        2  \n",
              "...                                                 ...      ...  \n",
              "10010  /content/HAM10000_images_part_2/ISIC_0033084.jpg        4  \n",
              "10011  /content/HAM10000_images_part_2/ISIC_0033550.jpg        4  \n",
              "10012  /content/HAM10000_images_part_2/ISIC_0033536.jpg        4  \n",
              "10013  /content/HAM10000_images_part_2/ISIC_0032854.jpg        4  \n",
              "10014  /content/HAM10000_images_part_2/ISIC_0032258.jpg        1  \n",
              "\n",
              "[10015 rows x 9 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-5df38a35-8437-4752-845d-eed2dec88ee2\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>lesion_id</th>\n",
              "      <th>image_id</th>\n",
              "      <th>dx</th>\n",
              "      <th>dx_type</th>\n",
              "      <th>age</th>\n",
              "      <th>sex</th>\n",
              "      <th>localization</th>\n",
              "      <th>path</th>\n",
              "      <th>dx_code</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>HAM_0000118</td>\n",
              "      <td>ISIC_0027419</td>\n",
              "      <td>bkl</td>\n",
              "      <td>histo</td>\n",
              "      <td>80.0</td>\n",
              "      <td>male</td>\n",
              "      <td>scalp</td>\n",
              "      <td>/content/HAM10000_images_part_1/ISIC_0027419.jpg</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>HAM_0000118</td>\n",
              "      <td>ISIC_0025030</td>\n",
              "      <td>bkl</td>\n",
              "      <td>histo</td>\n",
              "      <td>80.0</td>\n",
              "      <td>male</td>\n",
              "      <td>scalp</td>\n",
              "      <td>/content/HAM10000_images_part_1/ISIC_0025030.jpg</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>HAM_0002730</td>\n",
              "      <td>ISIC_0026769</td>\n",
              "      <td>bkl</td>\n",
              "      <td>histo</td>\n",
              "      <td>80.0</td>\n",
              "      <td>male</td>\n",
              "      <td>scalp</td>\n",
              "      <td>/content/HAM10000_images_part_1/ISIC_0026769.jpg</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>HAM_0002730</td>\n",
              "      <td>ISIC_0025661</td>\n",
              "      <td>bkl</td>\n",
              "      <td>histo</td>\n",
              "      <td>80.0</td>\n",
              "      <td>male</td>\n",
              "      <td>scalp</td>\n",
              "      <td>/content/HAM10000_images_part_1/ISIC_0025661.jpg</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>HAM_0001466</td>\n",
              "      <td>ISIC_0031633</td>\n",
              "      <td>bkl</td>\n",
              "      <td>histo</td>\n",
              "      <td>75.0</td>\n",
              "      <td>male</td>\n",
              "      <td>ear</td>\n",
              "      <td>/content/HAM10000_images_part_2/ISIC_0031633.jpg</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10010</th>\n",
              "      <td>HAM_0002867</td>\n",
              "      <td>ISIC_0033084</td>\n",
              "      <td>akiec</td>\n",
              "      <td>histo</td>\n",
              "      <td>40.0</td>\n",
              "      <td>male</td>\n",
              "      <td>abdomen</td>\n",
              "      <td>/content/HAM10000_images_part_2/ISIC_0033084.jpg</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10011</th>\n",
              "      <td>HAM_0002867</td>\n",
              "      <td>ISIC_0033550</td>\n",
              "      <td>akiec</td>\n",
              "      <td>histo</td>\n",
              "      <td>40.0</td>\n",
              "      <td>male</td>\n",
              "      <td>abdomen</td>\n",
              "      <td>/content/HAM10000_images_part_2/ISIC_0033550.jpg</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10012</th>\n",
              "      <td>HAM_0002867</td>\n",
              "      <td>ISIC_0033536</td>\n",
              "      <td>akiec</td>\n",
              "      <td>histo</td>\n",
              "      <td>40.0</td>\n",
              "      <td>male</td>\n",
              "      <td>abdomen</td>\n",
              "      <td>/content/HAM10000_images_part_2/ISIC_0033536.jpg</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10013</th>\n",
              "      <td>HAM_0000239</td>\n",
              "      <td>ISIC_0032854</td>\n",
              "      <td>akiec</td>\n",
              "      <td>histo</td>\n",
              "      <td>80.0</td>\n",
              "      <td>male</td>\n",
              "      <td>face</td>\n",
              "      <td>/content/HAM10000_images_part_2/ISIC_0032854.jpg</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10014</th>\n",
              "      <td>HAM_0003521</td>\n",
              "      <td>ISIC_0032258</td>\n",
              "      <td>mel</td>\n",
              "      <td>histo</td>\n",
              "      <td>70.0</td>\n",
              "      <td>female</td>\n",
              "      <td>back</td>\n",
              "      <td>/content/HAM10000_images_part_2/ISIC_0032258.jpg</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>10015 rows × 9 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-5df38a35-8437-4752-845d-eed2dec88ee2')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-5df38a35-8437-4752-845d-eed2dec88ee2 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-5df38a35-8437-4752-845d-eed2dec88ee2');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-fe849d6e-73dc-4a90-bf9a-b585b8c4c7a3\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-fe849d6e-73dc-4a90-bf9a-b585b8c4c7a3')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-fe849d6e-73dc-4a90-bf9a-b585b8c4c7a3 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_73856692-38d4-440c-a339-6a2a87a503ed\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('meta')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_73856692-38d4-440c-a339-6a2a87a503ed button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('meta');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "# Replace null with mean\n",
        "meta['age'].fillna((meta['age'].mean()), inplace=True)"
      ],
      "metadata": {
        "id": "RuwmvYvVfyIj"
      },
      "execution_count": 10,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from tqdm import tqdm\n",
        "import numpy as np\n",
        "from PIL import Image\n",
        "\n",
        "image_paths = list(meta['path'])\n",
        "meta['image'] = [np.asarray(Image.open(path).resize((100, 75)), dtype=np.float32) / 255.0 for path in tqdm(image_paths)]\n",
        "\n",
        "meta\n"
      ],
      "metadata": {
        "id": "rnQUbbtDfyTP",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 441
        },
        "outputId": "71792ff0-09c2-4aba-83fa-b2126a83ec6d"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 10015/10015 [01:48<00:00, 92.55it/s] \n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "         lesion_id      image_id     dx dx_type   age     sex localization  \\\n",
              "0      HAM_0000118  ISIC_0027419    bkl   histo  80.0    male        scalp   \n",
              "1      HAM_0000118  ISIC_0025030    bkl   histo  80.0    male        scalp   \n",
              "2      HAM_0002730  ISIC_0026769    bkl   histo  80.0    male        scalp   \n",
              "3      HAM_0002730  ISIC_0025661    bkl   histo  80.0    male        scalp   \n",
              "4      HAM_0001466  ISIC_0031633    bkl   histo  75.0    male          ear   \n",
              "...            ...           ...    ...     ...   ...     ...          ...   \n",
              "10010  HAM_0002867  ISIC_0033084  akiec   histo  40.0    male      abdomen   \n",
              "10011  HAM_0002867  ISIC_0033550  akiec   histo  40.0    male      abdomen   \n",
              "10012  HAM_0002867  ISIC_0033536  akiec   histo  40.0    male      abdomen   \n",
              "10013  HAM_0000239  ISIC_0032854  akiec   histo  80.0    male         face   \n",
              "10014  HAM_0003521  ISIC_0032258    mel   histo  70.0  female         back   \n",
              "\n",
              "                                                   path  dx_code  \\\n",
              "0      /content/HAM10000_images_part_1/ISIC_0027419.jpg        2   \n",
              "1      /content/HAM10000_images_part_1/ISIC_0025030.jpg        2   \n",
              "2      /content/HAM10000_images_part_1/ISIC_0026769.jpg        2   \n",
              "3      /content/HAM10000_images_part_1/ISIC_0025661.jpg        2   \n",
              "4      /content/HAM10000_images_part_2/ISIC_0031633.jpg        2   \n",
              "...                                                 ...      ...   \n",
              "10010  /content/HAM10000_images_part_2/ISIC_0033084.jpg        4   \n",
              "10011  /content/HAM10000_images_part_2/ISIC_0033550.jpg        4   \n",
              "10012  /content/HAM10000_images_part_2/ISIC_0033536.jpg        4   \n",
              "10013  /content/HAM10000_images_part_2/ISIC_0032854.jpg        4   \n",
              "10014  /content/HAM10000_images_part_2/ISIC_0032258.jpg        1   \n",
              "\n",
              "                                                   image  \n",
              "0      [[[0.74509805, 0.6, 0.7607843], [0.7529412, 0....  \n",
              "1      [[[0.09019608, 0.050980393, 0.08627451], [0.09...  \n",
              "2      [[[0.7254902, 0.49803922, 0.5372549], [0.74117...  \n",
              "3      [[[0.09411765, 0.043137256, 0.06666667], [0.10...  \n",
              "4      [[[0.5254902, 0.3529412, 0.44313726], [0.57647...  \n",
              "...                                                  ...  \n",
              "10010  [[[0.60784316, 0.5372549, 0.5803922], [0.60392...  \n",
              "10011  [[[0.019607844, 0.023529412, 0.015686275], [0....  \n",
              "10012  [[[0.4392157, 0.4, 0.4117647], [0.49803922, 0....  \n",
              "10013  [[[0.61960787, 0.47843137, 0.57254905], [0.623...  \n",
              "10014  [[[0.69803923, 0.57254905, 0.5176471], [0.6901...  \n",
              "\n",
              "[10015 rows x 10 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-745dbccf-0dfc-4315-b326-ed0bc8c4f867\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>lesion_id</th>\n",
              "      <th>image_id</th>\n",
              "      <th>dx</th>\n",
              "      <th>dx_type</th>\n",
              "      <th>age</th>\n",
              "      <th>sex</th>\n",
              "      <th>localization</th>\n",
              "      <th>path</th>\n",
              "      <th>dx_code</th>\n",
              "      <th>image</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>HAM_0000118</td>\n",
              "      <td>ISIC_0027419</td>\n",
              "      <td>bkl</td>\n",
              "      <td>histo</td>\n",
              "      <td>80.0</td>\n",
              "      <td>male</td>\n",
              "      <td>scalp</td>\n",
              "      <td>/content/HAM10000_images_part_1/ISIC_0027419.jpg</td>\n",
              "      <td>2</td>\n",
              "      <td>[[[0.74509805, 0.6, 0.7607843], [0.7529412, 0....</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>HAM_0000118</td>\n",
              "      <td>ISIC_0025030</td>\n",
              "      <td>bkl</td>\n",
              "      <td>histo</td>\n",
              "      <td>80.0</td>\n",
              "      <td>male</td>\n",
              "      <td>scalp</td>\n",
              "      <td>/content/HAM10000_images_part_1/ISIC_0025030.jpg</td>\n",
              "      <td>2</td>\n",
              "      <td>[[[0.09019608, 0.050980393, 0.08627451], [0.09...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>HAM_0002730</td>\n",
              "      <td>ISIC_0026769</td>\n",
              "      <td>bkl</td>\n",
              "      <td>histo</td>\n",
              "      <td>80.0</td>\n",
              "      <td>male</td>\n",
              "      <td>scalp</td>\n",
              "      <td>/content/HAM10000_images_part_1/ISIC_0026769.jpg</td>\n",
              "      <td>2</td>\n",
              "      <td>[[[0.7254902, 0.49803922, 0.5372549], [0.74117...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>HAM_0002730</td>\n",
              "      <td>ISIC_0025661</td>\n",
              "      <td>bkl</td>\n",
              "      <td>histo</td>\n",
              "      <td>80.0</td>\n",
              "      <td>male</td>\n",
              "      <td>scalp</td>\n",
              "      <td>/content/HAM10000_images_part_1/ISIC_0025661.jpg</td>\n",
              "      <td>2</td>\n",
              "      <td>[[[0.09411765, 0.043137256, 0.06666667], [0.10...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>HAM_0001466</td>\n",
              "      <td>ISIC_0031633</td>\n",
              "      <td>bkl</td>\n",
              "      <td>histo</td>\n",
              "      <td>75.0</td>\n",
              "      <td>male</td>\n",
              "      <td>ear</td>\n",
              "      <td>/content/HAM10000_images_part_2/ISIC_0031633.jpg</td>\n",
              "      <td>2</td>\n",
              "      <td>[[[0.5254902, 0.3529412, 0.44313726], [0.57647...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10010</th>\n",
              "      <td>HAM_0002867</td>\n",
              "      <td>ISIC_0033084</td>\n",
              "      <td>akiec</td>\n",
              "      <td>histo</td>\n",
              "      <td>40.0</td>\n",
              "      <td>male</td>\n",
              "      <td>abdomen</td>\n",
              "      <td>/content/HAM10000_images_part_2/ISIC_0033084.jpg</td>\n",
              "      <td>4</td>\n",
              "      <td>[[[0.60784316, 0.5372549, 0.5803922], [0.60392...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10011</th>\n",
              "      <td>HAM_0002867</td>\n",
              "      <td>ISIC_0033550</td>\n",
              "      <td>akiec</td>\n",
              "      <td>histo</td>\n",
              "      <td>40.0</td>\n",
              "      <td>male</td>\n",
              "      <td>abdomen</td>\n",
              "      <td>/content/HAM10000_images_part_2/ISIC_0033550.jpg</td>\n",
              "      <td>4</td>\n",
              "      <td>[[[0.019607844, 0.023529412, 0.015686275], [0....</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10012</th>\n",
              "      <td>HAM_0002867</td>\n",
              "      <td>ISIC_0033536</td>\n",
              "      <td>akiec</td>\n",
              "      <td>histo</td>\n",
              "      <td>40.0</td>\n",
              "      <td>male</td>\n",
              "      <td>abdomen</td>\n",
              "      <td>/content/HAM10000_images_part_2/ISIC_0033536.jpg</td>\n",
              "      <td>4</td>\n",
              "      <td>[[[0.4392157, 0.4, 0.4117647], [0.49803922, 0....</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10013</th>\n",
              "      <td>HAM_0000239</td>\n",
              "      <td>ISIC_0032854</td>\n",
              "      <td>akiec</td>\n",
              "      <td>histo</td>\n",
              "      <td>80.0</td>\n",
              "      <td>male</td>\n",
              "      <td>face</td>\n",
              "      <td>/content/HAM10000_images_part_2/ISIC_0032854.jpg</td>\n",
              "      <td>4</td>\n",
              "      <td>[[[0.61960787, 0.47843137, 0.57254905], [0.623...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10014</th>\n",
              "      <td>HAM_0003521</td>\n",
              "      <td>ISIC_0032258</td>\n",
              "      <td>mel</td>\n",
              "      <td>histo</td>\n",
              "      <td>70.0</td>\n",
              "      <td>female</td>\n",
              "      <td>back</td>\n",
              "      <td>/content/HAM10000_images_part_2/ISIC_0032258.jpg</td>\n",
              "      <td>1</td>\n",
              "      <td>[[[0.69803923, 0.57254905, 0.5176471], [0.6901...</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>10015 rows × 10 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-745dbccf-0dfc-4315-b326-ed0bc8c4f867')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-745dbccf-0dfc-4315-b326-ed0bc8c4f867 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-745dbccf-0dfc-4315-b326-ed0bc8c4f867');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-23101eca-2822-4b3e-b61f-338d97848cf2\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-23101eca-2822-4b3e-b61f-338d97848cf2')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-23101eca-2822-4b3e-b61f-338d97848cf2 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_a968c039-81bc-4f54-83ae-19c8ce23e02c\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('meta')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_a968c039-81bc-4f54-83ae-19c8ce23e02c button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('meta');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 11
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Ignore this section --> delete code no need ,"
      ],
      "metadata": {
        "id": "_3YXfFfx3ttB"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "from keras.utils import to_categorical\n",
        "\n",
        "X = meta['image']\n",
        "y = to_categorical(meta['dx_code'])\n"
      ],
      "metadata": {
        "id": "ZpD0OW8DfyVp"
      },
      "execution_count": 12,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "from sklearn.model_selection import train_test_split\n",
        "\n",
        "# Split the data into training and testing sets\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=42)"
      ],
      "metadata": {
        "id": "WuXVxHomfyYO"
      },
      "execution_count": 13,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(X_train.shape , \"\\n\")\n",
        "print(X_train[1].shape , \"\\n\")"
      ],
      "metadata": {
        "id": "MYzABAX-fybD",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "8e7d954c-4dd9-4375-9597-b839342c21b5"
      },
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(8012,) \n",
            "\n",
            "(75, 100, 3) \n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "type(X_train)\n"
      ],
      "metadata": {
        "id": "nidAFz5Qfc5c",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "88413179-c514-4ea6-ec2a-01b912e33630"
      },
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "pandas.core.series.Series"
            ]
          },
          "metadata": {},
          "execution_count": 15
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Convert Pandas Series to NumPy arrays\n",
        "X_train = np.array(X_train.tolist())\n",
        "X_test = np.array(X_test.tolist())\n",
        "\n",
        "# Reshape image data in 3 dimensions (height = 75, width = 100, channel = 3)\n",
        "X_train = X_train.reshape(X_train.shape[0], 75, 100, 3)\n",
        "X_test = X_test.reshape(X_test.shape[0], 75, 100, 3)"
      ],
      "metadata": {
        "id": "26R8CFfzfc8B"
      },
      "execution_count": 16,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Defining method"
      ],
      "metadata": {
        "id": "vTBNDGBe3xx6"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from tensorflow.keras.preprocessing.image import ImageDataGenerator\n",
        "\n",
        "# With data augmentation to prevent overfitting\n",
        "\n",
        "datagen = ImageDataGenerator(\n",
        "        featurewise_center=False,  # set input mean to 0 over the dataset\n",
        "        samplewise_center=False,  # set each sample mean to 0\n",
        "        featurewise_std_normalization=False,  # divide inputs by std of the dataset\n",
        "        samplewise_std_normalization=False,  # divide each input by its std\n",
        "        zca_whitening=False,  # apply ZCA whitening\n",
        "        rotation_range=10,  # randomly rotate images in the range (degrees, 0 to 180)\n",
        "        zoom_range = 0.1, # Randomly zoom image\n",
        "        width_shift_range=0.1,  # randomly shift images horizontally (fraction of total width)\n",
        "        height_shift_range=0.1,  # randomly shift images vertically (fraction of total height)\n",
        "        horizontal_flip=False,  # randomly flip images\n",
        "        vertical_flip=False)  # randomly flip images\n",
        "\n",
        "datagen.fit(X_train)\n"
      ],
      "metadata": {
        "id": "tDClBtCkgtSx"
      },
      "execution_count": 17,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Function to plot the confusion matrix with Plotly\n",
        "def plot_confusion_matrix(cm, classes, normalize=False):\n",
        "    if normalize:\n",
        "        cm = cm.astype('float') / cm.sum(axis=1)[:, np.newaxis]\n",
        "        colorscale = 'Plasma'\n",
        "    else:\n",
        "        colorscale = 'Magma_r'  # Reversed 'Magma' colorscale for non-normalized matrix\n",
        "\n",
        "    annotations = []\n",
        "    for i in range(len(classes)):\n",
        "        for j in range(len(classes)):\n",
        "            annotations.append(\n",
        "                {\n",
        "                    'x': classes[j],\n",
        "                    'y': classes[i],\n",
        "                    'text': str(cm[i, j]),\n",
        "                    'showarrow': False,\n",
        "                    'font': {'color': 'red' if cm[i, j] > 0.5 else 'black'}\n",
        "                }\n",
        "            )\n",
        "\n",
        "    fig = go.Figure(data=go.Heatmap(\n",
        "        z=cm,\n",
        "        x=list(classes),\n",
        "        y=list(classes),\n",
        "        colorscale=colorscale,\n",
        "        colorbar=dict(title='Normalized' if normalize else 'Count'),\n",
        "        showscale=True,\n",
        "        hoverinfo='z'\n",
        "    ))\n",
        "\n",
        "    fig.update_layout(\n",
        "        title='Confusion Matrix',\n",
        "        xaxis=dict(title='Predicted label'),\n",
        "        yaxis=dict(title='True label'),\n",
        "        annotations=annotations\n",
        "    )\n",
        "\n",
        "    if normalize:\n",
        "        fig.update_layout(title_text='Normalized Confusion Matrix')\n",
        "    else:\n",
        "        fig.update_layout(title_text='Confusion Matrix (Counts)')\n",
        "\n",
        "    fig.show()\n"
      ],
      "metadata": {
        "id": "10V0x8-mgtVJ"
      },
      "execution_count": 18,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from tensorflow.keras.callbacks import ReduceLROnPlateau, EarlyStopping\n",
        "\n",
        "# Set a learning rate annealer\n",
        "learning_rate_reduction = ReduceLROnPlateau(monitor='val_accuracy',\n",
        "                                            patience=3,\n",
        "                                            verbose=1,\n",
        "                                            factor=0.5,\n",
        "                                            min_lr=0.00001)"
      ],
      "metadata": {
        "id": "7gz4NHZGgtXe"
      },
      "execution_count": 19,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Training basline Model -- milestone 2"
      ],
      "metadata": {
        "id": "-O5yM9qk3z40"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "'''\n",
        "import tensorflow as tf\n",
        "from tensorflow.keras.applications import DenseNet121\n",
        "from tensorflow.keras.layers import Dense, GlobalAveragePooling2D, BatchNormalization\n",
        "from tensorflow.keras.models import Model\n",
        "from tensorflow.keras.optimizers import Adam\n",
        "\n",
        "# Load the pre-trained DenseNet-121 model (weights pre-trained on ImageNet)\n",
        "base_model = DenseNet201(weights='imagenet', include_top=False)\n",
        "\n",
        "# Freeze some layers in the base model\n",
        "num_layers_to_freeze = 95  # Choose the number of layers you want to freeze\n",
        "for layer in base_model.layers[:num_layers_to_freeze]:\n",
        "    layer.trainable = False\n",
        "\n",
        "# Add custom classification layers on top of the base model\n",
        "x = base_model.output\n",
        "x = GlobalAveragePooling2D()(x)\n",
        "x = Dense(256, activation='relu', kernel_regularizer=tf.keras.regularizers.l2(0.01))(x)\n",
        "x = BatchNormalization()(x)  # Add BatchNormalization layer for better convergence\n",
        "predictions = Dense(7, activation='softmax')(x)\n",
        "\n",
        "# Create the final model\n",
        "model_dense = Model(inputs=base_model.input, outputs=predictions)\n",
        "\n",
        "# Learning Rate Scheduler\n",
        "initial_learning_rate = 0.0005\n",
        "lr_schedule = tf.keras.optimizers.schedules.ExponentialDecay(\n",
        "    initial_learning_rate,\n",
        "    decay_steps=10000,   # Adjust decay_steps\n",
        "    decay_rate=0.9       # Adjust decay_rate\n",
        ")\n",
        "optimizer = Adam(learning_rate=lr_schedule, beta_1=0.9, beta_2=0.999, epsilon=1e-08, amsgrad=False)\n",
        "\n",
        "model_dense.compile(optimizer=optimizer, loss=\"categorical_crossentropy\", metrics=[\"accuracy\"])\n",
        "\n",
        "# Early Stopping\n",
        "early_stopping = EarlyStopping(monitor='val_loss', patience=15, restore_best_weights=True)\n",
        "'''"
      ],
      "metadata": {
        "id": "vSpka5yvgtZh",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 87
        },
        "outputId": "64f100d0-a401-428a-89ff-319e2d611d41"
      },
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'\\nimport tensorflow as tf\\nfrom tensorflow.keras.applications import DenseNet121\\nfrom tensorflow.keras.layers import Dense, GlobalAveragePooling2D, BatchNormalization\\nfrom tensorflow.keras.models import Model\\nfrom tensorflow.keras.optimizers import Adam\\n\\n# Load the pre-trained DenseNet-121 model (weights pre-trained on ImageNet)\\nbase_model = DenseNet201(weights=\\'imagenet\\', include_top=False)\\n\\n# Freeze some layers in the base model\\nnum_layers_to_freeze = 95  # Choose the number of layers you want to freeze\\nfor layer in base_model.layers[:num_layers_to_freeze]:\\n    layer.trainable = False\\n\\n# Add custom classification layers on top of the base model\\nx = base_model.output\\nx = GlobalAveragePooling2D()(x)\\nx = Dense(256, activation=\\'relu\\', kernel_regularizer=tf.keras.regularizers.l2(0.01))(x)\\nx = BatchNormalization()(x)  # Add BatchNormalization layer for better convergence\\npredictions = Dense(7, activation=\\'softmax\\')(x)\\n\\n# Create the final model\\nmodel_dense = Model(inputs=base_model.input, outputs=predictions)\\n\\n# Learning Rate Scheduler\\ninitial_learning_rate = 0.0005\\nlr_schedule = tf.keras.optimizers.schedules.ExponentialDecay(\\n    initial_learning_rate,\\n    decay_steps=10000,   # Adjust decay_steps\\n    decay_rate=0.9       # Adjust decay_rate\\n)\\noptimizer = Adam(learning_rate=lr_schedule, beta_1=0.9, beta_2=0.999, epsilon=1e-08, amsgrad=False)\\n\\nmodel_dense.compile(optimizer=optimizer, loss=\"categorical_crossentropy\", metrics=[\"accuracy\"])\\n\\n# Early Stopping\\nearly_stopping = EarlyStopping(monitor=\\'val_loss\\', patience=15, restore_best_weights=True)\\n'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 20
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "'''\n",
        "# Fit the model\n",
        "epochs = 60\n",
        "batch_size = 60\n",
        "history = model_dense.fit_generator(datagen.flow(X_train, y_train, batch_size=batch_size),\n",
        "                                    epochs=epochs, verbose=1, steps_per_epoch=X_train.shape[0] // batch_size,\n",
        "                                    callbacks=[learning_rate_reduction,early_stopping], validation_data=(X_test, y_test))\n",
        "\n",
        "# Plot the training and validation loss\n",
        "plt.figure(figsize=(10, 5))\n",
        "plt.plot(history.history['loss'], label='Training Loss')\n",
        "plt.plot(history.history['val_loss'], label='Validation Loss')\n",
        "plt.xlabel('Epochs')\n",
        "plt.ylabel('Loss')\n",
        "plt.legend()\n",
        "plt.title('Training and Validation Loss')\n",
        "plt.show()\n",
        "'''\n"
      ],
      "metadata": {
        "id": "Q1esQA3zgtcH",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 70
        },
        "outputId": "440017df-f8ac-4c5b-f20d-134759cc1ed8"
      },
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "\"\\n# Fit the model\\nepochs = 60\\nbatch_size = 60\\nhistory = model_dense.fit_generator(datagen.flow(X_train, y_train, batch_size=batch_size),\\n                                    epochs=epochs, verbose=1, steps_per_epoch=X_train.shape[0] // batch_size,\\n                                    callbacks=[learning_rate_reduction,early_stopping], validation_data=(X_test, y_test))\\n\\n# Plot the training and validation loss\\nplt.figure(figsize=(10, 5))\\nplt.plot(history.history['loss'], label='Training Loss')\\nplt.plot(history.history['val_loss'], label='Validation Loss')\\nplt.xlabel('Epochs')\\nplt.ylabel('Loss')\\nplt.legend()\\nplt.title('Training and Validation Loss')\\nplt.show()\\n\""
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 21
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### merge categorical and images data"
      ],
      "metadata": {
        "id": "LMjpa59u33N2"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "split_proportion = 0.8\n",
        "\n",
        "# Randomly shuffle the rows of the DataFrame\n",
        "shuffled_data = meta.sample(frac=1, random_state=41)  # random_state for reproducibility\n",
        "\n",
        "# Calculate the number of rows for the first piece\n",
        "total_rows = shuffled_data.shape[0]\n",
        "split_size = int(total_rows * split_proportion)\n",
        "\n",
        "# Split the DataFrame into two pieces\n",
        "Train = shuffled_data.iloc[:split_size]\n",
        "Test = shuffled_data.iloc[split_size:]"
      ],
      "metadata": {
        "id": "1mVEZ1D5gtew"
      },
      "execution_count": 22,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "from keras.utils import to_categorical\n",
        "\n",
        "X_train_image = Train['image']\n",
        "y_train = to_categorical(Train['dx_code'])\n",
        "\n",
        "X_test_image = Test['image']\n",
        "y_test = to_categorical(Test['dx_code'])"
      ],
      "metadata": {
        "id": "rYTR2bWNhOkE"
      },
      "execution_count": 23,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Convert Pandas Series to NumPy arrays\n",
        "X_train_image = np.array(X_train_image.tolist())\n",
        "X_test_image = np.array(X_test_image.tolist())\n",
        "\n",
        "# Reshape image data in 3 dimensions (height = 75, width = 100, channel = 3)\n",
        "X_train_image = X_train_image.reshape(X_train_image.shape[0], 75, 100, 3)\n",
        "X_test_image = X_test_image.reshape(X_test_image.shape[0], 75, 100, 3)\n"
      ],
      "metadata": {
        "id": "Twci-V_vgthD"
      },
      "execution_count": 24,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "\n",
        "categorical_data_train = Train[['age', 'dx_type', \"localization\"]].copy()\n",
        "categorical_data_test = Test[['age', 'dx_type', \"localization\"]].copy()\n"
      ],
      "metadata": {
        "id": "zjsJWoejfc-Y"
      },
      "execution_count": 25,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "# Define the columns you want to scale\n",
        "columns_to_scale = ['age']\n",
        "\n",
        "# Create a StandardScaler object\n",
        "scaler = StandardScaler()\n",
        "\n",
        "# Scale the 'age' column for training data\n",
        "categorical_data_train.loc[:, columns_to_scale] = scaler.fit_transform(categorical_data_train[columns_to_scale].values.reshape(-1, 1))\n",
        "\n",
        "# Scale the 'age' column for testing data\n",
        "categorical_data_test.loc[:, columns_to_scale] = scaler.transform(categorical_data_test[columns_to_scale].values.reshape(-1, 1))\n"
      ],
      "metadata": {
        "id": "tjG_z9DWkA81"
      },
      "execution_count": 26,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "# List of columns to one-hot encode\n",
        "columns_to_encode = ['dx_type', 'localization']\n",
        "\n",
        "# Perform one-hot encoding using get_dummies\n",
        "encoded_train = pd.get_dummies(categorical_data_train, columns=columns_to_encode)\n",
        "encoded_test = pd.get_dummies(categorical_data_test, columns=columns_to_encode)\n"
      ],
      "metadata": {
        "id": "J1q1LCOzfdBP"
      },
      "execution_count": 27,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Create model checkpoint"
      ],
      "metadata": {
        "id": "Jwy1Snov3-DF"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "'''\n",
        "### TODO: Checkpoint the model .\n",
        "from tensorflow.keras.callbacks import ModelCheckpoint\n",
        "\n",
        "model_filepath = \"/content/drive/MyDrive/HAMdatset/model-{epoch:02d}-{val_accuracy:.4f}.hdf5\"\n",
        "\n",
        "#Saves model when the validation accuracy is improving\n",
        "checkpoint = ModelCheckpoint(\n",
        "    filepath = model_filepath,\n",
        "    monitor='val_accuracy',\n",
        "    mode='max',\n",
        "    save_best_only=True,\n",
        "    verbose=1\n",
        ")\n",
        "'''"
      ],
      "metadata": {
        "id": "3FXPnmSaUou1",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 53
        },
        "outputId": "ee6c8a68-144f-401b-d96c-5681e1cc1a08"
      },
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'\\n### TODO: Checkpoint the model .\\nfrom tensorflow.keras.callbacks import ModelCheckpoint\\n\\nmodel_filepath = \"/content/drive/MyDrive/HAMdatset/model-{epoch:02d}-{val_accuracy:.4f}.hdf5\"\\n\\n#Saves model when the validation accuracy is improving\\ncheckpoint = ModelCheckpoint(\\n    filepath = model_filepath,\\n    monitor=\\'val_accuracy\\',\\n    mode=\\'max\\',\\n    save_best_only=True,\\n    verbose=1\\n)\\n'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 28
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### DenseNet201  model - multi-modal"
      ],
      "metadata": {
        "id": "hEoYJqg74Aju"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import tensorflow as tf\n",
        "from tensorflow.keras.applications import DenseNet201\n",
        "from tensorflow.keras.layers import Dense, GlobalAveragePooling2D, BatchNormalization, Input, Concatenate\n",
        "from tensorflow.keras.models import Model\n",
        "from tensorflow.keras.optimizers import Adam\n",
        "from tensorflow.keras.callbacks import EarlyStopping\n",
        "\n",
        "\n",
        "categorical_input = Input(shape=(20,))\n",
        "\n",
        "# Load the pre-trained DenseNet-121 model (Same as before)\n",
        "base_model = DenseNet201(weights='imagenet', include_top=False)\n",
        "\n",
        "# Freeze some layers in the base model\n",
        "num_layers_to_freeze = 95\n",
        "for layer in base_model.layers[:num_layers_to_freeze]:\n",
        "    layer.trainable = False\n",
        "\n",
        "# After GlobalAveragePooling2D layer, concatenate with the categorical input\n",
        "x = base_model.output\n",
        "x = GlobalAveragePooling2D()(x)\n",
        "x = Dense(256, activation='relu', kernel_regularizer=tf.keras.regularizers.l2(0.01))(x)\n",
        "\n",
        "# Add Custom Layers for Categorical Data\n",
        "y = Dense(64, activation='relu')(categorical_input)\n",
        "x = Concatenate()([x, y])\n",
        "\n",
        "x = BatchNormalization()(x)\n",
        "predictions = Dense(7, activation='softmax')(x)\n",
        "\n",
        "# Create the final model with both image and categorical inputs\n",
        "model_dense = Model(inputs=[base_model.input, categorical_input], outputs=predictions)\n",
        "\n",
        "# Learning Rate Scheduler\n",
        "initial_learning_rate = 0.0005\n",
        "lr_schedule = tf.keras.optimizers.schedules.ExponentialDecay(\n",
        "    initial_learning_rate,\n",
        "    decay_steps=10000,\n",
        "    decay_rate=0.9\n",
        ")\n",
        "optimizer = Adam(learning_rate=lr_schedule, beta_1=0.9, beta_2=0.999, epsilon=1e-08, amsgrad=False)\n",
        "\n",
        "model_dense.compile(optimizer=optimizer, loss=\"categorical_crossentropy\", metrics=[\"accuracy\"])\n",
        "\n",
        "# Early Stopping\n",
        "early_stopping = EarlyStopping(monitor='val_loss', patience=15, restore_best_weights=True)"
      ],
      "metadata": {
        "id": "A8EIagkgfdDu",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "2be5328a-23c4-4ec8-acf7-c81e38b52350"
      },
      "execution_count": 29,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Downloading data from https://storage.googleapis.com/tensorflow/keras-applications/densenet/densenet201_weights_tf_dim_ordering_tf_kernels_notop.h5\n",
            "74836368/74836368 [==============================] - 1s 0us/step\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Train the model with data augmentation and callbacks\n",
        "\n",
        "### TODO: Put in check point in callback\n",
        "\n",
        "epochs = 60\n",
        "batch_size = 60\n",
        "history = model_dense.fit(\n",
        "    [X_train_image, encoded_train],  # Update with your actual image and categorical training data\n",
        "    y_train, epochs=epochs, batch_size=batch_size,\n",
        "    callbacks=[learning_rate_reduction , early_stopping], validation_data=([X_test_image, encoded_test], y_test)\n",
        ")\n",
        "\n",
        "# Plot the training and validation loss\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "plt.figure(figsize=(10, 5))\n",
        "plt.plot(history.history['loss'], label='Training Loss')\n",
        "plt.plot(history.history['val_loss'], label='Validation Loss')\n",
        "plt.xlabel('Epochs')\n",
        "plt.ylabel('Loss')\n",
        "plt.legend()\n",
        "plt.title('Training and Validation Loss for <<DenseNet201>> with Multi_modal')\n",
        "plt.show()\n",
        "\n",
        "# Plot the training and validation accuracy\n",
        "plt.figure(figsize=(10, 5))\n",
        "plt.plot(history.history['accuracy'], label='Training Accuracy')\n",
        "plt.plot(history.history['val_accuracy'], label='Validation Accuracy')\n",
        "plt.xlabel('Epochs')\n",
        "plt.ylabel('Accuracy')\n",
        "plt.legend()\n",
        "plt.title('Training and Validation Accuracy for <<DenseNet201>> with Multi_modal')\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "WwvduYKQfdGN",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "outputId": "04effbf2-f118-44a0-c325-00a68b458467"
      },
      "execution_count": 31,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/60\n",
            "134/134 [==============================] - 157s 291ms/step - loss: 3.2038 - accuracy: 0.7228 - val_loss: 2.6201 - val_accuracy: 0.7049 - lr: 4.9930e-04\n",
            "Epoch 2/60\n",
            "134/134 [==============================] - 22s 167ms/step - loss: 1.5560 - accuracy: 0.8079 - val_loss: 66.5996 - val_accuracy: 0.5736 - lr: 4.9860e-04\n",
            "Epoch 3/60\n",
            "134/134 [==============================] - 24s 179ms/step - loss: 1.1102 - accuracy: 0.8068 - val_loss: 1.2291 - val_accuracy: 0.7703 - lr: 4.9789e-04\n",
            "Epoch 4/60\n",
            "134/134 [==============================] - 24s 177ms/step - loss: 0.7029 - accuracy: 0.8503 - val_loss: 0.7817 - val_accuracy: 0.7978 - lr: 4.9719e-04\n",
            "Epoch 5/60\n",
            "134/134 [==============================] - 23s 169ms/step - loss: 0.5313 - accuracy: 0.8751 - val_loss: 0.9561 - val_accuracy: 0.8043 - lr: 4.9649e-04\n",
            "Epoch 6/60\n",
            "134/134 [==============================] - 26s 197ms/step - loss: 0.3723 - accuracy: 0.9050 - val_loss: 0.8128 - val_accuracy: 0.7639 - lr: 4.9579e-04\n",
            "Epoch 7/60\n",
            "134/134 [==============================] - 23s 175ms/step - loss: 0.4947 - accuracy: 0.8570 - val_loss: 1.0201 - val_accuracy: 0.7688 - lr: 4.9509e-04\n",
            "Epoch 8/60\n",
            "134/134 [==============================] - 23s 174ms/step - loss: 0.3060 - accuracy: 0.9139 - val_loss: 0.6272 - val_accuracy: 0.8073 - lr: 4.9439e-04\n",
            "Epoch 9/60\n",
            "134/134 [==============================] - 27s 203ms/step - loss: 0.2124 - accuracy: 0.9422 - val_loss: 0.8420 - val_accuracy: 0.8228 - lr: 4.9369e-04\n",
            "Epoch 10/60\n",
            "134/134 [==============================] - 24s 179ms/step - loss: 0.1889 - accuracy: 0.9488 - val_loss: 0.7301 - val_accuracy: 0.8028 - lr: 4.9300e-04\n",
            "Epoch 11/60\n",
            "134/134 [==============================] - 24s 179ms/step - loss: 0.1446 - accuracy: 0.9636 - val_loss: 0.5960 - val_accuracy: 0.8432 - lr: 4.9230e-04\n",
            "Epoch 12/60\n",
            "134/134 [==============================] - 26s 192ms/step - loss: 0.0935 - accuracy: 0.9765 - val_loss: 0.7923 - val_accuracy: 0.8233 - lr: 4.9161e-04\n",
            "Epoch 13/60\n",
            "134/134 [==============================] - 25s 185ms/step - loss: 0.0756 - accuracy: 0.9822 - val_loss: 0.5856 - val_accuracy: 0.8542 - lr: 4.9091e-04\n",
            "Epoch 14/60\n",
            "134/134 [==============================] - 23s 173ms/step - loss: 0.0827 - accuracy: 0.9800 - val_loss: 0.8798 - val_accuracy: 0.8352 - lr: 4.9022e-04\n",
            "Epoch 15/60\n",
            "134/134 [==============================] - 24s 177ms/step - loss: 0.0773 - accuracy: 0.9813 - val_loss: 0.5722 - val_accuracy: 0.8507 - lr: 4.8953e-04\n",
            "Epoch 16/60\n",
            "134/134 [==============================] - ETA: 0s - loss: 0.0451 - accuracy: 0.9918\n",
            "Epoch 16: ReduceLROnPlateau reducing learning rate to 0.0002444185665808618.\n",
            "134/134 [==============================] - 24s 176ms/step - loss: 0.0451 - accuracy: 0.9918 - val_loss: 0.7058 - val_accuracy: 0.8367 - lr: 4.8884e-04\n",
            "Epoch 17/60\n",
            "134/134 [==============================] - 23s 171ms/step - loss: 0.0766 - accuracy: 0.9810 - val_loss: 1.1899 - val_accuracy: 0.7973 - lr: 4.8815e-04\n",
            "Epoch 18/60\n",
            "134/134 [==============================] - 26s 194ms/step - loss: 0.0709 - accuracy: 0.9832 - val_loss: 0.6380 - val_accuracy: 0.8507 - lr: 4.8746e-04\n",
            "Epoch 19/60\n",
            "134/134 [==============================] - ETA: 0s - loss: 0.0492 - accuracy: 0.9895\n",
            "Epoch 19: ReduceLROnPlateau reducing learning rate to 0.00024338552611880004.\n",
            "134/134 [==============================] - 24s 177ms/step - loss: 0.0492 - accuracy: 0.9895 - val_loss: 0.7253 - val_accuracy: 0.8352 - lr: 4.8677e-04\n",
            "Epoch 20/60\n",
            "134/134 [==============================] - 24s 181ms/step - loss: 0.0673 - accuracy: 0.9825 - val_loss: 291.0767 - val_accuracy: 0.3535 - lr: 4.8608e-04\n",
            "Epoch 21/60\n",
            "134/134 [==============================] - 24s 178ms/step - loss: 0.1533 - accuracy: 0.9589 - val_loss: 0.6996 - val_accuracy: 0.8392 - lr: 4.8540e-04\n",
            "Epoch 22/60\n",
            "134/134 [==============================] - ETA: 0s - loss: 0.0877 - accuracy: 0.9763\n",
            "Epoch 22: ReduceLROnPlateau reducing learning rate to 0.0002423568512313068.\n",
            "134/134 [==============================] - 23s 169ms/step - loss: 0.0877 - accuracy: 0.9763 - val_loss: 0.7111 - val_accuracy: 0.8337 - lr: 4.8471e-04\n",
            "Epoch 23/60\n",
            "134/134 [==============================] - 23s 175ms/step - loss: 0.0402 - accuracy: 0.9923 - val_loss: 0.7320 - val_accuracy: 0.8417 - lr: 4.8403e-04\n",
            "Epoch 24/60\n",
            "134/134 [==============================] - 26s 194ms/step - loss: 0.0529 - accuracy: 0.9869 - val_loss: 0.6765 - val_accuracy: 0.8342 - lr: 4.8335e-04\n",
            "Epoch 25/60\n",
            "134/134 [==============================] - ETA: 0s - loss: 0.0563 - accuracy: 0.9875\n",
            "Epoch 25: ReduceLROnPlateau reducing learning rate to 0.0002413325128145516.\n",
            "134/134 [==============================] - 24s 177ms/step - loss: 0.0563 - accuracy: 0.9875 - val_loss: 0.6004 - val_accuracy: 0.8512 - lr: 4.8267e-04\n",
            "Epoch 26/60\n",
            "134/134 [==============================] - 23s 174ms/step - loss: 0.0480 - accuracy: 0.9890 - val_loss: 0.8454 - val_accuracy: 0.8183 - lr: 4.8198e-04\n",
            "Epoch 27/60\n",
            "134/134 [==============================] - 24s 176ms/step - loss: 0.0391 - accuracy: 0.9915 - val_loss: 0.7949 - val_accuracy: 0.8352 - lr: 4.8130e-04\n",
            "Epoch 28/60\n",
            "134/134 [==============================] - ETA: 0s - loss: 0.0532 - accuracy: 0.9885\n",
            "Epoch 28: ReduceLROnPlateau reducing learning rate to 0.00024031251086853445.\n",
            "134/134 [==============================] - 23s 170ms/step - loss: 0.0532 - accuracy: 0.9885 - val_loss: 0.7023 - val_accuracy: 0.8507 - lr: 4.8063e-04\n",
            "Epoch 29/60\n",
            "134/134 [==============================] - 23s 174ms/step - loss: 0.0702 - accuracy: 0.9827 - val_loss: 0.7026 - val_accuracy: 0.8347 - lr: 4.7995e-04\n",
            "Epoch 30/60\n",
            "134/134 [==============================] - 27s 198ms/step - loss: 0.0436 - accuracy: 0.9920 - val_loss: 0.7499 - val_accuracy: 0.8382 - lr: 4.7927e-04\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import confusion_matrix, classification_report\n",
        "import plotly.graph_objs as go\n",
        "classes = range(7)\n",
        "\n",
        "Y_pred = model_dense.predict([X_test_image, encoded_test])\n",
        "Y_pred_classes = np.argmax(Y_pred, axis=1)\n",
        "Y_true = np.argmax(y_test, axis=1)\n",
        "\n",
        "# Compute the confusion matrix\n",
        "confusion_mtx = confusion_matrix(Y_true, Y_pred_classes)\n",
        "\n",
        "# Plot the confusion matrix with the new colorscale\n",
        "plot_confusion_matrix(confusion_mtx, classes=classes, normalize=False)\n",
        "\n",
        "report = classification_report(Y_true, Y_pred_classes)\n",
        "print(f\"Classification Report for <<DenseNet201>> with Multi_modal: \")\n",
        "print(report)\n"
      ],
      "metadata": {
        "id": "gb-QfpKTfdIy",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 820
        },
        "outputId": "eecc6e1d-a4ab-4878-dbee-9e85df257ec0"
      },
      "execution_count": 32,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "63/63 [==============================] - 9s 89ms/step\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "<html>\n",
              "<head><meta charset=\"utf-8\" /></head>\n",
              "<body>\n",
              "    <div>            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_SVG\"></script><script type=\"text/javascript\">if (window.MathJax && window.MathJax.Hub && window.MathJax.Hub.Config) {window.MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}</script>                <script type=\"text/javascript\">window.PlotlyConfig = {MathJaxConfig: 'local'};</script>\n",
              "        <script charset=\"utf-8\" src=\"https://cdn.plot.ly/plotly-2.24.1.min.js\"></script>                <div id=\"2a503ac2-a4b6-4456-adf0-aae5344d8294\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>            <script type=\"text/javascript\">                                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"2a503ac2-a4b6-4456-adf0-aae5344d8294\")) {                    Plotly.newPlot(                        \"2a503ac2-a4b6-4456-adf0-aae5344d8294\",                        [{\"colorbar\":{\"title\":{\"text\":\"Count\"}},\"colorscale\":[[0.0,\"#fcfdbf\"],[0.1111111111111111,\"#feca8d\"],[0.2222222222222222,\"#fd9668\"],[0.3333333333333333,\"#f1605d\"],[0.4444444444444444,\"#cd4071\"],[0.5555555555555556,\"#9e2f7f\"],[0.6666666666666666,\"#721f81\"],[0.7777777777777778,\"#440f76\"],[0.8888888888888888,\"#180f3d\"],[1.0,\"#000004\"]],\"hoverinfo\":\"z\",\"showscale\":true,\"x\":[0,1,2,3,4,5,6],\"y\":[0,1,2,3,4,5,6],\"z\":[[1219,51,21,5,3,1,5],[46,164,14,5,6,0,2],[34,28,142,7,10,0,7],[6,0,6,83,6,1,7],[0,5,11,3,45,0,4],[0,1,0,1,0,29,0],[1,0,0,0,2,0,22]],\"type\":\"heatmap\"}],                        {\"template\":{\"data\":{\"histogram2dcontour\":[{\"type\":\"histogram2dcontour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"choropleth\":[{\"type\":\"choropleth\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"histogram2d\":[{\"type\":\"histogram2d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmap\":[{\"type\":\"heatmap\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmapgl\":[{\"type\":\"heatmapgl\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"contourcarpet\":[{\"type\":\"contourcarpet\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"contour\":[{\"type\":\"contour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"surface\":[{\"type\":\"surface\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"mesh3d\":[{\"type\":\"mesh3d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"scatter\":[{\"fillpattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2},\"type\":\"scatter\"}],\"parcoords\":[{\"type\":\"parcoords\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolargl\":[{\"type\":\"scatterpolargl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"scattergeo\":[{\"type\":\"scattergeo\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolar\":[{\"type\":\"scatterpolar\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"scattergl\":[{\"type\":\"scattergl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatter3d\":[{\"type\":\"scatter3d\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattermapbox\":[{\"type\":\"scattermapbox\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterternary\":[{\"type\":\"scatterternary\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattercarpet\":[{\"type\":\"scattercarpet\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"autotypenumbers\":\"strict\",\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"hovermode\":\"closest\",\"hoverlabel\":{\"align\":\"left\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"bgcolor\":\"#E5ECF6\",\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"ternary\":{\"bgcolor\":\"#E5ECF6\",\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]]},\"xaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"yaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"geo\":{\"bgcolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"subunitcolor\":\"white\",\"showland\":true,\"showlakes\":true,\"lakecolor\":\"white\"},\"title\":{\"x\":0.05},\"mapbox\":{\"style\":\"light\"}}},\"title\":{\"text\":\"Confusion Matrix (Counts)\"},\"xaxis\":{\"title\":{\"text\":\"Predicted label\"}},\"yaxis\":{\"title\":{\"text\":\"True label\"}},\"annotations\":[{\"font\":{\"color\":\"red\"},\"showarrow\":false,\"text\":\"1219\",\"x\":0,\"y\":0},{\"font\":{\"color\":\"red\"},\"showarrow\":false,\"text\":\"51\",\"x\":1,\"y\":0},{\"font\":{\"color\":\"red\"},\"showarrow\":false,\"text\":\"21\",\"x\":2,\"y\":0},{\"font\":{\"color\":\"red\"},\"showarrow\":false,\"text\":\"5\",\"x\":3,\"y\":0},{\"font\":{\"color\":\"red\"},\"showarrow\":false,\"text\":\"3\",\"x\":4,\"y\":0},{\"font\":{\"color\":\"red\"},\"showarrow\":false,\"text\":\"1\",\"x\":5,\"y\":0},{\"font\":{\"color\":\"red\"},\"showarrow\":false,\"text\":\"5\",\"x\":6,\"y\":0},{\"font\":{\"color\":\"red\"},\"showarrow\":false,\"text\":\"46\",\"x\":0,\"y\":1},{\"font\":{\"color\":\"red\"},\"showarrow\":false,\"text\":\"164\",\"x\":1,\"y\":1},{\"font\":{\"color\":\"red\"},\"showarrow\":false,\"text\":\"14\",\"x\":2,\"y\":1},{\"font\":{\"color\":\"red\"},\"showarrow\":false,\"text\":\"5\",\"x\":3,\"y\":1},{\"font\":{\"color\":\"red\"},\"showarrow\":false,\"text\":\"6\",\"x\":4,\"y\":1},{\"font\":{\"color\":\"black\"},\"showarrow\":false,\"text\":\"0\",\"x\":5,\"y\":1},{\"font\":{\"color\":\"red\"},\"showarrow\":false,\"text\":\"2\",\"x\":6,\"y\":1},{\"font\":{\"color\":\"red\"},\"showarrow\":false,\"text\":\"34\",\"x\":0,\"y\":2},{\"font\":{\"color\":\"red\"},\"showarrow\":false,\"text\":\"28\",\"x\":1,\"y\":2},{\"font\":{\"color\":\"red\"},\"showarrow\":false,\"text\":\"142\",\"x\":2,\"y\":2},{\"font\":{\"color\":\"red\"},\"showarrow\":false,\"text\":\"7\",\"x\":3,\"y\":2},{\"font\":{\"color\":\"red\"},\"showarrow\":false,\"text\":\"10\",\"x\":4,\"y\":2},{\"font\":{\"color\":\"black\"},\"showarrow\":false,\"text\":\"0\",\"x\":5,\"y\":2},{\"font\":{\"color\":\"red\"},\"showarrow\":false,\"text\":\"7\",\"x\":6,\"y\":2},{\"font\":{\"color\":\"red\"},\"showarrow\":false,\"text\":\"6\",\"x\":0,\"y\":3},{\"font\":{\"color\":\"black\"},\"showarrow\":false,\"text\":\"0\",\"x\":1,\"y\":3},{\"font\":{\"color\":\"red\"},\"showarrow\":false,\"text\":\"6\",\"x\":2,\"y\":3},{\"font\":{\"color\":\"red\"},\"showarrow\":false,\"text\":\"83\",\"x\":3,\"y\":3},{\"font\":{\"color\":\"red\"},\"showarrow\":false,\"text\":\"6\",\"x\":4,\"y\":3},{\"font\":{\"color\":\"red\"},\"showarrow\":false,\"text\":\"1\",\"x\":5,\"y\":3},{\"font\":{\"color\":\"red\"},\"showarrow\":false,\"text\":\"7\",\"x\":6,\"y\":3},{\"font\":{\"color\":\"black\"},\"showarrow\":false,\"text\":\"0\",\"x\":0,\"y\":4},{\"font\":{\"color\":\"red\"},\"showarrow\":false,\"text\":\"5\",\"x\":1,\"y\":4},{\"font\":{\"color\":\"red\"},\"showarrow\":false,\"text\":\"11\",\"x\":2,\"y\":4},{\"font\":{\"color\":\"red\"},\"showarrow\":false,\"text\":\"3\",\"x\":3,\"y\":4},{\"font\":{\"color\":\"red\"},\"showarrow\":false,\"text\":\"45\",\"x\":4,\"y\":4},{\"font\":{\"color\":\"black\"},\"showarrow\":false,\"text\":\"0\",\"x\":5,\"y\":4},{\"font\":{\"color\":\"red\"},\"showarrow\":false,\"text\":\"4\",\"x\":6,\"y\":4},{\"font\":{\"color\":\"black\"},\"showarrow\":false,\"text\":\"0\",\"x\":0,\"y\":5},{\"font\":{\"color\":\"red\"},\"showarrow\":false,\"text\":\"1\",\"x\":1,\"y\":5},{\"font\":{\"color\":\"black\"},\"showarrow\":false,\"text\":\"0\",\"x\":2,\"y\":5},{\"font\":{\"color\":\"red\"},\"showarrow\":false,\"text\":\"1\",\"x\":3,\"y\":5},{\"font\":{\"color\":\"black\"},\"showarrow\":false,\"text\":\"0\",\"x\":4,\"y\":5},{\"font\":{\"color\":\"red\"},\"showarrow\":false,\"text\":\"29\",\"x\":5,\"y\":5},{\"font\":{\"color\":\"black\"},\"showarrow\":false,\"text\":\"0\",\"x\":6,\"y\":5},{\"font\":{\"color\":\"red\"},\"showarrow\":false,\"text\":\"1\",\"x\":0,\"y\":6},{\"font\":{\"color\":\"black\"},\"showarrow\":false,\"text\":\"0\",\"x\":1,\"y\":6},{\"font\":{\"color\":\"black\"},\"showarrow\":false,\"text\":\"0\",\"x\":2,\"y\":6},{\"font\":{\"color\":\"black\"},\"showarrow\":false,\"text\":\"0\",\"x\":3,\"y\":6},{\"font\":{\"color\":\"red\"},\"showarrow\":false,\"text\":\"2\",\"x\":4,\"y\":6},{\"font\":{\"color\":\"black\"},\"showarrow\":false,\"text\":\"0\",\"x\":5,\"y\":6},{\"font\":{\"color\":\"red\"},\"showarrow\":false,\"text\":\"22\",\"x\":6,\"y\":6}]},                        {\"responsive\": true}                    ).then(function(){\n",
              "                            \n",
              "var gd = document.getElementById('2a503ac2-a4b6-4456-adf0-aae5344d8294');\n",
              "var x = new MutationObserver(function (mutations, observer) {{\n",
              "        var display = window.getComputedStyle(gd).display;\n",
              "        if (!display || display === 'none') {{\n",
              "            console.log([gd, 'removed!']);\n",
              "            Plotly.purge(gd);\n",
              "            observer.disconnect();\n",
              "        }}\n",
              "}});\n",
              "\n",
              "// Listen for the removal of the full notebook cells\n",
              "var notebookContainer = gd.closest('#notebook-container');\n",
              "if (notebookContainer) {{\n",
              "    x.observe(notebookContainer, {childList: true});\n",
              "}}\n",
              "\n",
              "// Listen for the clearing of the current output cell\n",
              "var outputEl = gd.closest('.output');\n",
              "if (outputEl) {{\n",
              "    x.observe(outputEl, {childList: true});\n",
              "}}\n",
              "\n",
              "                        })                };                            </script>        </div>\n",
              "</body>\n",
              "</html>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Classification Report for <<DenseNet201>> with Multi_modal: \n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.93      0.93      0.93      1305\n",
            "           1       0.66      0.69      0.67       237\n",
            "           2       0.73      0.62      0.67       228\n",
            "           3       0.80      0.76      0.78       109\n",
            "           4       0.62      0.66      0.64        68\n",
            "           5       0.94      0.94      0.94        31\n",
            "           6       0.47      0.88      0.61        25\n",
            "\n",
            "    accuracy                           0.85      2003\n",
            "   macro avg       0.74      0.78      0.75      2003\n",
            "weighted avg       0.85      0.85      0.85      2003\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "Xf5CoKP7PuCD"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "### REsnet50 model - multi-modal"
      ],
      "metadata": {
        "id": "Y4UVoKQi4D4r"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "'''\n",
        "\n",
        "### TODO: Check point model plz resnet50\n",
        "from tensorflow.keras.callbacks import ModelCheckpoint\n",
        "\n",
        "model_filepath = \"/content/drive/MyDrive/HAMdatset/model-{epoch:02d}-{val_accuracy:.4f}.hdf5\"\n",
        "\n",
        "#Saves model when the validation accuracy is improving\n",
        "checkpoint = ModelCheckpoint(\n",
        "    filepath = model_filepath,\n",
        "    monitor='val_accuracy',\n",
        "    mode='max',\n",
        "    save_best_only=True,\n",
        "    verbose=1\n",
        ")\n",
        "'''\n"
      ],
      "metadata": {
        "id": "4XzsJHi4v35X"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "'''\n",
        "import tensorflow as tf\n",
        "from tensorflow.keras.applications import ResNet50\n",
        "from tensorflow.keras.layers import Dense, GlobalAveragePooling2D, BatchNormalization, Input, Concatenate\n",
        "from tensorflow.keras.models import Model\n",
        "from tensorflow.keras.optimizers import Adam\n",
        "from tensorflow.keras.callbacks import EarlyStopping\n",
        "\n",
        "\n",
        "categorical_input = Input(shape=(20,))\n",
        "\n",
        "# Load the pre-trained DenseNet-121 model (Same as before)\n",
        "base_model = ResNet50(weights='imagenet', include_top=False)\n",
        "\n",
        "# Freeze some layers in the base model\n",
        "num_layers_to_freeze = 95\n",
        "for layer in base_model.layers[:num_layers_to_freeze]:\n",
        "    layer.trainable = False\n",
        "\n",
        "# After GlobalAveragePooling2D layer, concatenate with the categorical input\n",
        "x = base_model.output\n",
        "x = GlobalAveragePooling2D()(x)\n",
        "x = Dense(256, activation='relu', kernel_regularizer=tf.keras.regularizers.l2(0.01))(x)\n",
        "\n",
        "# Add Custom Layers for Categorical Data\n",
        "y = Dense(64, activation='relu')(categorical_input)\n",
        "x = Concatenate()([x, y])\n",
        "\n",
        "predictions = Dense(7, activation='softmax')(x)\n",
        "\n",
        "# Create the final model with both image and categorical inputs\n",
        "model_resnet = Model(inputs=[base_model.input, categorical_input], outputs=predictions)\n",
        "\n",
        "# Learning Rate Scheduler\n",
        "initial_learning_rate = 0.0005\n",
        "lr_schedule = tf.keras.optimizers.schedules.ExponentialDecay(\n",
        "    initial_learning_rate,\n",
        "    decay_steps=10000,\n",
        "    decay_rate=0.9\n",
        ")\n",
        "optimizer = Adam(learning_rate=lr_schedule, beta_1=0.9, beta_2=0.999, epsilon=1e-08, amsgrad=False)\n",
        "\n",
        "model_resnet.compile(optimizer=optimizer, loss=\"categorical_crossentropy\", metrics=[\"accuracy\"])\n",
        "\n",
        "# Early Stopping\n",
        "early_stopping = EarlyStopping(monitor='val_loss', patience=15, restore_best_weights=True)\n",
        "'''"
      ],
      "metadata": {
        "id": "gaaPUdVtfbYP"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "'''\n",
        "\n",
        "# Train the model with data augmentation and callbacks\n",
        "### TODO: Put in check point in callback\n",
        "\n",
        "epochs = 60\n",
        "batch_size = 60\n",
        "history = model_resnet.fit(\n",
        "    [X_train_image, encoded_train],  # Update with your actual image and categorical training data\n",
        "    y_train, epochs=epochs, batch_size=batch_size,\n",
        "    callbacks=[learning_rate_reduction , early_stopping, checkpoint], validation_data=([X_test_image, encoded_test], y_test)\n",
        ")\n",
        "\n",
        "# Plot the training and validation loss\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "plt.figure(figsize=(10, 5))\n",
        "plt.plot(history.history['loss'], label='Training Loss')\n",
        "plt.plot(history.history['val_loss'], label='Validation Loss')\n",
        "plt.xlabel('Epochs')\n",
        "plt.ylabel('Loss')\n",
        "plt.legend()\n",
        "plt.title('Training and Validation Loss for <<ResNet50>> using Multi-Modal : ')\n",
        "plt.show()\n",
        "\n",
        "# Plot the training and validation accuracy\n",
        "plt.figure(figsize=(10, 5))\n",
        "plt.plot(history.history['accuracy'], label='Training Accuracy')\n",
        "plt.plot(history.history['val_accuracy'], label='Validation Accuracy')\n",
        "plt.xlabel('Epochs')\n",
        "plt.ylabel('Accuracy')\n",
        "plt.legend()\n",
        "plt.title('Training and Validation Accuracy for <<ResNet50>> using Multi-Modal : ')\n",
        "plt.show()\n",
        "'''"
      ],
      "metadata": {
        "id": "yG7xErKRknTy"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "'''\n",
        "from sklearn.metrics import confusion_matrix, classification_report\n",
        "\n",
        "classes = range(7)\n",
        "\n",
        "\n",
        "Y_pred = model_resnet.predict([X_test_image, encoded_test])\n",
        "Y_pred_classes = np.argmax(Y_pred, axis=1)\n",
        "Y_true = np.argmax(y_test, axis=1)\n",
        "\n",
        "# Compute the confusion matrix\n",
        "confusion_mtx = confusion_matrix(Y_true, Y_pred_classes)\n",
        "\n",
        "# Plot the confusion matrix with the new colorscale\n",
        "plot_confusion_matrix(confusion_mtx, classes=classes, normalize=False)\n",
        "\n",
        "report = classification_report(Y_true, Y_pred_classes)\n",
        "print(f\"Classification Report for <<ResNet50>> using Multi-Modal : \")\n",
        "print(report)\n",
        "'''"
      ],
      "metadata": {
        "id": "yPjv3nSFknex"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Predict with new data - preprocess ISIC-images data"
      ],
      "metadata": {
        "id": "z-lIrjfS22q2"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "new_data = pd.read_csv('new_data.csv')"
      ],
      "metadata": {
        "id": "4PjxPHkHPvAR"
      },
      "execution_count": 89,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "new_data"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "id": "bq4SbOnlaXuv",
        "outputId": "fe063a11-c65f-4663-e007-9a13f4295349"
      },
      "execution_count": 90,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "           isic_id                        attribution copyright_license  \\\n",
              "0     ISIC_0079358  Hospital Italiano de Buenos Aires             CC-BY   \n",
              "1     ISIC_0086914  Hospital Italiano de Buenos Aires             CC-BY   \n",
              "2     ISIC_0088904  Hospital Italiano de Buenos Aires             CC-BY   \n",
              "3     ISIC_0094098  Hospital Italiano de Buenos Aires             CC-BY   \n",
              "4     ISIC_0095134  Hospital Italiano de Buenos Aires             CC-BY   \n",
              "...            ...                                ...               ...   \n",
              "1611  ISIC_9989778  Hospital Italiano de Buenos Aires             CC-BY   \n",
              "1612  ISIC_9995847  Hospital Italiano de Buenos Aires             CC-BY   \n",
              "1613  ISIC_9997367  Hospital Italiano de Buenos Aires             CC-BY   \n",
              "1614  ISIC_9998679  Hospital Italiano de Buenos Aires             CC-BY   \n",
              "1615  ISIC_9999251  Hospital Italiano de Buenos Aires             CC-BY   \n",
              "\n",
              "      age_approx anatom_site_general benign_malignant   dermoscopic_type  \\\n",
              "0           35.0      anterior torso           benign  contact polarized   \n",
              "1           55.0     upper extremity        malignant  contact polarized   \n",
              "2           50.0                 NaN        malignant  contact polarized   \n",
              "3           65.0     posterior torso        malignant                NaN   \n",
              "4           70.0      anterior torso        malignant  contact polarized   \n",
              "...          ...                 ...              ...                ...   \n",
              "1611        40.0                 NaN           benign  contact polarized   \n",
              "1612        75.0     upper extremity           benign  contact polarized   \n",
              "1613        70.0           head/neck           benign                NaN   \n",
              "1614        65.0           head/neck        malignant  contact polarized   \n",
              "1615        65.0     lower extremity           benign  contact polarized   \n",
              "\n",
              "                 diagnosis diagnosis_confirm_type family_hx_mm  \\\n",
              "0                    nevus                    NaN        False   \n",
              "1     basal cell carcinoma         histopathology        False   \n",
              "2     basal cell carcinoma         histopathology        False   \n",
              "3                 melanoma         histopathology        False   \n",
              "4                 melanoma         histopathology        False   \n",
              "...                    ...                    ...          ...   \n",
              "1611                 nevus                    NaN        False   \n",
              "1612       vascular lesion         histopathology          NaN   \n",
              "1613     actinic keratosis                    NaN          NaN   \n",
              "1614  basal cell carcinoma         histopathology          NaN   \n",
              "1615     actinic keratosis         histopathology        False   \n",
              "\n",
              "              image_type   lesion_id  patient_id personal_hx_mm     sex  \n",
              "0            dermoscopic  IL_3989348  IP_9328831          False  female  \n",
              "1            dermoscopic  IL_9767756  IP_7506563           True    male  \n",
              "2            dermoscopic  IL_8711401  IP_0222733          False  female  \n",
              "3     clinical: overview  IL_6961144  IP_1218261           True    male  \n",
              "4            dermoscopic  IL_4530268  IP_8235588           True  female  \n",
              "...                  ...         ...         ...            ...     ...  \n",
              "1611         dermoscopic  IL_8944708  IP_1404370          False    male  \n",
              "1612         dermoscopic  IL_1047690  IP_8538177            NaN  female  \n",
              "1613  clinical: overview  IL_1956821  IP_2692251            NaN  female  \n",
              "1614         dermoscopic  IL_3341905  IP_5842685            NaN  female  \n",
              "1615         dermoscopic  IL_1343671  IP_3975331           True  female  \n",
              "\n",
              "[1616 rows x 15 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-823be7d8-4fd8-4869-b993-f92f1c02ac30\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>isic_id</th>\n",
              "      <th>attribution</th>\n",
              "      <th>copyright_license</th>\n",
              "      <th>age_approx</th>\n",
              "      <th>anatom_site_general</th>\n",
              "      <th>benign_malignant</th>\n",
              "      <th>dermoscopic_type</th>\n",
              "      <th>diagnosis</th>\n",
              "      <th>diagnosis_confirm_type</th>\n",
              "      <th>family_hx_mm</th>\n",
              "      <th>image_type</th>\n",
              "      <th>lesion_id</th>\n",
              "      <th>patient_id</th>\n",
              "      <th>personal_hx_mm</th>\n",
              "      <th>sex</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>ISIC_0079358</td>\n",
              "      <td>Hospital Italiano de Buenos Aires</td>\n",
              "      <td>CC-BY</td>\n",
              "      <td>35.0</td>\n",
              "      <td>anterior torso</td>\n",
              "      <td>benign</td>\n",
              "      <td>contact polarized</td>\n",
              "      <td>nevus</td>\n",
              "      <td>NaN</td>\n",
              "      <td>False</td>\n",
              "      <td>dermoscopic</td>\n",
              "      <td>IL_3989348</td>\n",
              "      <td>IP_9328831</td>\n",
              "      <td>False</td>\n",
              "      <td>female</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>ISIC_0086914</td>\n",
              "      <td>Hospital Italiano de Buenos Aires</td>\n",
              "      <td>CC-BY</td>\n",
              "      <td>55.0</td>\n",
              "      <td>upper extremity</td>\n",
              "      <td>malignant</td>\n",
              "      <td>contact polarized</td>\n",
              "      <td>basal cell carcinoma</td>\n",
              "      <td>histopathology</td>\n",
              "      <td>False</td>\n",
              "      <td>dermoscopic</td>\n",
              "      <td>IL_9767756</td>\n",
              "      <td>IP_7506563</td>\n",
              "      <td>True</td>\n",
              "      <td>male</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>ISIC_0088904</td>\n",
              "      <td>Hospital Italiano de Buenos Aires</td>\n",
              "      <td>CC-BY</td>\n",
              "      <td>50.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>malignant</td>\n",
              "      <td>contact polarized</td>\n",
              "      <td>basal cell carcinoma</td>\n",
              "      <td>histopathology</td>\n",
              "      <td>False</td>\n",
              "      <td>dermoscopic</td>\n",
              "      <td>IL_8711401</td>\n",
              "      <td>IP_0222733</td>\n",
              "      <td>False</td>\n",
              "      <td>female</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>ISIC_0094098</td>\n",
              "      <td>Hospital Italiano de Buenos Aires</td>\n",
              "      <td>CC-BY</td>\n",
              "      <td>65.0</td>\n",
              "      <td>posterior torso</td>\n",
              "      <td>malignant</td>\n",
              "      <td>NaN</td>\n",
              "      <td>melanoma</td>\n",
              "      <td>histopathology</td>\n",
              "      <td>False</td>\n",
              "      <td>clinical: overview</td>\n",
              "      <td>IL_6961144</td>\n",
              "      <td>IP_1218261</td>\n",
              "      <td>True</td>\n",
              "      <td>male</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>ISIC_0095134</td>\n",
              "      <td>Hospital Italiano de Buenos Aires</td>\n",
              "      <td>CC-BY</td>\n",
              "      <td>70.0</td>\n",
              "      <td>anterior torso</td>\n",
              "      <td>malignant</td>\n",
              "      <td>contact polarized</td>\n",
              "      <td>melanoma</td>\n",
              "      <td>histopathology</td>\n",
              "      <td>False</td>\n",
              "      <td>dermoscopic</td>\n",
              "      <td>IL_4530268</td>\n",
              "      <td>IP_8235588</td>\n",
              "      <td>True</td>\n",
              "      <td>female</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1611</th>\n",
              "      <td>ISIC_9989778</td>\n",
              "      <td>Hospital Italiano de Buenos Aires</td>\n",
              "      <td>CC-BY</td>\n",
              "      <td>40.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>benign</td>\n",
              "      <td>contact polarized</td>\n",
              "      <td>nevus</td>\n",
              "      <td>NaN</td>\n",
              "      <td>False</td>\n",
              "      <td>dermoscopic</td>\n",
              "      <td>IL_8944708</td>\n",
              "      <td>IP_1404370</td>\n",
              "      <td>False</td>\n",
              "      <td>male</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1612</th>\n",
              "      <td>ISIC_9995847</td>\n",
              "      <td>Hospital Italiano de Buenos Aires</td>\n",
              "      <td>CC-BY</td>\n",
              "      <td>75.0</td>\n",
              "      <td>upper extremity</td>\n",
              "      <td>benign</td>\n",
              "      <td>contact polarized</td>\n",
              "      <td>vascular lesion</td>\n",
              "      <td>histopathology</td>\n",
              "      <td>NaN</td>\n",
              "      <td>dermoscopic</td>\n",
              "      <td>IL_1047690</td>\n",
              "      <td>IP_8538177</td>\n",
              "      <td>NaN</td>\n",
              "      <td>female</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1613</th>\n",
              "      <td>ISIC_9997367</td>\n",
              "      <td>Hospital Italiano de Buenos Aires</td>\n",
              "      <td>CC-BY</td>\n",
              "      <td>70.0</td>\n",
              "      <td>head/neck</td>\n",
              "      <td>benign</td>\n",
              "      <td>NaN</td>\n",
              "      <td>actinic keratosis</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>clinical: overview</td>\n",
              "      <td>IL_1956821</td>\n",
              "      <td>IP_2692251</td>\n",
              "      <td>NaN</td>\n",
              "      <td>female</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1614</th>\n",
              "      <td>ISIC_9998679</td>\n",
              "      <td>Hospital Italiano de Buenos Aires</td>\n",
              "      <td>CC-BY</td>\n",
              "      <td>65.0</td>\n",
              "      <td>head/neck</td>\n",
              "      <td>malignant</td>\n",
              "      <td>contact polarized</td>\n",
              "      <td>basal cell carcinoma</td>\n",
              "      <td>histopathology</td>\n",
              "      <td>NaN</td>\n",
              "      <td>dermoscopic</td>\n",
              "      <td>IL_3341905</td>\n",
              "      <td>IP_5842685</td>\n",
              "      <td>NaN</td>\n",
              "      <td>female</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1615</th>\n",
              "      <td>ISIC_9999251</td>\n",
              "      <td>Hospital Italiano de Buenos Aires</td>\n",
              "      <td>CC-BY</td>\n",
              "      <td>65.0</td>\n",
              "      <td>lower extremity</td>\n",
              "      <td>benign</td>\n",
              "      <td>contact polarized</td>\n",
              "      <td>actinic keratosis</td>\n",
              "      <td>histopathology</td>\n",
              "      <td>False</td>\n",
              "      <td>dermoscopic</td>\n",
              "      <td>IL_1343671</td>\n",
              "      <td>IP_3975331</td>\n",
              "      <td>True</td>\n",
              "      <td>female</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1616 rows × 15 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-823be7d8-4fd8-4869-b993-f92f1c02ac30')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-823be7d8-4fd8-4869-b993-f92f1c02ac30 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-823be7d8-4fd8-4869-b993-f92f1c02ac30');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-f60c1e73-0885-4dd5-bfed-3e91b8772cd3\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-f60c1e73-0885-4dd5-bfed-3e91b8772cd3')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-f60c1e73-0885-4dd5-bfed-3e91b8772cd3 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_1b9e66c9-8b1a-4bde-b032-1116b615d2ca\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('new_data')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_1b9e66c9-8b1a-4bde-b032-1116b615d2ca button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('new_data');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 90
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "## TODO: So I only extract these columns out but I i think we need to extract Lession ID as well. --> just to fit with HAM10000 meta data.\n",
        "new_data = new_data[['isic_id', 'age_approx','anatom_site_general','diagnosis','sex' ,'diagnosis_confirm_type','lesion_id']]"
      ],
      "metadata": {
        "id": "viddpxKsVBlh"
      },
      "execution_count": 91,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "new_data['diagnosis_confirm_type'].unique()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7d1i7NDXnczK",
        "outputId": "9e7cf710-b84a-4c3d-c19d-0022ad5667c1"
      },
      "execution_count": 92,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([nan, 'histopathology', 'single image expert consensus'],\n",
              "      dtype=object)"
            ]
          },
          "metadata": {},
          "execution_count": 92
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "meta['dx_type'].unique()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zkXJElrSnc1_",
        "outputId": "3ad486f5-fb78-48e7-cee0-d3527acde627"
      },
      "execution_count": 93,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array(['histo', 'consensus', 'confocal', 'follow_up'], dtype=object)"
            ]
          },
          "metadata": {},
          "execution_count": 93
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Mapping proposal :\n",
        "histopathology --> histo\n",
        "\n",
        "single image expert consensus --> consensus\n",
        "\n",
        "nan --> mode\n"
      ],
      "metadata": {
        "id": "AGvI5pccnxut"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "\n",
        "# Assuming 'meta' and 'new_data' are predefined DataFrames\n",
        "# and 'diagnosis_confirm_type' is a column in 'new_data'\n",
        "\n",
        "# Create a copy of new_data to work with\n",
        "new_data_copy = new_data.copy()\n",
        "\n",
        "# Determine the most frequent value in meta['dx_type']\n",
        "most_frequent = pd.Series(meta['dx_type']).value_counts().idxmax()\n",
        "\n",
        "# Create a mapping dictionary\n",
        "mapping = {\n",
        "    'histopathology': 'histo',\n",
        "    'single image expert consensus': 'consensus'\n",
        "}\n",
        "\n",
        "# Replace NaN values in new_data_copy['diagnosis_confirm_type'] with the most frequent value from 'meta'\n",
        "new_data_copy['diagnosis_confirm_type'] = new_data_copy['diagnosis_confirm_type'].fillna(most_frequent)\n",
        "\n",
        "# Apply the mapping to the 'diagnosis_confirm_type' column\n",
        "new_data_copy['diagnosis_confirm_type'] = new_data_copy['diagnosis_confirm_type'].map(mapping)\n"
      ],
      "metadata": {
        "id": "SzSL5fsqn9SR"
      },
      "execution_count": 94,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "jgoGeu4OpFs6"
      },
      "execution_count": 94,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "new_data = new_data_copy"
      ],
      "metadata": {
        "id": "HatF9Ox6pAe0"
      },
      "execution_count": 95,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Rename 'diagnosis_confirm_type' column to 'dx_type' in new_data DataFrame\n",
        "new_data.rename(columns={'diagnosis_confirm_type': 'dx_type'}, inplace=True)\n",
        "\n"
      ],
      "metadata": {
        "id": "mFC9SKT9olGe"
      },
      "execution_count": 96,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "new_data['dx_type'].fillna('histo', inplace=True)\n"
      ],
      "metadata": {
        "id": "Ysv9LMednc4m"
      },
      "execution_count": 97,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "new_data"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "id": "mpkshy3GpX4L",
        "outputId": "08b44953-00ec-40fc-f433-5ef3a3711670"
      },
      "execution_count": 98,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "           isic_id  age_approx anatom_site_general             diagnosis  \\\n",
              "0     ISIC_0079358        35.0      anterior torso                 nevus   \n",
              "1     ISIC_0086914        55.0     upper extremity  basal cell carcinoma   \n",
              "2     ISIC_0088904        50.0                 NaN  basal cell carcinoma   \n",
              "3     ISIC_0094098        65.0     posterior torso              melanoma   \n",
              "4     ISIC_0095134        70.0      anterior torso              melanoma   \n",
              "...            ...         ...                 ...                   ...   \n",
              "1611  ISIC_9989778        40.0                 NaN                 nevus   \n",
              "1612  ISIC_9995847        75.0     upper extremity       vascular lesion   \n",
              "1613  ISIC_9997367        70.0           head/neck     actinic keratosis   \n",
              "1614  ISIC_9998679        65.0           head/neck  basal cell carcinoma   \n",
              "1615  ISIC_9999251        65.0     lower extremity     actinic keratosis   \n",
              "\n",
              "         sex dx_type   lesion_id  \n",
              "0     female   histo  IL_3989348  \n",
              "1       male   histo  IL_9767756  \n",
              "2     female   histo  IL_8711401  \n",
              "3       male   histo  IL_6961144  \n",
              "4     female   histo  IL_4530268  \n",
              "...      ...     ...         ...  \n",
              "1611    male   histo  IL_8944708  \n",
              "1612  female   histo  IL_1047690  \n",
              "1613  female   histo  IL_1956821  \n",
              "1614  female   histo  IL_3341905  \n",
              "1615  female   histo  IL_1343671  \n",
              "\n",
              "[1616 rows x 7 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-6e70877f-3d81-4e03-929d-bf0e29a7aea7\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>isic_id</th>\n",
              "      <th>age_approx</th>\n",
              "      <th>anatom_site_general</th>\n",
              "      <th>diagnosis</th>\n",
              "      <th>sex</th>\n",
              "      <th>dx_type</th>\n",
              "      <th>lesion_id</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>ISIC_0079358</td>\n",
              "      <td>35.0</td>\n",
              "      <td>anterior torso</td>\n",
              "      <td>nevus</td>\n",
              "      <td>female</td>\n",
              "      <td>histo</td>\n",
              "      <td>IL_3989348</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>ISIC_0086914</td>\n",
              "      <td>55.0</td>\n",
              "      <td>upper extremity</td>\n",
              "      <td>basal cell carcinoma</td>\n",
              "      <td>male</td>\n",
              "      <td>histo</td>\n",
              "      <td>IL_9767756</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>ISIC_0088904</td>\n",
              "      <td>50.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>basal cell carcinoma</td>\n",
              "      <td>female</td>\n",
              "      <td>histo</td>\n",
              "      <td>IL_8711401</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>ISIC_0094098</td>\n",
              "      <td>65.0</td>\n",
              "      <td>posterior torso</td>\n",
              "      <td>melanoma</td>\n",
              "      <td>male</td>\n",
              "      <td>histo</td>\n",
              "      <td>IL_6961144</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>ISIC_0095134</td>\n",
              "      <td>70.0</td>\n",
              "      <td>anterior torso</td>\n",
              "      <td>melanoma</td>\n",
              "      <td>female</td>\n",
              "      <td>histo</td>\n",
              "      <td>IL_4530268</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1611</th>\n",
              "      <td>ISIC_9989778</td>\n",
              "      <td>40.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>nevus</td>\n",
              "      <td>male</td>\n",
              "      <td>histo</td>\n",
              "      <td>IL_8944708</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1612</th>\n",
              "      <td>ISIC_9995847</td>\n",
              "      <td>75.0</td>\n",
              "      <td>upper extremity</td>\n",
              "      <td>vascular lesion</td>\n",
              "      <td>female</td>\n",
              "      <td>histo</td>\n",
              "      <td>IL_1047690</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1613</th>\n",
              "      <td>ISIC_9997367</td>\n",
              "      <td>70.0</td>\n",
              "      <td>head/neck</td>\n",
              "      <td>actinic keratosis</td>\n",
              "      <td>female</td>\n",
              "      <td>histo</td>\n",
              "      <td>IL_1956821</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1614</th>\n",
              "      <td>ISIC_9998679</td>\n",
              "      <td>65.0</td>\n",
              "      <td>head/neck</td>\n",
              "      <td>basal cell carcinoma</td>\n",
              "      <td>female</td>\n",
              "      <td>histo</td>\n",
              "      <td>IL_3341905</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1615</th>\n",
              "      <td>ISIC_9999251</td>\n",
              "      <td>65.0</td>\n",
              "      <td>lower extremity</td>\n",
              "      <td>actinic keratosis</td>\n",
              "      <td>female</td>\n",
              "      <td>histo</td>\n",
              "      <td>IL_1343671</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1616 rows × 7 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-6e70877f-3d81-4e03-929d-bf0e29a7aea7')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-6e70877f-3d81-4e03-929d-bf0e29a7aea7 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-6e70877f-3d81-4e03-929d-bf0e29a7aea7');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-7489c317-24ae-490b-abb8-9cb3f9f9871f\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-7489c317-24ae-490b-abb8-9cb3f9f9871f')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-7489c317-24ae-490b-abb8-9cb3f9f9871f button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_2852f005-a9f9-401c-8654-c691f71e5d4a\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('new_data')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_2852f005-a9f9-401c-8654-c691f71e5d4a button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('new_data');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 98
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "new_data.isnull().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Dn1Xe88CVBoH",
        "outputId": "efd341df-f682-492f-ed1f-98317f4a3160"
      },
      "execution_count": 99,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "isic_id                  0\n",
              "age_approx               5\n",
              "anatom_site_general    110\n",
              "diagnosis                0\n",
              "sex                      5\n",
              "dx_type                  0\n",
              "lesion_id                0\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 99
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "new_data = new_data.rename(columns={\n",
        "    'isic_id': 'image_id',\n",
        "    'age_approx': 'age',\n",
        "    'anatom_site_general': 'localization',\n",
        "    'diagnosis': 'dx'\n",
        "})"
      ],
      "metadata": {
        "id": "YsKUvMZrVBr5"
      },
      "execution_count": 100,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "new_data"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "id": "0kCEL2jpVBtK",
        "outputId": "58202810-9d5b-4604-ff85-8981e6e013a3"
      },
      "execution_count": 101,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "          image_id   age     localization                    dx     sex  \\\n",
              "0     ISIC_0079358  35.0   anterior torso                 nevus  female   \n",
              "1     ISIC_0086914  55.0  upper extremity  basal cell carcinoma    male   \n",
              "2     ISIC_0088904  50.0              NaN  basal cell carcinoma  female   \n",
              "3     ISIC_0094098  65.0  posterior torso              melanoma    male   \n",
              "4     ISIC_0095134  70.0   anterior torso              melanoma  female   \n",
              "...            ...   ...              ...                   ...     ...   \n",
              "1611  ISIC_9989778  40.0              NaN                 nevus    male   \n",
              "1612  ISIC_9995847  75.0  upper extremity       vascular lesion  female   \n",
              "1613  ISIC_9997367  70.0        head/neck     actinic keratosis  female   \n",
              "1614  ISIC_9998679  65.0        head/neck  basal cell carcinoma  female   \n",
              "1615  ISIC_9999251  65.0  lower extremity     actinic keratosis  female   \n",
              "\n",
              "     dx_type   lesion_id  \n",
              "0      histo  IL_3989348  \n",
              "1      histo  IL_9767756  \n",
              "2      histo  IL_8711401  \n",
              "3      histo  IL_6961144  \n",
              "4      histo  IL_4530268  \n",
              "...      ...         ...  \n",
              "1611   histo  IL_8944708  \n",
              "1612   histo  IL_1047690  \n",
              "1613   histo  IL_1956821  \n",
              "1614   histo  IL_3341905  \n",
              "1615   histo  IL_1343671  \n",
              "\n",
              "[1616 rows x 7 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-975a4401-b078-4f38-b384-3530da4ff8e5\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>image_id</th>\n",
              "      <th>age</th>\n",
              "      <th>localization</th>\n",
              "      <th>dx</th>\n",
              "      <th>sex</th>\n",
              "      <th>dx_type</th>\n",
              "      <th>lesion_id</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>ISIC_0079358</td>\n",
              "      <td>35.0</td>\n",
              "      <td>anterior torso</td>\n",
              "      <td>nevus</td>\n",
              "      <td>female</td>\n",
              "      <td>histo</td>\n",
              "      <td>IL_3989348</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>ISIC_0086914</td>\n",
              "      <td>55.0</td>\n",
              "      <td>upper extremity</td>\n",
              "      <td>basal cell carcinoma</td>\n",
              "      <td>male</td>\n",
              "      <td>histo</td>\n",
              "      <td>IL_9767756</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>ISIC_0088904</td>\n",
              "      <td>50.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>basal cell carcinoma</td>\n",
              "      <td>female</td>\n",
              "      <td>histo</td>\n",
              "      <td>IL_8711401</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>ISIC_0094098</td>\n",
              "      <td>65.0</td>\n",
              "      <td>posterior torso</td>\n",
              "      <td>melanoma</td>\n",
              "      <td>male</td>\n",
              "      <td>histo</td>\n",
              "      <td>IL_6961144</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>ISIC_0095134</td>\n",
              "      <td>70.0</td>\n",
              "      <td>anterior torso</td>\n",
              "      <td>melanoma</td>\n",
              "      <td>female</td>\n",
              "      <td>histo</td>\n",
              "      <td>IL_4530268</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1611</th>\n",
              "      <td>ISIC_9989778</td>\n",
              "      <td>40.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>nevus</td>\n",
              "      <td>male</td>\n",
              "      <td>histo</td>\n",
              "      <td>IL_8944708</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1612</th>\n",
              "      <td>ISIC_9995847</td>\n",
              "      <td>75.0</td>\n",
              "      <td>upper extremity</td>\n",
              "      <td>vascular lesion</td>\n",
              "      <td>female</td>\n",
              "      <td>histo</td>\n",
              "      <td>IL_1047690</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1613</th>\n",
              "      <td>ISIC_9997367</td>\n",
              "      <td>70.0</td>\n",
              "      <td>head/neck</td>\n",
              "      <td>actinic keratosis</td>\n",
              "      <td>female</td>\n",
              "      <td>histo</td>\n",
              "      <td>IL_1956821</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1614</th>\n",
              "      <td>ISIC_9998679</td>\n",
              "      <td>65.0</td>\n",
              "      <td>head/neck</td>\n",
              "      <td>basal cell carcinoma</td>\n",
              "      <td>female</td>\n",
              "      <td>histo</td>\n",
              "      <td>IL_3341905</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1615</th>\n",
              "      <td>ISIC_9999251</td>\n",
              "      <td>65.0</td>\n",
              "      <td>lower extremity</td>\n",
              "      <td>actinic keratosis</td>\n",
              "      <td>female</td>\n",
              "      <td>histo</td>\n",
              "      <td>IL_1343671</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1616 rows × 7 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-975a4401-b078-4f38-b384-3530da4ff8e5')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-975a4401-b078-4f38-b384-3530da4ff8e5 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-975a4401-b078-4f38-b384-3530da4ff8e5');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-ec13302c-8b78-4814-bc7c-b747c117e970\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-ec13302c-8b78-4814-bc7c-b747c117e970')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-ec13302c-8b78-4814-bc7c-b747c117e970 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_44d10d97-7d7a-41a0-aa5a-c559fc79ca75\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('new_data')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_44d10d97-7d7a-41a0-aa5a-c559fc79ca75 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('new_data');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 101
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Replace null with mean\n",
        "new_data['age'].fillna((new_data['age'].mean()), inplace=True)"
      ],
      "metadata": {
        "id": "mdmuV4oi5gCY"
      },
      "execution_count": 102,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "## fill in sex randomly + localization will be filled in\n",
        "new_data.isnull().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "8ivs7qhIWPY1",
        "outputId": "ab296e94-2ff6-49ec-fbb5-5274d26081a6"
      },
      "execution_count": 103,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "image_id          0\n",
              "age               0\n",
              "localization    110\n",
              "dx                0\n",
              "sex               5\n",
              "dx_type           0\n",
              "lesion_id         0\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 103
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import random\n",
        "\n",
        "# fill in sex randomly\n",
        "new_data['sex'] = new_data['sex'].apply(lambda x: random.choice(['female', 'male']) if pd.isna(x) else x)\n"
      ],
      "metadata": {
        "id": "y9uqPnRNW2nt"
      },
      "execution_count": 104,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "new_data.isnull().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "AnWwCwgfW8o9",
        "outputId": "ff5cb92e-c555-4b54-9881-3d480756ac88"
      },
      "execution_count": 105,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "image_id          0\n",
              "age               0\n",
              "localization    110\n",
              "dx                0\n",
              "sex               0\n",
              "dx_type           0\n",
              "lesion_id         0\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 105
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "new_data['localization'].unique()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Px9RrD11W8rP",
        "outputId": "fbeff219-89d9-4d48-fdfb-66cc6a539853"
      },
      "execution_count": 106,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array(['anterior torso', 'upper extremity', nan, 'posterior torso',\n",
              "       'lower extremity', 'lateral torso', 'head/neck', 'oral/genital',\n",
              "       'palms/soles'], dtype=object)"
            ]
          },
          "metadata": {},
          "execution_count": 106
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "meta['localization'].unique()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "P0ISUl0qW8tS",
        "outputId": "53a0f332-eb7c-4ee7-e80a-397b08769213"
      },
      "execution_count": 107,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array(['scalp', 'ear', 'face', 'back', 'trunk', 'chest',\n",
              "       'upper extremity', 'abdomen', 'unknown', 'lower extremity',\n",
              "       'genital', 'neck', 'hand', 'foot', 'acral'], dtype=object)"
            ]
          },
          "metadata": {},
          "execution_count": 107
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Mapping proposal :\n",
        "anterior torso →  abdomen\n",
        "\n",
        "upper extremity → upper extremity\n",
        "\n",
        "posterior torso → back\n",
        "\n",
        "lower extremity → lower extremity\n",
        "\n",
        "lateral torso → trunk\n",
        "\n",
        "head/neck →  face\n",
        "\n",
        "oral/genital → genital\n",
        "\n",
        "palms/soles →  acral\n",
        "\n",
        "nan (Not a Number, which represents missing data) → mode value"
      ],
      "metadata": {
        "id": "WA_KonSGXXRr"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "\n",
        "# Determine the most frequent value in meta['localization']\n",
        "most_frequent = pd.Series(meta['localization']).value_counts().idxmax()\n",
        "\n",
        "# Create a mapping dictionary\n",
        "# This is an example, adjust it according to your actual data\n",
        "mapping = {\n",
        "    'anterior torso': 'abdomen',\n",
        "\n",
        "    'upper extremity': 'upper extremity',\n",
        "\n",
        "    'posterior torso': 'back',\n",
        "\n",
        "    'lower extremity': 'lower extremity',\n",
        "\n",
        "    'lateral torso': 'trunk',\n",
        "    'head/neck': 'face',\n",
        "    'oral/genital': 'genital',\n",
        "\n",
        "    'palms/soles': 'acral'}\n",
        "\n",
        "# Replace NaN values in new_data['localization'] with the most frequent value\n",
        "new_data['localization'] = new_data['localization'].fillna(most_frequent)\n",
        "\n",
        "# Apply the mapping\n",
        "new_data['localization'] = new_data['localization'].map(mapping)\n",
        "\n",
        "# If there are any unmapped values, you might want to handle them too\n",
        "# For example, replace them with 'unknown' or most frequent value\n",
        "new_data['localization'].fillna('unknown', inplace=True)\n"
      ],
      "metadata": {
        "id": "0qBNoEyKXg0a"
      },
      "execution_count": 108,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "new_data[:3]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 143
        },
        "id": "U4nJRugR7yWN",
        "outputId": "8e78c82b-9dda-4b06-a4fd-36b3df9e06e9"
      },
      "execution_count": 149,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       image_id   age     localization   dx     sex dx_type   lesion_id  \\\n",
              "0  ISIC_0079358  35.0          abdomen   nv  female   histo  IL_3989348   \n",
              "1  ISIC_0086914  55.0  upper extremity  bcc    male   histo  IL_9767756   \n",
              "2  ISIC_0088904  50.0          unknown  bcc  female   histo  IL_8711401   \n",
              "\n",
              "                                                path  \\\n",
              "0  /content/drive/My Drive/ISIC-images/ISIC_00793...   \n",
              "1  /content/drive/My Drive/ISIC-images/ISIC_00869...   \n",
              "2  /content/drive/My Drive/ISIC-images/ISIC_00889...   \n",
              "\n",
              "                                               image  dx_code  \n",
              "0  [[[0.015686275, 0.007843138, 0.011764706], [0....      0.0  \n",
              "1  [[[0.38039216, 0.25882354, 0.29803923], [0.384...      3.0  \n",
              "2  [[[0.20392157, 0.21960784, 0.26666668], [0.325...      3.0  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-f719d1ac-10f5-44e0-a666-5c79d4a3e380\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>image_id</th>\n",
              "      <th>age</th>\n",
              "      <th>localization</th>\n",
              "      <th>dx</th>\n",
              "      <th>sex</th>\n",
              "      <th>dx_type</th>\n",
              "      <th>lesion_id</th>\n",
              "      <th>path</th>\n",
              "      <th>image</th>\n",
              "      <th>dx_code</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>ISIC_0079358</td>\n",
              "      <td>35.0</td>\n",
              "      <td>abdomen</td>\n",
              "      <td>nv</td>\n",
              "      <td>female</td>\n",
              "      <td>histo</td>\n",
              "      <td>IL_3989348</td>\n",
              "      <td>/content/drive/My Drive/ISIC-images/ISIC_00793...</td>\n",
              "      <td>[[[0.015686275, 0.007843138, 0.011764706], [0....</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>ISIC_0086914</td>\n",
              "      <td>55.0</td>\n",
              "      <td>upper extremity</td>\n",
              "      <td>bcc</td>\n",
              "      <td>male</td>\n",
              "      <td>histo</td>\n",
              "      <td>IL_9767756</td>\n",
              "      <td>/content/drive/My Drive/ISIC-images/ISIC_00869...</td>\n",
              "      <td>[[[0.38039216, 0.25882354, 0.29803923], [0.384...</td>\n",
              "      <td>3.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>ISIC_0088904</td>\n",
              "      <td>50.0</td>\n",
              "      <td>unknown</td>\n",
              "      <td>bcc</td>\n",
              "      <td>female</td>\n",
              "      <td>histo</td>\n",
              "      <td>IL_8711401</td>\n",
              "      <td>/content/drive/My Drive/ISIC-images/ISIC_00889...</td>\n",
              "      <td>[[[0.20392157, 0.21960784, 0.26666668], [0.325...</td>\n",
              "      <td>3.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f719d1ac-10f5-44e0-a666-5c79d4a3e380')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-f719d1ac-10f5-44e0-a666-5c79d4a3e380 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-f719d1ac-10f5-44e0-a666-5c79d4a3e380');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-b90ba6ce-fbec-46bc-8a6a-a6be8027e009\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-b90ba6ce-fbec-46bc-8a6a-a6be8027e009')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-b90ba6ce-fbec-46bc-8a6a-a6be8027e009 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 149
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "meta[:3]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 143
        },
        "id": "SCtgcEPA71O-",
        "outputId": "86d1a69b-ccbf-432b-cdd4-4b782e919bcd"
      },
      "execution_count": 150,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     lesion_id      image_id   dx dx_type   age   sex localization  \\\n",
              "0  HAM_0000118  ISIC_0027419  bkl   histo  80.0  male        scalp   \n",
              "1  HAM_0000118  ISIC_0025030  bkl   histo  80.0  male        scalp   \n",
              "2  HAM_0002730  ISIC_0026769  bkl   histo  80.0  male        scalp   \n",
              "\n",
              "                                               path  dx_code  \\\n",
              "0  /content/HAM10000_images_part_1/ISIC_0027419.jpg        2   \n",
              "1  /content/HAM10000_images_part_1/ISIC_0025030.jpg        2   \n",
              "2  /content/HAM10000_images_part_1/ISIC_0026769.jpg        2   \n",
              "\n",
              "                                               image  \n",
              "0  [[[0.74509805, 0.6, 0.7607843], [0.7529412, 0....  \n",
              "1  [[[0.09019608, 0.050980393, 0.08627451], [0.09...  \n",
              "2  [[[0.7254902, 0.49803922, 0.5372549], [0.74117...  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-0a157e2e-04f2-4e2f-be61-0542c65c4ed2\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>lesion_id</th>\n",
              "      <th>image_id</th>\n",
              "      <th>dx</th>\n",
              "      <th>dx_type</th>\n",
              "      <th>age</th>\n",
              "      <th>sex</th>\n",
              "      <th>localization</th>\n",
              "      <th>path</th>\n",
              "      <th>dx_code</th>\n",
              "      <th>image</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>HAM_0000118</td>\n",
              "      <td>ISIC_0027419</td>\n",
              "      <td>bkl</td>\n",
              "      <td>histo</td>\n",
              "      <td>80.0</td>\n",
              "      <td>male</td>\n",
              "      <td>scalp</td>\n",
              "      <td>/content/HAM10000_images_part_1/ISIC_0027419.jpg</td>\n",
              "      <td>2</td>\n",
              "      <td>[[[0.74509805, 0.6, 0.7607843], [0.7529412, 0....</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>HAM_0000118</td>\n",
              "      <td>ISIC_0025030</td>\n",
              "      <td>bkl</td>\n",
              "      <td>histo</td>\n",
              "      <td>80.0</td>\n",
              "      <td>male</td>\n",
              "      <td>scalp</td>\n",
              "      <td>/content/HAM10000_images_part_1/ISIC_0025030.jpg</td>\n",
              "      <td>2</td>\n",
              "      <td>[[[0.09019608, 0.050980393, 0.08627451], [0.09...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>HAM_0002730</td>\n",
              "      <td>ISIC_0026769</td>\n",
              "      <td>bkl</td>\n",
              "      <td>histo</td>\n",
              "      <td>80.0</td>\n",
              "      <td>male</td>\n",
              "      <td>scalp</td>\n",
              "      <td>/content/HAM10000_images_part_1/ISIC_0026769.jpg</td>\n",
              "      <td>2</td>\n",
              "      <td>[[[0.7254902, 0.49803922, 0.5372549], [0.74117...</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-0a157e2e-04f2-4e2f-be61-0542c65c4ed2')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-0a157e2e-04f2-4e2f-be61-0542c65c4ed2 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-0a157e2e-04f2-4e2f-be61-0542c65c4ed2');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-5d4a5703-c581-49e2-bf29-bea0519270c5\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-5d4a5703-c581-49e2-bf29-bea0519270c5')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-5d4a5703-c581-49e2-bf29-bea0519270c5 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 150
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "new_data['localization'].unique()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "YoQ-LAZoW8w9",
        "outputId": "ab113ca4-e2d1-44cb-e72b-1075254cdc1b"
      },
      "execution_count": 109,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array(['abdomen', 'upper extremity', 'unknown', 'back', 'lower extremity',\n",
              "       'trunk', 'face', 'genital', 'acral'], dtype=object)"
            ]
          },
          "metadata": {},
          "execution_count": 109
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "new_data.isnull().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "mtNomQ8AW8zh",
        "outputId": "790e9a35-540f-4800-ec25-22e31af76999"
      },
      "execution_count": 110,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "image_id        0\n",
              "age             0\n",
              "localization    0\n",
              "dx              0\n",
              "sex             0\n",
              "dx_type         0\n",
              "lesion_id       0\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 110
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "new_data"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "id": "vgB-rvPTW81p",
        "outputId": "7fe63073-a530-4119-efb4-1b852d2e87cf"
      },
      "execution_count": 111,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "          image_id   age     localization                    dx     sex  \\\n",
              "0     ISIC_0079358  35.0          abdomen                 nevus  female   \n",
              "1     ISIC_0086914  55.0  upper extremity  basal cell carcinoma    male   \n",
              "2     ISIC_0088904  50.0          unknown  basal cell carcinoma  female   \n",
              "3     ISIC_0094098  65.0             back              melanoma    male   \n",
              "4     ISIC_0095134  70.0          abdomen              melanoma  female   \n",
              "...            ...   ...              ...                   ...     ...   \n",
              "1611  ISIC_9989778  40.0          unknown                 nevus    male   \n",
              "1612  ISIC_9995847  75.0  upper extremity       vascular lesion  female   \n",
              "1613  ISIC_9997367  70.0             face     actinic keratosis  female   \n",
              "1614  ISIC_9998679  65.0             face  basal cell carcinoma  female   \n",
              "1615  ISIC_9999251  65.0  lower extremity     actinic keratosis  female   \n",
              "\n",
              "     dx_type   lesion_id  \n",
              "0      histo  IL_3989348  \n",
              "1      histo  IL_9767756  \n",
              "2      histo  IL_8711401  \n",
              "3      histo  IL_6961144  \n",
              "4      histo  IL_4530268  \n",
              "...      ...         ...  \n",
              "1611   histo  IL_8944708  \n",
              "1612   histo  IL_1047690  \n",
              "1613   histo  IL_1956821  \n",
              "1614   histo  IL_3341905  \n",
              "1615   histo  IL_1343671  \n",
              "\n",
              "[1616 rows x 7 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-fa9957d5-2695-4fb8-89cd-06434814bec8\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>image_id</th>\n",
              "      <th>age</th>\n",
              "      <th>localization</th>\n",
              "      <th>dx</th>\n",
              "      <th>sex</th>\n",
              "      <th>dx_type</th>\n",
              "      <th>lesion_id</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>ISIC_0079358</td>\n",
              "      <td>35.0</td>\n",
              "      <td>abdomen</td>\n",
              "      <td>nevus</td>\n",
              "      <td>female</td>\n",
              "      <td>histo</td>\n",
              "      <td>IL_3989348</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>ISIC_0086914</td>\n",
              "      <td>55.0</td>\n",
              "      <td>upper extremity</td>\n",
              "      <td>basal cell carcinoma</td>\n",
              "      <td>male</td>\n",
              "      <td>histo</td>\n",
              "      <td>IL_9767756</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>ISIC_0088904</td>\n",
              "      <td>50.0</td>\n",
              "      <td>unknown</td>\n",
              "      <td>basal cell carcinoma</td>\n",
              "      <td>female</td>\n",
              "      <td>histo</td>\n",
              "      <td>IL_8711401</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>ISIC_0094098</td>\n",
              "      <td>65.0</td>\n",
              "      <td>back</td>\n",
              "      <td>melanoma</td>\n",
              "      <td>male</td>\n",
              "      <td>histo</td>\n",
              "      <td>IL_6961144</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>ISIC_0095134</td>\n",
              "      <td>70.0</td>\n",
              "      <td>abdomen</td>\n",
              "      <td>melanoma</td>\n",
              "      <td>female</td>\n",
              "      <td>histo</td>\n",
              "      <td>IL_4530268</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1611</th>\n",
              "      <td>ISIC_9989778</td>\n",
              "      <td>40.0</td>\n",
              "      <td>unknown</td>\n",
              "      <td>nevus</td>\n",
              "      <td>male</td>\n",
              "      <td>histo</td>\n",
              "      <td>IL_8944708</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1612</th>\n",
              "      <td>ISIC_9995847</td>\n",
              "      <td>75.0</td>\n",
              "      <td>upper extremity</td>\n",
              "      <td>vascular lesion</td>\n",
              "      <td>female</td>\n",
              "      <td>histo</td>\n",
              "      <td>IL_1047690</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1613</th>\n",
              "      <td>ISIC_9997367</td>\n",
              "      <td>70.0</td>\n",
              "      <td>face</td>\n",
              "      <td>actinic keratosis</td>\n",
              "      <td>female</td>\n",
              "      <td>histo</td>\n",
              "      <td>IL_1956821</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1614</th>\n",
              "      <td>ISIC_9998679</td>\n",
              "      <td>65.0</td>\n",
              "      <td>face</td>\n",
              "      <td>basal cell carcinoma</td>\n",
              "      <td>female</td>\n",
              "      <td>histo</td>\n",
              "      <td>IL_3341905</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1615</th>\n",
              "      <td>ISIC_9999251</td>\n",
              "      <td>65.0</td>\n",
              "      <td>lower extremity</td>\n",
              "      <td>actinic keratosis</td>\n",
              "      <td>female</td>\n",
              "      <td>histo</td>\n",
              "      <td>IL_1343671</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1616 rows × 7 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-fa9957d5-2695-4fb8-89cd-06434814bec8')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-fa9957d5-2695-4fb8-89cd-06434814bec8 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-fa9957d5-2695-4fb8-89cd-06434814bec8');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-9dd25011-4417-498c-b01b-8e3193e228a6\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-9dd25011-4417-498c-b01b-8e3193e228a6')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-9dd25011-4417-498c-b01b-8e3193e228a6 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_184c0ef4-5822-4778-bbbc-d1584a9bb3fb\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('new_data')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_184c0ef4-5822-4778-bbbc-d1584a9bb3fb button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('new_data');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 111
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "##change dx to the same dx to meta data :\n",
        "new_data['dx'].unique()\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "pWO4iOALapbk",
        "outputId": "b91c1d25-96a6-4803-c0c4-9488ec955129"
      },
      "execution_count": 112,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array(['nevus', 'basal cell carcinoma', 'melanoma', 'vascular lesion',\n",
              "       'seborrheic keratosis', 'actinic keratosis',\n",
              "       'squamous cell carcinoma', 'dermatofibroma', 'solar lentigo',\n",
              "       'lichenoid keratosis'], dtype=object)"
            ]
          },
          "metadata": {},
          "execution_count": 112
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "meta['dx'].unique()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "nm7cGiL9azvt",
        "outputId": "3af5a71e-0301-45eb-b1d1-a437108a14f1"
      },
      "execution_count": 113,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array(['bkl', 'nv', 'df', 'mel', 'vasc', 'bcc', 'akiec'], dtype=object)"
            ]
          },
          "metadata": {},
          "execution_count": 113
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "dx mapping proposal:\n",
        "\n",
        "nevus → nv (Nevus)\n",
        "\n",
        "basal cell carcinoma → bcc (Basal Cell Carcinoma)\n",
        "\n",
        "melanoma → mel (Melanoma)\n",
        "\n",
        "vascular lesion → vasc (Vascular lesions)\n",
        "\n",
        "seborrheic keratosis → bkl (Benign keratosis-like lesions, which include seborrheic keratosis)\n",
        "\n",
        "actinic keratosis → akiec (Actinic Keratoses and Intraepi\n",
        "\n",
        "dermatofibroma → df (Dermatofibroma)\n"
      ],
      "metadata": {
        "id": "DCHlaiHfbgBz"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "\n",
        "\n",
        "# Mapping dictionary\n",
        "mapping = {\n",
        "    'nevus': 'nv',\n",
        "    'basal cell carcinoma': 'bcc',\n",
        "    'melanoma': 'mel',\n",
        "    'vascular lesion': 'vasc',\n",
        "    'seborrheic keratosis': 'bkl',\n",
        "    'actinic keratosis': 'akiec',\n",
        "    'dermatofibroma': 'df'\n",
        "}\n",
        "\n",
        "# Apply the mapping\n",
        "new_data['dx'] = new_data['dx'].map(mapping)\n"
      ],
      "metadata": {
        "id": "FaJRIrDYbfBw"
      },
      "execution_count": 114,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "## MAP images path to this new_data df.\n",
        "base_skin_dir = '/content/drive/My Drive/ISIC-images/'\n"
      ],
      "metadata": {
        "id": "L1VCMYiTdCAc"
      },
      "execution_count": 116,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import os\n",
        "import glob\n",
        "\n",
        "# Set the base directory to the path of the folder containing the images\n",
        "\n",
        "# Create a dictionary mapping image IDs to their file paths\n",
        "imageid_path_dict = {\n",
        "    os.path.splitext(os.path.basename(x))[0]: x\n",
        "    for x in glob.glob(os.path.join(base_skin_dir, '*.JPG'))  # Adjusted to '*.JPG' to match the file extension\n",
        "}\n",
        "\n",
        "# Assuming new_data is your DataFrame and it has a column 'image_id'\n",
        "# Make sure the image_id is in the correct case to match the filenames\n",
        "new_data['image_id'] = new_data['image_id'].str.upper()  # Convert to upper case to match the filenames\n",
        "\n",
        "# Map the image paths to your DataFrame\n",
        "new_data['path'] = new_data['image_id'].map(imageid_path_dict.get)\n"
      ],
      "metadata": {
        "id": "WiwRZq9fdCCw"
      },
      "execution_count": 117,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from tqdm import tqdm\n",
        "import numpy as np\n",
        "from PIL import Image\n",
        "\n",
        "image_paths = list(new_data['path'])\n",
        "new_data['image'] = [np.asarray(Image.open(path).resize((100, 75)), dtype=np.float32) / 255.0 for path in tqdm(image_paths)]\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "arLxj7pUdCFH",
        "outputId": "c81ad326-c08a-4f26-afb9-75bc9c9153c2"
      },
      "execution_count": 118,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 1616/1616 [02:03<00:00, 13.06it/s]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "## encode dx\n",
        "\n",
        "#Lesion Dictionary categorical codes\n",
        "lesion_code_dict = {\n",
        "    'nv': 0,\n",
        "    'mel': 1,\n",
        "    'bkl': 2,\n",
        "    'bcc': 3,\n",
        "    'akiec': 4,\n",
        "    'vasc': 5,\n",
        "    'df': 6}\n",
        "\n",
        "new_data['dx_code'] = new_data['dx'].map(lesion_code_dict.get)\n"
      ],
      "metadata": {
        "id": "68KkVAZnlnED"
      },
      "execution_count": 119,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "new_data = new_data.dropna(subset=['dx_code'])\n"
      ],
      "metadata": {
        "id": "QVbdi66n3Sw0"
      },
      "execution_count": 129,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Meta data vs New_Data"
      ],
      "metadata": {
        "id": "I4vi877f5LNI"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "### TODO: So the input data here does not match input categorical data (,20) --> check encoded_test\n",
        "### Here, I just copy code from up there so you can change it.\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "from keras.utils import to_categorical\n",
        "\n",
        "\n",
        "# Assuming you have the images and labels\n",
        "X_test_image = new_data['image']\n",
        "y_test = to_categorical(new_data['dx_code'])\n",
        "\n",
        "# Convert Pandas Series to NumPy arrays\n",
        "X_test_image = np.array(X_test_image.tolist())\n",
        "\n",
        "# Reshape image data in 3 dimensions (height = 75, width = 100, channel = 3)\n",
        "X_test_image = X_test_image.reshape(X_test_image.shape[0], 75, 100, 3)\n",
        "\n",
        "# Categorical data for test\n",
        "categorical_data_test = new_data[['age', 'dx_type', \"localization\"]].copy()\n",
        "\n",
        "# Define the columns you want to scale\n",
        "columns_to_scale = ['age']\n",
        "\n",
        "# Create a StandardScaler object\n",
        "scaler = StandardScaler()\n",
        "\n",
        "# Fit and transform the 'age' column for testing data\n",
        "# First, fit the scaler on your training data or the complete dataset\n",
        "# For demonstration, assuming 'age' column from new_data is used for fitting\n",
        "scaler.fit(new_data[['age']])\n",
        "\n",
        "# Now, transform the 'age' column for testing data\n",
        "categorical_data_test['age'] = scaler.transform(categorical_data_test[['age']])\n",
        "\n",
        "# List of columns to one-hot encode\n",
        "columns_to_encode = ['dx_type', 'localization']\n",
        "\n",
        "# Perform one-hot encoding using get_dummies\n",
        "encoded_test = pd.get_dummies(categorical_data_test, columns=columns_to_encode)\n",
        "\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "M9th8Q5ck6XG"
      },
      "execution_count": 130,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "encoded_test.shape"
      ],
      "metadata": {
        "id": "bpVhSq8kqvtG"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Number of columns to add\n",
        "columns_to_add = 20 - encoded_test.shape[1]\n",
        "\n",
        "# Add dummy columns filled with zeros\n",
        "for i in range(columns_to_add):\n",
        "    encoded_test[f'dummy_{i}'] = 0\n"
      ],
      "metadata": {
        "id": "-77vetoy6n8w"
      },
      "execution_count": 131,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "encoded_test"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 461
        },
        "id": "tSS0nrGJ9zBY",
        "outputId": "4aebf82d-67ab-4cfd-ee77-9c51c1476df6"
      },
      "execution_count": 151,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "           age  dx_type_consensus  dx_type_histo  localization_abdomen  \\\n",
              "0    -1.229638                  0              1                     1   \n",
              "1    -0.154833                  0              1                     0   \n",
              "2    -0.423534                  0              1                     0   \n",
              "3     0.382570                  0              1                     0   \n",
              "4     0.651271                  0              1                     1   \n",
              "...        ...                ...            ...                   ...   \n",
              "1611 -0.960937                  0              1                     0   \n",
              "1612  0.919972                  0              1                     0   \n",
              "1613  0.651271                  0              1                     0   \n",
              "1614  0.382570                  0              1                     0   \n",
              "1615  0.382570                  0              1                     0   \n",
              "\n",
              "      localization_acral  localization_back  localization_face  \\\n",
              "0                      0                  0                  0   \n",
              "1                      0                  0                  0   \n",
              "2                      0                  0                  0   \n",
              "3                      0                  1                  0   \n",
              "4                      0                  0                  0   \n",
              "...                  ...                ...                ...   \n",
              "1611                   0                  0                  0   \n",
              "1612                   0                  0                  0   \n",
              "1613                   0                  0                  1   \n",
              "1614                   0                  0                  1   \n",
              "1615                   0                  0                  0   \n",
              "\n",
              "      localization_genital  localization_lower extremity  localization_trunk  \\\n",
              "0                        0                             0                   0   \n",
              "1                        0                             0                   0   \n",
              "2                        0                             0                   0   \n",
              "3                        0                             0                   0   \n",
              "4                        0                             0                   0   \n",
              "...                    ...                           ...                 ...   \n",
              "1611                     0                             0                   0   \n",
              "1612                     0                             0                   0   \n",
              "1613                     0                             0                   0   \n",
              "1614                     0                             0                   0   \n",
              "1615                     0                             1                   0   \n",
              "\n",
              "      localization_unknown  localization_upper extremity  dummy_0  dummy_1  \\\n",
              "0                        0                             0        0        0   \n",
              "1                        0                             1        0        0   \n",
              "2                        1                             0        0        0   \n",
              "3                        0                             0        0        0   \n",
              "4                        0                             0        0        0   \n",
              "...                    ...                           ...      ...      ...   \n",
              "1611                     1                             0        0        0   \n",
              "1612                     0                             1        0        0   \n",
              "1613                     0                             0        0        0   \n",
              "1614                     0                             0        0        0   \n",
              "1615                     0                             0        0        0   \n",
              "\n",
              "      dummy_2  dummy_3  dummy_4  dummy_5  dummy_6  dummy_7  \n",
              "0           0        0        0        0        0        0  \n",
              "1           0        0        0        0        0        0  \n",
              "2           0        0        0        0        0        0  \n",
              "3           0        0        0        0        0        0  \n",
              "4           0        0        0        0        0        0  \n",
              "...       ...      ...      ...      ...      ...      ...  \n",
              "1611        0        0        0        0        0        0  \n",
              "1612        0        0        0        0        0        0  \n",
              "1613        0        0        0        0        0        0  \n",
              "1614        0        0        0        0        0        0  \n",
              "1615        0        0        0        0        0        0  \n",
              "\n",
              "[1438 rows x 20 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-04172fd3-6445-4b5d-8d08-e85791d11476\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>age</th>\n",
              "      <th>dx_type_consensus</th>\n",
              "      <th>dx_type_histo</th>\n",
              "      <th>localization_abdomen</th>\n",
              "      <th>localization_acral</th>\n",
              "      <th>localization_back</th>\n",
              "      <th>localization_face</th>\n",
              "      <th>localization_genital</th>\n",
              "      <th>localization_lower extremity</th>\n",
              "      <th>localization_trunk</th>\n",
              "      <th>localization_unknown</th>\n",
              "      <th>localization_upper extremity</th>\n",
              "      <th>dummy_0</th>\n",
              "      <th>dummy_1</th>\n",
              "      <th>dummy_2</th>\n",
              "      <th>dummy_3</th>\n",
              "      <th>dummy_4</th>\n",
              "      <th>dummy_5</th>\n",
              "      <th>dummy_6</th>\n",
              "      <th>dummy_7</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>-1.229638</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>-0.154833</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>-0.423534</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0.382570</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0.651271</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1611</th>\n",
              "      <td>-0.960937</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1612</th>\n",
              "      <td>0.919972</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1613</th>\n",
              "      <td>0.651271</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1614</th>\n",
              "      <td>0.382570</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1615</th>\n",
              "      <td>0.382570</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1438 rows × 20 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-04172fd3-6445-4b5d-8d08-e85791d11476')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-04172fd3-6445-4b5d-8d08-e85791d11476 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-04172fd3-6445-4b5d-8d08-e85791d11476');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-4ca2b41c-a38e-450c-8200-a89873502ae1\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-4ca2b41c-a38e-450c-8200-a89873502ae1')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-4ca2b41c-a38e-450c-8200-a89873502ae1 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_000cb0c8-4319-4ce2-917b-ef363962e0b9\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('encoded_test')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_000cb0c8-4319-4ce2-917b-ef363962e0b9 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('encoded_test');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 151
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "encoded_test.shape"
      ],
      "metadata": {
        "id": "MJzeWCHq1ulM"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "X_test_image.shape"
      ],
      "metadata": {
        "id": "Tj5m2oMM109n"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "y_test.shape"
      ],
      "metadata": {
        "id": "oLQACbsG19FU"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "Y_pred_classes.shape --"
      ],
      "metadata": {
        "id": "CufcT6VI1_LK"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "### TODO: Predict with Dense\n",
        "\n",
        "from sklearn.metrics import confusion_matrix, classification_report\n",
        "import plotly.graph_objs as go\n",
        "classes = range(7)\n",
        "\n",
        "Y_pred = model_dense.predict([X_test_image, encoded_test])\n",
        "Y_pred_classes = np.argmax(Y_pred, axis=1)\n",
        "Y_true = np.argmax(y_test, axis=1)\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "SXd_1gtzdCHO",
        "outputId": "82596e9e-68f5-4d2d-bd0b-50317494b3a0"
      },
      "execution_count": 133,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "45/45 [==============================] - 2s 47ms/step\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Compute the confusion matrix\n",
        "confusion_mtx = confusion_matrix(y_test, Y_pred_classes)\n",
        "\n",
        "# Plot the confusion matrix with the new colorscale\n",
        "plot_confusion_matrix(confusion_mtx, classes=classes, normalize=False)\n",
        "\n",
        "report = classification_report(y_test, Y_pred_classes)\n",
        "print(f\"Classification Report for <<DenseNet201>> with Multi_modal: \")\n",
        "print(report)\n"
      ],
      "metadata": {
        "id": "pxi9tosi3_iJ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "from sklearn.metrics import confusion_matrix, classification_report\n",
        "import numpy as np\n",
        "import plotly.figure_factory as ff\n",
        "\n",
        "classes = range(7)  # Replace 7 with the actual number of classes\n",
        "\n",
        "# Calculate the confusion matrix\n",
        "cm = confusion_matrix(Y_true, Y_pred_classes)\n",
        "\n",
        "# Plotting Confusion Matrix\n",
        "fig = ff.create_annotated_heatmap(cm, x=list(classes), y=list(classes), colorscale='Blues')\n",
        "fig.update_layout(title='Confusion Matrix', xaxis_title='Predicted Label', yaxis_title='True Label')\n",
        "\n",
        "# Display the figure (use fig.show() in your local environment)\n",
        "fig.show()\n",
        "\n",
        "# Display Classification Report\n",
        "print(classification_report(Y_true, Y_pred_classes))\n"
      ],
      "metadata": {
        "id": "uH7XLq6cdCMM",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 785
        },
        "outputId": "dfceba9f-90bb-4c55-98d3-273f4851aad4"
      },
      "execution_count": 148,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "<html>\n",
              "<head><meta charset=\"utf-8\" /></head>\n",
              "<body>\n",
              "    <div>            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_SVG\"></script><script type=\"text/javascript\">if (window.MathJax && window.MathJax.Hub && window.MathJax.Hub.Config) {window.MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}</script>                <script type=\"text/javascript\">window.PlotlyConfig = {MathJaxConfig: 'local'};</script>\n",
              "        <script charset=\"utf-8\" src=\"https://cdn.plot.ly/plotly-2.24.1.min.js\"></script>                <div id=\"661b9b5d-fb27-4c5b-b79f-afb96d2f2b20\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>            <script type=\"text/javascript\">                                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"661b9b5d-fb27-4c5b-b79f-afb96d2f2b20\")) {                    Plotly.newPlot(                        \"661b9b5d-fb27-4c5b-b79f-afb96d2f2b20\",                        [{\"colorscale\":[[0.0,\"rgb(247,251,255)\"],[0.125,\"rgb(222,235,247)\"],[0.25,\"rgb(198,219,239)\"],[0.375,\"rgb(158,202,225)\"],[0.5,\"rgb(107,174,214)\"],[0.625,\"rgb(66,146,198)\"],[0.75,\"rgb(33,113,181)\"],[0.875,\"rgb(8,81,156)\"],[1.0,\"rgb(8,48,107)\"]],\"reversescale\":false,\"showscale\":false,\"x\":[0,1,2,3,4,5,6],\"y\":[0,1,2,3,4,5,6],\"z\":[[565,2,31,0,0,0,4],[133,16,55,0,0,13,36],[43,1,21,0,0,0,3],[101,3,104,15,4,14,99],[15,0,26,0,0,3,19],[30,0,7,1,0,6,7],[51,0,6,1,0,0,3]],\"type\":\"heatmap\"}],                        {\"annotations\":[{\"font\":{\"color\":\"#FFFFFF\"},\"showarrow\":false,\"text\":\"565\",\"x\":0,\"xref\":\"x\",\"y\":0,\"yref\":\"y\"},{\"font\":{\"color\":\"#000000\"},\"showarrow\":false,\"text\":\"2\",\"x\":1,\"xref\":\"x\",\"y\":0,\"yref\":\"y\"},{\"font\":{\"color\":\"#000000\"},\"showarrow\":false,\"text\":\"31\",\"x\":2,\"xref\":\"x\",\"y\":0,\"yref\":\"y\"},{\"font\":{\"color\":\"#000000\"},\"showarrow\":false,\"text\":\"0\",\"x\":3,\"xref\":\"x\",\"y\":0,\"yref\":\"y\"},{\"font\":{\"color\":\"#000000\"},\"showarrow\":false,\"text\":\"0\",\"x\":4,\"xref\":\"x\",\"y\":0,\"yref\":\"y\"},{\"font\":{\"color\":\"#000000\"},\"showarrow\":false,\"text\":\"0\",\"x\":5,\"xref\":\"x\",\"y\":0,\"yref\":\"y\"},{\"font\":{\"color\":\"#000000\"},\"showarrow\":false,\"text\":\"4\",\"x\":6,\"xref\":\"x\",\"y\":0,\"yref\":\"y\"},{\"font\":{\"color\":\"#000000\"},\"showarrow\":false,\"text\":\"133\",\"x\":0,\"xref\":\"x\",\"y\":1,\"yref\":\"y\"},{\"font\":{\"color\":\"#000000\"},\"showarrow\":false,\"text\":\"16\",\"x\":1,\"xref\":\"x\",\"y\":1,\"yref\":\"y\"},{\"font\":{\"color\":\"#000000\"},\"showarrow\":false,\"text\":\"55\",\"x\":2,\"xref\":\"x\",\"y\":1,\"yref\":\"y\"},{\"font\":{\"color\":\"#000000\"},\"showarrow\":false,\"text\":\"0\",\"x\":3,\"xref\":\"x\",\"y\":1,\"yref\":\"y\"},{\"font\":{\"color\":\"#000000\"},\"showarrow\":false,\"text\":\"0\",\"x\":4,\"xref\":\"x\",\"y\":1,\"yref\":\"y\"},{\"font\":{\"color\":\"#000000\"},\"showarrow\":false,\"text\":\"13\",\"x\":5,\"xref\":\"x\",\"y\":1,\"yref\":\"y\"},{\"font\":{\"color\":\"#000000\"},\"showarrow\":false,\"text\":\"36\",\"x\":6,\"xref\":\"x\",\"y\":1,\"yref\":\"y\"},{\"font\":{\"color\":\"#000000\"},\"showarrow\":false,\"text\":\"43\",\"x\":0,\"xref\":\"x\",\"y\":2,\"yref\":\"y\"},{\"font\":{\"color\":\"#000000\"},\"showarrow\":false,\"text\":\"1\",\"x\":1,\"xref\":\"x\",\"y\":2,\"yref\":\"y\"},{\"font\":{\"color\":\"#000000\"},\"showarrow\":false,\"text\":\"21\",\"x\":2,\"xref\":\"x\",\"y\":2,\"yref\":\"y\"},{\"font\":{\"color\":\"#000000\"},\"showarrow\":false,\"text\":\"0\",\"x\":3,\"xref\":\"x\",\"y\":2,\"yref\":\"y\"},{\"font\":{\"color\":\"#000000\"},\"showarrow\":false,\"text\":\"0\",\"x\":4,\"xref\":\"x\",\"y\":2,\"yref\":\"y\"},{\"font\":{\"color\":\"#000000\"},\"showarrow\":false,\"text\":\"0\",\"x\":5,\"xref\":\"x\",\"y\":2,\"yref\":\"y\"},{\"font\":{\"color\":\"#000000\"},\"showarrow\":false,\"text\":\"3\",\"x\":6,\"xref\":\"x\",\"y\":2,\"yref\":\"y\"},{\"font\":{\"color\":\"#000000\"},\"showarrow\":false,\"text\":\"101\",\"x\":0,\"xref\":\"x\",\"y\":3,\"yref\":\"y\"},{\"font\":{\"color\":\"#000000\"},\"showarrow\":false,\"text\":\"3\",\"x\":1,\"xref\":\"x\",\"y\":3,\"yref\":\"y\"},{\"font\":{\"color\":\"#000000\"},\"showarrow\":false,\"text\":\"104\",\"x\":2,\"xref\":\"x\",\"y\":3,\"yref\":\"y\"},{\"font\":{\"color\":\"#000000\"},\"showarrow\":false,\"text\":\"15\",\"x\":3,\"xref\":\"x\",\"y\":3,\"yref\":\"y\"},{\"font\":{\"color\":\"#000000\"},\"showarrow\":false,\"text\":\"4\",\"x\":4,\"xref\":\"x\",\"y\":3,\"yref\":\"y\"},{\"font\":{\"color\":\"#000000\"},\"showarrow\":false,\"text\":\"14\",\"x\":5,\"xref\":\"x\",\"y\":3,\"yref\":\"y\"},{\"font\":{\"color\":\"#000000\"},\"showarrow\":false,\"text\":\"99\",\"x\":6,\"xref\":\"x\",\"y\":3,\"yref\":\"y\"},{\"font\":{\"color\":\"#000000\"},\"showarrow\":false,\"text\":\"15\",\"x\":0,\"xref\":\"x\",\"y\":4,\"yref\":\"y\"},{\"font\":{\"color\":\"#000000\"},\"showarrow\":false,\"text\":\"0\",\"x\":1,\"xref\":\"x\",\"y\":4,\"yref\":\"y\"},{\"font\":{\"color\":\"#000000\"},\"showarrow\":false,\"text\":\"26\",\"x\":2,\"xref\":\"x\",\"y\":4,\"yref\":\"y\"},{\"font\":{\"color\":\"#000000\"},\"showarrow\":false,\"text\":\"0\",\"x\":3,\"xref\":\"x\",\"y\":4,\"yref\":\"y\"},{\"font\":{\"color\":\"#000000\"},\"showarrow\":false,\"text\":\"0\",\"x\":4,\"xref\":\"x\",\"y\":4,\"yref\":\"y\"},{\"font\":{\"color\":\"#000000\"},\"showarrow\":false,\"text\":\"3\",\"x\":5,\"xref\":\"x\",\"y\":4,\"yref\":\"y\"},{\"font\":{\"color\":\"#000000\"},\"showarrow\":false,\"text\":\"19\",\"x\":6,\"xref\":\"x\",\"y\":4,\"yref\":\"y\"},{\"font\":{\"color\":\"#000000\"},\"showarrow\":false,\"text\":\"30\",\"x\":0,\"xref\":\"x\",\"y\":5,\"yref\":\"y\"},{\"font\":{\"color\":\"#000000\"},\"showarrow\":false,\"text\":\"0\",\"x\":1,\"xref\":\"x\",\"y\":5,\"yref\":\"y\"},{\"font\":{\"color\":\"#000000\"},\"showarrow\":false,\"text\":\"7\",\"x\":2,\"xref\":\"x\",\"y\":5,\"yref\":\"y\"},{\"font\":{\"color\":\"#000000\"},\"showarrow\":false,\"text\":\"1\",\"x\":3,\"xref\":\"x\",\"y\":5,\"yref\":\"y\"},{\"font\":{\"color\":\"#000000\"},\"showarrow\":false,\"text\":\"0\",\"x\":4,\"xref\":\"x\",\"y\":5,\"yref\":\"y\"},{\"font\":{\"color\":\"#000000\"},\"showarrow\":false,\"text\":\"6\",\"x\":5,\"xref\":\"x\",\"y\":5,\"yref\":\"y\"},{\"font\":{\"color\":\"#000000\"},\"showarrow\":false,\"text\":\"7\",\"x\":6,\"xref\":\"x\",\"y\":5,\"yref\":\"y\"},{\"font\":{\"color\":\"#000000\"},\"showarrow\":false,\"text\":\"51\",\"x\":0,\"xref\":\"x\",\"y\":6,\"yref\":\"y\"},{\"font\":{\"color\":\"#000000\"},\"showarrow\":false,\"text\":\"0\",\"x\":1,\"xref\":\"x\",\"y\":6,\"yref\":\"y\"},{\"font\":{\"color\":\"#000000\"},\"showarrow\":false,\"text\":\"6\",\"x\":2,\"xref\":\"x\",\"y\":6,\"yref\":\"y\"},{\"font\":{\"color\":\"#000000\"},\"showarrow\":false,\"text\":\"1\",\"x\":3,\"xref\":\"x\",\"y\":6,\"yref\":\"y\"},{\"font\":{\"color\":\"#000000\"},\"showarrow\":false,\"text\":\"0\",\"x\":4,\"xref\":\"x\",\"y\":6,\"yref\":\"y\"},{\"font\":{\"color\":\"#000000\"},\"showarrow\":false,\"text\":\"0\",\"x\":5,\"xref\":\"x\",\"y\":6,\"yref\":\"y\"},{\"font\":{\"color\":\"#000000\"},\"showarrow\":false,\"text\":\"3\",\"x\":6,\"xref\":\"x\",\"y\":6,\"yref\":\"y\"}],\"xaxis\":{\"dtick\":1,\"gridcolor\":\"rgb(0, 0, 0)\",\"side\":\"top\",\"ticks\":\"\",\"title\":{\"text\":\"Predicted Label\"}},\"yaxis\":{\"dtick\":1,\"ticks\":\"\",\"ticksuffix\":\"  \",\"title\":{\"text\":\"True Label\"}},\"template\":{\"data\":{\"histogram2dcontour\":[{\"type\":\"histogram2dcontour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"choropleth\":[{\"type\":\"choropleth\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"histogram2d\":[{\"type\":\"histogram2d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmap\":[{\"type\":\"heatmap\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmapgl\":[{\"type\":\"heatmapgl\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"contourcarpet\":[{\"type\":\"contourcarpet\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"contour\":[{\"type\":\"contour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"surface\":[{\"type\":\"surface\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"mesh3d\":[{\"type\":\"mesh3d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"scatter\":[{\"fillpattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2},\"type\":\"scatter\"}],\"parcoords\":[{\"type\":\"parcoords\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolargl\":[{\"type\":\"scatterpolargl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"scattergeo\":[{\"type\":\"scattergeo\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolar\":[{\"type\":\"scatterpolar\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"scattergl\":[{\"type\":\"scattergl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatter3d\":[{\"type\":\"scatter3d\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattermapbox\":[{\"type\":\"scattermapbox\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterternary\":[{\"type\":\"scatterternary\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattercarpet\":[{\"type\":\"scattercarpet\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"autotypenumbers\":\"strict\",\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"hovermode\":\"closest\",\"hoverlabel\":{\"align\":\"left\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"bgcolor\":\"#E5ECF6\",\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"ternary\":{\"bgcolor\":\"#E5ECF6\",\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]]},\"xaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"yaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"geo\":{\"bgcolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"subunitcolor\":\"white\",\"showland\":true,\"showlakes\":true,\"lakecolor\":\"white\"},\"title\":{\"x\":0.05},\"mapbox\":{\"style\":\"light\"}}},\"title\":{\"text\":\"Confusion Matrix\"}},                        {\"responsive\": true}                    ).then(function(){\n",
              "                            \n",
              "var gd = document.getElementById('661b9b5d-fb27-4c5b-b79f-afb96d2f2b20');\n",
              "var x = new MutationObserver(function (mutations, observer) {{\n",
              "        var display = window.getComputedStyle(gd).display;\n",
              "        if (!display || display === 'none') {{\n",
              "            console.log([gd, 'removed!']);\n",
              "            Plotly.purge(gd);\n",
              "            observer.disconnect();\n",
              "        }}\n",
              "}});\n",
              "\n",
              "// Listen for the removal of the full notebook cells\n",
              "var notebookContainer = gd.closest('#notebook-container');\n",
              "if (notebookContainer) {{\n",
              "    x.observe(notebookContainer, {childList: true});\n",
              "}}\n",
              "\n",
              "// Listen for the clearing of the current output cell\n",
              "var outputEl = gd.closest('.output');\n",
              "if (outputEl) {{\n",
              "    x.observe(outputEl, {childList: true});\n",
              "}}\n",
              "\n",
              "                        })                };                            </script>        </div>\n",
              "</body>\n",
              "</html>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.60      0.94      0.73       602\n",
            "           1       0.73      0.06      0.12       253\n",
            "           2       0.08      0.31      0.13        68\n",
            "           3       0.88      0.04      0.08       340\n",
            "           4       0.00      0.00      0.00        63\n",
            "           5       0.17      0.12      0.14        51\n",
            "           6       0.02      0.05      0.03        61\n",
            "\n",
            "    accuracy                           0.44      1438\n",
            "   macro avg       0.35      0.22      0.18      1438\n",
            "weighted avg       0.60      0.44      0.36      1438\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "###Below is Milestone 2 and Milestone 1"
      ],
      "metadata": {
        "id": "WZhYh1QC_IG6"
      },
      "execution_count": 1,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "zgOGMmDjIXb3"
      },
      "source": [
        "## Handling Null/Missing Values"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Vx66Irx4INE3"
      },
      "outputs": [],
      "source": [
        "#Inspecting null values\n",
        "df.isnull().sum()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "6HArk9plIQ2W"
      },
      "source": [
        "As we can see there are 57 null values in the age column so we will use mean imputation to replace these null values."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "g4G46MdIIepJ"
      },
      "outputs": [],
      "source": [
        "#Mean imputation of null values in age column\n",
        "df['age'].fillna(int(df['age'].mean()),inplace=True)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "9-XGKTaRIm2X"
      },
      "outputs": [],
      "source": [
        "#Now number of nulls is 0 in each column\n",
        "df.isnull().sum()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "DNXHiggmIrPM"
      },
      "outputs": [],
      "source": [
        "df[\"age\"].value_counts()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "i1cpE3yVRYfI"
      },
      "outputs": [],
      "source": [
        "df['dx'].value_counts()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "1DbOjx6eQ49T"
      },
      "source": [
        "There is a age with value 0 and sex with value 'unknown', therefore, we are only keeping rows where age != 0 and sex != unknown"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "C03_A-bIRkO9"
      },
      "outputs": [],
      "source": [
        "#Subsetting the data to only keep age != 0 and sex != unknown\n",
        "df_clean= df[df['age'] != 0]\n",
        "df_clean= df_clean[df_clean['sex'] != 'unknown']"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "21LF34q7R6tH"
      },
      "outputs": [],
      "source": [
        "df_clean[\"dx\"].value_counts()"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_clean['dx_code'] = pd.Categorical(df_clean['dx']).codes"
      ],
      "metadata": {
        "id": "xbfd_JoAWsEF"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "glbt3wf1WsGa"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "lJ1gz-E2SGIx"
      },
      "source": [
        "As we can see, there is a reduction in number of observations for nv, bkl, and vasc. However, the reduction for the minority class, vasc is not a lot (only 4) and for the class with the highest samples, nv is the most, and class with the 3rd highest samples nv is the second most, we believe it is fine to proceed with a subset of the data."
      ]
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "ms9Lkj9jWqSS"
      }
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "MEUG8cKuOM24"
      },
      "source": [
        "## Resizing the images"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "lH6OLNXmKy4E"
      },
      "outputs": [],
      "source": [
        "#Lesion dictionary\n",
        "lesion_type_dict = {\n",
        "    'nv': 'Melanocytic nevi',\n",
        "    'mel': 'Melanoma',\n",
        "    'bkl': 'Benign keratosis-like lesions ',\n",
        "    'bcc': 'Basal cell carcinoma',\n",
        "    'akiec': 'Actinic keratoses',\n",
        "    'vasc': 'Vascular lesions',\n",
        "    'df': 'Dermatofibroma'\n",
        "}\n",
        "\n",
        "#Lesion Dictionary categorical codes\n",
        "lesion_code_dict = {\n",
        "    'nv': 0,\n",
        "    'mel': 1,\n",
        "    'bkl': 2,\n",
        "    'bcc': 3,\n",
        "    'akiec': 4,\n",
        "    'vasc': 5,\n",
        "    'df': 6}\n",
        "import glob\n",
        "\n",
        "\n",
        "#Base dictionary\n",
        "base_skin_dir = '/content/'\n",
        "\n",
        "# Assuming you have two folders named 'HAM10000_images_part_1' and 'HAM10000_images_part_2'\n",
        "folders = ['HAM10000_images_part_1', 'HAM10000_images_part_2']\n",
        "\n",
        "# Merge images from both folders into one dictionary and find the images based on the image_id\n",
        "imageid_path_dict = {\n",
        "    os.path.splitext(os.path.basename(x))[0]: x\n",
        "    for folder in folders\n",
        "    for x in glob.glob(os.path.join(base_skin_dir, folder, '*.jpg'))\n",
        "}"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "6f7tvHXsMRfx"
      },
      "outputs": [],
      "source": [
        "#map image_id to the dictionary and store it in a new path column\n",
        "df_clean['path'] = df_clean['image_id'].map(imageid_path_dict.get)\n",
        "\n",
        "#Store the full form of a lesion in a new column, cell type\n",
        "df_clean['cell_type'] = df_clean['dx'].map(lesion_type_dict.get)\n",
        "\n",
        "#Categorically encode the different lesion types (0-6)\n",
        "df_clean['cell_type_idx'] = df_clean['dx'].map(lesion_code_dict.get)\n",
        "\n",
        "df_clean.head()"
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "8nQ6OrBVhKhA"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "12lYl5weUgNB"
      },
      "outputs": [],
      "source": [
        "#Resizing the images to 100x125 and normalizing the pixel values to between 0-1\n",
        "df_clean['image'] = df_clean['path'].map(lambda x: np.asarray(Image.open(x).resize((100,75))))\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "bwkZjrbIldxY"
      },
      "source": [
        "## Fixing Data Imbalance"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Wimqc0u_Z32s"
      },
      "source": [
        "From the distribution above, we can see that the dataset is highly imbalanced. Did not use random oversampling because then then there will be multiple duplicates of the minority class images, which may cause our model to overfit."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "tOoAhlyva2VG"
      },
      "outputs": [],
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "import tensorflow as tf\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "from imblearn.over_sampling import SMOTE\n",
        "from collections import Counter"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Code continuation"
      ],
      "metadata": {
        "id": "OM9M9R2SSwBh"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from keras.utils import to_categorical\n",
        "\n",
        "X = df_clean['image']\n",
        "y = to_categorical(df_clean['dx_code'])"
      ],
      "metadata": {
        "id": "ed87gG9JSwPj"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "\n",
        "# Split the data into training and testing sets\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=42)"
      ],
      "metadata": {
        "id": "VRyNooWBW8pj"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Convert Pandas Series to NumPy arrays\n",
        "X_train = np.array(X_train.tolist())\n",
        "X_test = np.array(X_test.tolist())\n",
        "\n",
        "# Reshape image data in 3 dimensions (height = 75, width = 100, channel = 3)\n",
        "X_train = X_train.reshape(X_train.shape[0], 75, 100, 3)\n",
        "X_test = X_test.reshape(X_test.shape[0], 75, 100, 3)"
      ],
      "metadata": {
        "id": "btY6OPynW8sJ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Function to plot the confusion matrix with Plotly\n",
        "def plot_confusion_matrix(cm, classes, normalize=False):\n",
        "    if normalize:\n",
        "        cm = cm.astype('float') / cm.sum(axis=1)[:, np.newaxis]\n",
        "        colorscale = 'Plasma'\n",
        "    else:\n",
        "        colorscale = 'Magma_r'  # Reversed 'Magma' colorscale for non-normalized matrix\n",
        "\n",
        "    annotations = []\n",
        "    for i in range(len(classes)):\n",
        "        for j in range(len(classes)):\n",
        "            annotations.append(\n",
        "                {\n",
        "                    'x': classes[j],\n",
        "                    'y': classes[i],\n",
        "                    'text': str(cm[i, j]),\n",
        "                    'showarrow': False,\n",
        "                    'font': {'color': 'red' if cm[i, j] > 0.5 else 'black'}\n",
        "                }\n",
        "            )\n",
        "\n",
        "    fig = go.Figure(data=go.Heatmap(\n",
        "        z=cm,\n",
        "        x=list(classes),\n",
        "        y=list(classes),\n",
        "        colorscale=colorscale,\n",
        "        colorbar=dict(title='Normalized' if normalize else 'Count'),\n",
        "        showscale=True,\n",
        "        hoverinfo='z'\n",
        "    ))\n",
        "\n",
        "    fig.update_layout(\n",
        "        title='Confusion Matrix',\n",
        "        xaxis=dict(title='Predicted label'),\n",
        "        yaxis=dict(title='True label'),\n",
        "        annotations=annotations\n",
        "    )\n",
        "\n",
        "    if normalize:\n",
        "        fig.update_layout(title_text='Normalized Confusion Matrix')\n",
        "    else:\n",
        "        fig.update_layout(title_text='Confusion Matrix (Counts)')\n",
        "\n",
        "    fig.show()"
      ],
      "metadata": {
        "id": "-k0XXFZxW8yY"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from tensorflow.keras.callbacks import ReduceLROnPlateau, EarlyStopping\n",
        "\n",
        "# Set a learning rate annealer\n",
        "learning_rate_reduction = ReduceLROnPlateau(monitor='val_acc',\n",
        "                                            patience=3,\n",
        "                                            verbose=1,\n",
        "                                            factor=0.5,\n",
        "                                            min_lr=0.00001)"
      ],
      "metadata": {
        "id": "8nBLstKmW80c"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "split_proportion = 0.8\n",
        "\n",
        "# Randomly shuffle the rows of the DataFrame\n",
        "shuffled_data = df_clean.sample(frac=1, random_state=41)  # random_state for reproducibility\n",
        "\n",
        "# Calculate the number of rows for the first piece\n",
        "total_rows = shuffled_data.shape[0]\n",
        "split_size = int(total_rows * split_proportion)\n",
        "\n",
        "# Split the DataFrame into two pieces\n",
        "Train = shuffled_data.iloc[:split_size]\n",
        "Test = shuffled_data.iloc[split_size:]"
      ],
      "metadata": {
        "id": "yC_Y12wgW83E"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from keras.utils import to_categorical\n",
        "\n",
        "X_train_image = Train['image']\n",
        "y_train = to_categorical(Train['dx_code'])\n",
        "\n",
        "X_test_image = Test['image']\n",
        "y_test = to_categorical(Test['dx_code'])"
      ],
      "metadata": {
        "id": "WetivTSCXNo8"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Convert Pandas Series to NumPy arrays\n",
        "X_train_image = np.array(X_train_image.tolist())\n",
        "X_test_image = np.array(X_test_image.tolist())\n",
        "\n",
        "# Reshape image data in 3 dimensions (height = 75, width = 100, channel = 3)\n",
        "X_train_image = X_train_image.reshape(X_train_image.shape[0], 75, 100, 3)\n",
        "X_test_image = X_test_image.reshape(X_test_image.shape[0], 75, 100, 3)"
      ],
      "metadata": {
        "id": "di36g5TrXNrs"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.preprocessing import StandardScaler\n",
        "\n",
        "categorical_data_train = Train[[ 'age' ,'dx_type' ,\"localization\" ]]\n",
        "categorical_data_test = Test[[ 'age' ,'dx_type' ,\"localization\" ]]\n",
        "\n",
        "# Define the columns you want to scale\n",
        "columns_to_scale = ['age']\n",
        "\n",
        "# Create a StandardScaler object\n",
        "scaler = StandardScaler()\n",
        "\n",
        "# Reshape the column to a 2D array before fitting the scaler\n",
        "categorical_data_train[columns_to_scale] = scaler.fit_transform(categorical_data_train[columns_to_scale].values.reshape(-1, 1))\n",
        "categorical_data_test[columns_to_scale] = scaler.transform(categorical_data_test[columns_to_scale].values.reshape(-1, 1))"
      ],
      "metadata": {
        "id": "0O--5-w9XNuO"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "# List of columns to one-hot encode\n",
        "columns_to_encode = ['dx_type', 'localization']\n",
        "\n",
        "# Perform one-hot encoding using get_dummies\n",
        "encoded_train = pd.get_dummies(categorical_data_train, columns=columns_to_encode)\n",
        "encoded_test = pd.get_dummies(categorical_data_test, columns=columns_to_encode)"
      ],
      "metadata": {
        "id": "Y9On3xDAXNw5"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import tensorflow as tf\n",
        "from tensorflow.keras.applications import ResNet50\n",
        "from tensorflow.keras.layers import Dense, GlobalAveragePooling2D, BatchNormalization, Input, Concatenate\n",
        "from tensorflow.keras.models import Model\n",
        "from tensorflow.keras.optimizers import Adam\n",
        "from tensorflow.keras.callbacks import EarlyStopping\n",
        "\n",
        "\n",
        "categorical_input = Input(shape=(20,))\n",
        "\n",
        "\n",
        "# Load the pre-trained DenseNet-121 model (Same as before)\n",
        "base_model = ResNet50(weights='imagenet', include_top=False)\n",
        "\n",
        "# Freeze some layers in the base model\n",
        "num_layers_to_freeze = 95\n",
        "for layer in base_model.layers[:num_layers_to_freeze]:\n",
        "    layer.trainable = False\n",
        "\n",
        "# After GlobalAveragePooling2D layer, concatenate with the categorical input\n",
        "x = base_model.output\n",
        "x = GlobalAveragePooling2D()(x)\n",
        "x = Dense(256, activation='relu', kernel_regularizer=tf.keras.regularizers.l2(0.01))(x)\n",
        "\n",
        "# Add Custom Layers for Categorical Data\n",
        "y = Dense(64, activation='relu')(categorical_input)\n",
        "x = Concatenate()([x, y])\n",
        "\n",
        "predictions = Dense(7, activation='softmax')(x)\n",
        "\n",
        "# Create the final model with both image and categorical inputs\n",
        "model_dense = Model(inputs=[base_model.input, categorical_input], outputs=predictions)\n",
        "\n",
        "# Learning Rate Scheduler\n",
        "initial_learning_rate = 0.0005\n",
        "lr_schedule = tf.keras.optimizers.schedules.ExponentialDecay(\n",
        "    initial_learning_rate,\n",
        "    decay_steps=10000,\n",
        "    decay_rate=0.9\n",
        ")\n",
        "optimizer = Adam(learning_rate=lr_schedule, beta_1=0.9, beta_2=0.999, epsilon=1e-08, amsgrad=False)\n",
        "\n",
        "model_dense.compile(optimizer=optimizer, loss=\"categorical_crossentropy\", metrics=[\"accuracy\"])\n",
        "\n",
        "# Early Stopping\n",
        "early_stopping = EarlyStopping(monitor='val_loss', patience=15, restore_best_weights=True)"
      ],
      "metadata": {
        "id": "PuiZyUDiW85K"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "encoded_train.shape"
      ],
      "metadata": {
        "id": "MwEYTEIeaEFw"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"Shape of image training data (X_train_image):\", X_train_image.shape)\n",
        "print(\"Shape of categorical training data (encoded_train):\", encoded_train.shape)\n"
      ],
      "metadata": {
        "id": "VX3Iu51tbhVZ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "## DEBUG :\n",
        "# Take one sample from both image and categorical data\n",
        "sample_image_data = X_train_image[:1]\n",
        "sample_categorical_data = encoded_train[:1]\n",
        "\n",
        "# Pass the sample through the model\n",
        "try:\n",
        "    sample_prediction = model_dense.predict([sample_image_data, sample_categorical_data])\n",
        "\n",
        "    print(\"Sample prediction successful. Output shape:\", sample_prediction.shape)\n",
        "except Exception as e:\n",
        "    print(\"Error during sample prediction:\", e)\n"
      ],
      "metadata": {
        "id": "dSCzybj4bkvZ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "h3RtWr6jd84e"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Train the model with data augmentation and callbacks\n",
        "epochs = 20\n",
        "batch_size = 10\n",
        "history = model_dense.fit(\n",
        "    [X_train_image, encoded_train],  # Update with your actual image and categorical training data\n",
        "    y_train, epochs=epochs, batch_size=batch_size,\n",
        "    callbacks=[learning_rate_reduction , early_stopping], validation_data=([X_test_image, encoded_test], y_test)\n",
        ")\n",
        "\n",
        "# Plot the training and validation loss\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "plt.figure(figsize=(10, 5))\n",
        "plt.plot(history.history['loss'], label='Training Loss')\n",
        "plt.plot(history.history['val_loss'], label='Validation Loss')\n",
        "plt.xlabel('Epochs')\n",
        "plt.ylabel('Loss')\n",
        "plt.legend()\n",
        "plt.title('Training and Validation Loss')\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "uwhWLSUuW87h"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Plot the training and validation accuracy\n",
        "plt.figure(figsize=(10, 5))\n",
        "plt.plot(history.history['accuracy'], label='Training Accuracy')\n",
        "plt.plot(history.history['val_accuracy'], label='Validation Accuracy')\n",
        "plt.xlabel('Epochs')\n",
        "plt.ylabel('Accuracy')\n",
        "plt.legend()\n",
        "plt.title('Training and Validation Accuracy')\n",
        "plt.show()\n"
      ],
      "metadata": {
        "id": "qb8cn41uXelH"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "--"
      ],
      "metadata": {
        "id": "AYr_UTUPW894"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Defining Method\n"
      ],
      "metadata": {
        "id": "aIYDlFVuRHDi"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Function to plot the confusion matrix with Plotly\n",
        "def plot_confusion_matrix(cm, classes, normalize=False):\n",
        "    if normalize:\n",
        "        cm = cm.astype('float') / cm.sum(axis=1)[:, np.newaxis]\n",
        "        colorscale = 'Plasma'\n",
        "    else:\n",
        "        colorscale = 'Magma_r'  # Reversed 'Magma' colorscale for non-normalized matrix\n",
        "\n",
        "    annotations = []\n",
        "    for i in range(len(classes)):\n",
        "        for j in range(len(classes)):\n",
        "            annotations.append(\n",
        "                {\n",
        "                    'x': classes[j],\n",
        "                    'y': classes[i],\n",
        "                    'text': str(cm[i, j]),\n",
        "                    'showarrow': False,\n",
        "                    'font': {'color': 'red' if cm[i, j] > 0.5 else 'black'}\n",
        "                }\n",
        "            )\n",
        "\n",
        "    fig = go.Figure(data=go.Heatmap(\n",
        "        z=cm,\n",
        "        x=list(classes),\n",
        "        y=list(classes),\n",
        "        colorscale=colorscale,\n",
        "        colorbar=dict(title='Normalized' if normalize else 'Count'),\n",
        "        showscale=True,\n",
        "        hoverinfo='z'\n",
        "    ))\n",
        "\n",
        "    fig.update_layout(\n",
        "        title='Confusion Matrix',\n",
        "        xaxis=dict(title='Predicted label'),\n",
        "        yaxis=dict(title='True label'),\n",
        "        annotations=annotations\n",
        "    )\n",
        "\n",
        "    if normalize:\n",
        "        fig.update_layout(title_text='Normalized Confusion Matrix')\n",
        "    else:\n",
        "        fig.update_layout(title_text='Confusion Matrix (Counts)')\n",
        "\n",
        "    fig.show()"
      ],
      "metadata": {
        "id": "w1rhChRdRKqt"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#Adding normalization and standardization to train test split\n",
        "\n",
        "def train_test_df_normstandard(df):\n",
        "    features=df.drop(columns=['cell_type_idx'],axis=1)\n",
        "    target=df['cell_type_idx']\n",
        "\n",
        "    # Create First Train and Test sets\n",
        "    x_train_o, x_test_o, y_train_o, y_test_o = train_test_split(features, target, test_size=0.20,random_state=123)\n",
        "\n",
        "    x_train = np.asarray(x_train_o['image'].tolist())\n",
        "    x_test = np.asarray(x_test_o['image'].tolist())\n",
        "\n",
        "    #Normalization\n",
        "    x_train = x_train / 255\n",
        "    x_test = x_test / 255\n",
        "\n",
        "    #The standardization is done using the training set Mean and Std. Deviation as reference\n",
        "    x_train_mean = np.mean(x_train)\n",
        "    x_train_std = np.std(x_train)\n",
        "\n",
        "    x_train = (x_train - x_train_mean)/x_train_std\n",
        "    x_test = (x_test - x_train_mean)/x_train_std\n",
        "\n",
        "    # Perform one-hot encoding on the labels\n",
        "    y_train = to_categorical(y_train_o, num_classes = 7)\n",
        "    y_test = to_categorical(y_test_o, num_classes = 7)\n",
        "\n",
        "    #Splitting training into Train and Validatation sets\n",
        "    x_train, x_validate, y_train, y_validate = train_test_split(x_train, y_train, test_size = 0.1,random_state=123)\n",
        "\n",
        "    #Reshaping the Images into 3 channels (RGB)\n",
        "    x_train = x_train.reshape(x_train.shape[0], *(100, 125, 3))\n",
        "    x_test = x_test.reshape(x_test.shape[0], *(100, 125, 3))\n",
        "    x_validate = x_validate.reshape(x_validate.shape[0], *(100, 125, 3))\n",
        "\n",
        "    return x_train,x_validate,x_test,y_train,y_validate,y_test\n",
        "\n",
        "x_train,x_validate,x_test,y_train,y_validate,y_test = train_test_df_normstandard(df_clean)"
      ],
      "metadata": {
        "id": "s5pxRZ6HS9Aj"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "len(x_train)"
      ],
      "metadata": {
        "id": "Uh8Up715Yzmd"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "czNCf1LIWfh0"
      },
      "source": [
        "# BEST MODEL"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "'''\n",
        "from tensorflow.keras.preprocessing.image import ImageDataGenerator\n",
        "\n",
        "#Data augmentation to prevent overfitting\n",
        "datagen = ImageDataGenerator(\n",
        "        featurewise_center=False,  # set input mean to 0 over the dataset\n",
        "        samplewise_center=False,  # set each sample mean to 0\n",
        "        featurewise_std_normalization=False,  # divide inputs by std of the dataset\n",
        "        samplewise_std_normalization=False,  # divide each input by its std\n",
        "        zca_whitening=False,  # apply ZCA whitening\n",
        "        rotation_range=10,  # randomly rotate images in the range (degrees, 0 to 180)\n",
        "        zoom_range = 0.1, # Randomly zoom image\n",
        "        width_shift_range=0.12,  # randomly shift images horizontally (fraction of total width)\n",
        "        height_shift_range=0.12,  # randomly shift images vertically (fraction of total height)\n",
        "        horizontal_flip=True,  # randomly flip images\n",
        "        vertical_flip=True)  # randomly flip images\n",
        "\n",
        "datagen.fit(x_train)\n",
        "'''"
      ],
      "metadata": {
        "id": "PS8ilKzxQN7T"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "len(x_train)"
      ],
      "metadata": {
        "id": "6840mv7XY1rj"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "qooZ7iSDWh2m"
      },
      "outputs": [],
      "source": [
        "\n",
        "from tensorflow.keras.callbacks import ReduceLROnPlateau, EarlyStopping\n",
        "\n",
        "# Set a learning rate annealer\n",
        "learning_rate_reduction = ReduceLROnPlateau(monitor='val_accuracy',\n",
        "                                            patience=3,\n",
        "                                            verbose=1,\n",
        "                                            factor=0.5,\n",
        "                                            min_lr=0.00001)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "p2SaJ6V0W10I"
      },
      "outputs": [],
      "source": [
        "'''\n",
        "import tensorflow as tf\n",
        "from tensorflow.keras.applications import DenseNet201\n",
        "from tensorflow.keras.layers import Dense, GlobalAveragePooling2D, BatchNormalization\n",
        "from tensorflow.keras.models import Model\n",
        "from tensorflow.keras.optimizers import Adam\n",
        "\n",
        "# Load the pre-trained DenseNet-201 model (weights pre-trained on ImageNet)\n",
        "base_model = DenseNet201(weights='imagenet', include_top=False)\n",
        "\n",
        "# Freeze some layers in the base model\n",
        "num_layers_to_freeze = 95  # Choose the number of layers you want to freeze\n",
        "for layer in base_model.layers[:num_layers_to_freeze]:\n",
        "    layer.trainable = False\n",
        "\n",
        "# Redefining FC Layer since include_top is set to False\n",
        "x = base_model.output\n",
        "x = GlobalAveragePooling2D()(x)\n",
        "x = Dense(256, activation='relu')(x)\n",
        "predictions = Dense(7, activation='softmax')(x) #Now predicts 7 classes\n",
        "\n",
        "# Create the final model\n",
        "model_dense = Model(inputs=base_model.input, outputs=predictions)\n",
        "\n",
        "# Learning Rate Scheduler\n",
        "initial_learning_rate = 0.01\n",
        "lr_schedule = tf.keras.optimizers.schedules.ExponentialDecay(\n",
        "    initial_learning_rate,\n",
        "    decay_steps=10000,   # Adjust decay_steps\n",
        "    decay_rate=0.9       # Adjust decay_rate\n",
        ")\n",
        "optimizer = Adam(learning_rate=lr_schedule, beta_1=0.9, beta_2=0.999, epsilon=1e-08, amsgrad=False)\n",
        "\n",
        "model_dense.compile(optimizer=optimizer, loss=\"categorical_crossentropy\", metrics=[\"accuracy\"])\n",
        "\n",
        "# Early Stopping\n",
        "early_stopping = EarlyStopping(monitor='val_loss', patience=15, restore_best_weights=True)\n",
        "'''"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "76qZIH2WW4sv"
      },
      "outputs": [],
      "source": [
        "# Fit the model\n",
        "'''\n",
        "epochs = 50\n",
        "batch_size = 60\n",
        "\n",
        "history = model_dense.fit_generator(datagen.flow(x_train, y_train, batch_size=batch_size),\n",
        "                                    epochs=epochs, verbose=1, steps_per_epoch=x_train.shape[0] // batch_size,\n",
        "                                    callbacks=[learning_rate_reduction,early_stopping], validation_data=(x_validate, y_validate))\n",
        "\n",
        "\n",
        "# Plot the training and validation loss\n",
        "plt.figure(figsize=(10, 5))\n",
        "plt.plot(history.history['loss'], label='Training Loss')\n",
        "plt.plot(history.history['val_loss'], label='Validation Loss')\n",
        "plt.xlabel('Epochs')\n",
        "plt.ylabel('Loss')\n",
        "plt.legend()\n",
        "plt.title('Training and Validation Loss')\n",
        "plt.show()\n",
        "\n",
        "# Plot the training and validation accuracy\n",
        "plt.figure(figsize=(10, 5))\n",
        "plt.plot(history.history['accuracy'], label='Training Accuracy')\n",
        "plt.plot(history.history['val_accuracy'], label='Validation Accuracy')\n",
        "plt.xlabel('Epochs')\n",
        "plt.ylabel('Accuracy')\n",
        "plt.legend()\n",
        "plt.title('Training and Validation Accuracy')\n",
        "plt.show()\n",
        "'''"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "-X2kJZCxW60b"
      },
      "outputs": [],
      "source": [
        "'''\n",
        "#Printing classification report\n",
        "import plotly.graph_objects as go\n",
        "\n",
        "from sklearn.metrics import confusion_matrix, classification_report\n",
        "\n",
        "classes = range(7)\n",
        "\n",
        "# Y_true (true labels) and Y_pred_classes (predicted labels) Evaluating performance on test set\n",
        "Y_pred = model_dense.predict(x_test)\n",
        "Y_pred_classes = np.argmax(Y_pred, axis=1)\n",
        "Y_true = np.argmax(y_test, axis=1)\n",
        "\n",
        "# Compute the confusion matrix\n",
        "confusion_mtx = confusion_matrix(Y_true, Y_pred_classes)\n",
        "\n",
        "# Plot the confusion matrix with the new colorscale\n",
        "plot_confusion_matrix(confusion_mtx, classes=classes, normalize=False)\n",
        "\n",
        "report = classification_report(Y_true, Y_pred_classes)\n",
        "print(f\"Classification Report for <<DenseNet201>> with input normalization, data augmentation, batch normalization, and drop out: \")\n",
        "print(report)\n",
        "'''"
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "P_B-ir4ijQw7"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "RckXS9oDWiDS"
      },
      "source": [
        "# MULTI_MODAL"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "jE8szIzJWkSw"
      },
      "outputs": [],
      "source": [
        "# Define the proportion of the dataset to be used for training\n",
        "split_proportion = 0.8\n",
        "\n",
        "# Assuming 'df_clean' is a pandas DataFrame containing the dataset\n",
        "\n",
        "# Shuffle the rows of the DataFrame\n",
        "shuffled_data = df_clean.sample(frac=1, random_state=41)  # Set a random state for reproducibility\n",
        "\n",
        "# Calculate the number of rows for the training set\n",
        "total_rows = shuffled_data.shape[0]\n",
        "split_size = int(total_rows * split_proportion)\n",
        "\n",
        "# Split the data into training and testing sets\n",
        "Train = shuffled_data.iloc[:split_size]\n",
        "Test = shuffled_data.iloc[split_size:]\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from keras.utils import to_categorical\n",
        "\n",
        "X_train_images = Train['image']\n",
        "y_train = to_categorical(Train['dx_code'])\n",
        "\n",
        "X_test_images = Test['image']\n",
        "y_test = to_categorical(Test['dx_code'])"
      ],
      "metadata": {
        "id": "fJyQjhHlTqGe"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Convert Pandas Series to NumPy arrays\n",
        "X_train_image = np.array(X_train_images.tolist())\n",
        "X_test_image = np.array(X_test_images.tolist())\n",
        "\n",
        "# Reshape image data in 3 dimensions (height = 125, width = 100, channel = 3)  --> switch to 125, 100 as the code above.\n",
        "X_train_image = X_train_image.reshape(X_train_image.shape[0], 125, 100, 3)\n",
        "X_test_image = X_test_image.reshape(X_test_image.shape[0], 125, 100, 3)"
      ],
      "metadata": {
        "id": "gFFQPYJRROMn"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "## divide  / 255.0\n",
        "X_train_image =  X_train_image/ 255.0\n",
        "\n",
        "\n",
        "\n",
        "X_test_image = X_test_image /225.0"
      ],
      "metadata": {
        "id": "ncLJz2tG-6KO"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.preprocessing import StandardScaler\n",
        "\n",
        "categorical_data_train = Train[[ 'age' ,'dx_type' ,\"localization\" ]]\n",
        "categorical_data_test = Test[[ 'age' ,'dx_type' ,\"localization\" ]]\n",
        "\n",
        "# Define the columns you want to scale\n",
        "columns_to_scale = ['age']\n",
        "\n",
        "# Create a StandardScaler object\n",
        "scaler = StandardScaler()\n",
        "\n",
        "# Reshape the column to a 2D array before fitting the scaler\n",
        "categorical_data_train[columns_to_scale] = scaler.fit_transform(categorical_data_train[columns_to_scale].values.reshape(-1, 1))\n",
        "categorical_data_test[columns_to_scale] = scaler.transform(categorical_data_test[columns_to_scale].values.reshape(-1, 1))\n"
      ],
      "metadata": {
        "id": "YGykDsQ0Ttq4"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# List of columns to one-hot encode\n",
        "columns_to_encode = ['dx_type', 'localization']\n",
        "\n",
        "# Perform one-hot encoding using get_dummies\n",
        "encoded_train = pd.get_dummies(categorical_data_train, columns=columns_to_encode)\n",
        "encoded_test = pd.get_dummies(categorical_data_test, columns=columns_to_encode)"
      ],
      "metadata": {
        "id": "lsfA45WHTttt"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "'''\n",
        "how can i augment data here hmm?: Because here if I augment data in the training set, I have to set the according meta data for the images.\n",
        "\n",
        "Also for data normalization- we would have to do the same thing\n",
        "\n",
        "So here, run the baseline model first.\n",
        "\n",
        "'''"
      ],
      "metadata": {
        "id": "_-nomvi7ZE-s"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import tensorflow as tf\n",
        "from tensorflow.keras.applications import DenseNet201\n",
        "from tensorflow.keras.layers import Dense, GlobalAveragePooling2D, BatchNormalization, Input, Concatenate\n",
        "from tensorflow.keras.models import Model\n",
        "from tensorflow.keras.optimizers import Adam\n",
        "from tensorflow.keras.callbacks import EarlyStopping\n",
        "\n",
        "\n",
        "categorical_input = Input(shape=(20,))\n",
        "\n",
        "# Load the pre-trained DenseNet-121 model (Same as before)\n",
        "base_model = DenseNet201(weights='imagenet', include_top=False)\n",
        "\n",
        "# Freeze some layers in the base model\n",
        "num_layers_to_freeze = 95\n",
        "for layer in base_model.layers[:num_layers_to_freeze]:\n",
        "    layer.trainable = False\n",
        "\n",
        "# Redefining FC Layer since include_top is set to False\n",
        "x = base_model.output\n",
        "x = GlobalAveragePooling2D()(x)\n",
        "x = Dense(256, activation='relu')(x)\n",
        "\n",
        "\n",
        "# Add Custom Layers for Categorical Data\n",
        "y = Dense(64, activation='relu')(categorical_input)\n",
        "x = Concatenate()([x, y])\n",
        "\n",
        "#x = BatchNormalization()(x)\n",
        "predictions = Dense(7, activation='softmax')(x)\n",
        "\n",
        "\n",
        "# Create the final model with both image and categorical inputs\n",
        "model_dense = Model(inputs=[base_model.input, categorical_input], outputs=predictions)\n",
        "\n",
        "# Learning Rate Scheduler\n",
        "initial_learning_rate = 0.0005\n",
        "lr_schedule = tf.keras.optimizers.schedules.ExponentialDecay(\n",
        "    initial_learning_rate,\n",
        "    decay_steps=10000,\n",
        "    decay_rate=0.9\n",
        ")\n",
        "optimizer = Adam(learning_rate=lr_schedule, beta_1=0.9, beta_2=0.999, epsilon=1e-08, amsgrad=False)\n",
        "\n",
        "model_dense.compile(optimizer=optimizer, loss=\"categorical_crossentropy\", metrics=[\"accuracy\"])\n",
        "\n",
        "# Early Stopping\n",
        "early_stopping = EarlyStopping(monitor='val_loss', patience=15, restore_best_weights=True)"
      ],
      "metadata": {
        "id": "Rzh5LyCGO_g6"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "encoded_train.shape"
      ],
      "metadata": {
        "id": "DDGVAPPkxUX4"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"Shape of X_train_image:\", X_train_image.shape)\n",
        "print(\"Shape of encoded_train:\", encoded_train.shape)"
      ],
      "metadata": {
        "id": "846PUGcTxnrF"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Train the model with data augmentation and callbacks\n",
        "epochs = 50\n",
        "batch_size = 60\n",
        "history = model_dense.fit(\n",
        "    [X_train_image, encoded_train],  # Update with your actual image and categorical training data\n",
        "    y_train, epochs=epochs, batch_size=batch_size,   verbose=1,\n",
        "        callbacks=[learning_rate_reduction, early_stopping], validation_data=([X_test_image, encoded_test], y_test)\n",
        ")\n",
        "\n",
        "\n",
        "# Plot the training and validation loss\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "plt.figure(figsize=(10, 5))\n",
        "plt.plot(history.history['loss'], label='Training Loss')\n",
        "plt.plot(history.history['val_loss'], label='Validation Loss')\n",
        "plt.xlabel('Epochs')\n",
        "plt.ylabel('Loss')\n",
        "plt.legend()\n",
        "plt.title('Training and Validation Loss')\n",
        "plt.show()\n",
        "\n",
        "# Plot the training and validation accuracy\n",
        "plt.figure(figsize=(10, 5))\n",
        "plt.plot(history.history['accuracy'], label='Training Accuracy')\n",
        "plt.plot(history.history['val_accuracy'], label='Validation Accuracy')\n",
        "plt.xlabel('Epochs')\n",
        "plt.ylabel('Accuracy')\n",
        "plt.legend()\n",
        "plt.title('Training and Validation Accuracy')\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "KuANoHX0UCpj"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import confusion_matrix, classification_report\n",
        "\n",
        "Y_pred = model_dense.predict([X_test_image, encoded_test])\n",
        "Y_pred_classes = np.argmax(Y_pred, axis=1)\n",
        "Y_true = np.argmax(y_test, axis=1)\n",
        "\n",
        "# Compute the confusion matrix\n",
        "confusion_mtx = confusion_matrix(Y_true, Y_pred_classes)\n",
        "\n",
        "# Plot the confusion matrix with the new colorscale\n",
        "plot_confusion_matrix(confusion_mtx, classes=classes, normalize=False)\n",
        "\n",
        "report = classification_report(Y_true, Y_pred_classes)\n",
        "print(f\"Classification Report for <<DenseNet201>> : \")\n",
        "print(report)\n"
      ],
      "metadata": {
        "id": "UuHgIekFUFKw"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Plot training and validation loss\n",
        "plt.figure(figsize=(10, 5))\n",
        "plt.plot(history.history['loss'], label='Training Loss')\n",
        "plt.plot(history.history['val_loss'], label='Validation Loss')\n",
        "plt.xlabel('Epochs')\n",
        "plt.ylabel('Loss')\n",
        "plt.legend()\n",
        "plt.title('Training and Validation Loss')\n",
        "plt.show()\n",
        "\n",
        "# Plot training and validation accuracy\n",
        "plt.figure(figsize=(10, 5))\n",
        "plt.plot(history.history['accuracy'], label='Training Accuracy')\n",
        "plt.plot(history.history['val_accuracy'], label='Validation Accuracy')\n",
        "plt.xlabel('Epochs')\n",
        "plt.ylabel('Accuracy')\n",
        "plt.legend()\n",
        "plt.title('Training and Validation Accuracy')\n",
        "plt.show()\n"
      ],
      "metadata": {
        "id": "xOEA7kuCO_jO"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "nvIRuVxJO_l2"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "---"
      ],
      "metadata": {
        "id": "3EVZfCWXO-rf"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df_clean"
      ],
      "metadata": {
        "id": "sElfXg3r4DRm"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from keras.utils import to_categorical\n",
        "\n",
        "X = df_clean['image']\n",
        "y = to_categorical(df_clean['dx_code'])"
      ],
      "metadata": {
        "id": "LefT5dVE4KKg"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "\n",
        "# Split the data into training and testing sets\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=42)\n",
        "\n",
        "print(X_train.shape , \"\\n\")\n",
        "print(X_train[1].shape , \"\\n\")\n"
      ],
      "metadata": {
        "id": "FHEgGl_44Dbx"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Convert Pandas Series to NumPy arrays\n",
        "X_train = np.array(X_train.tolist())\n",
        "X_test = np.array(X_test.tolist())\n",
        "\n",
        "# Reshape image data in 3 dimensions (height = 125, width = 100, channel = 3)\n",
        "X_train = X_train.reshape(X_train.shape[0], 125, 100, 3)\n",
        "X_test = X_test.reshape(X_test.shape[0], 75, 100, 3)"
      ],
      "metadata": {
        "id": "IJbn5HLQ4OfV"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from tensorflow.keras.preprocessing.image import ImageDataGenerator\n",
        "\n",
        "# With data augmentation to prevent overfitting\n",
        "\n",
        "datagen = ImageDataGenerator(\n",
        "        featurewise_center=False,  # set input mean to 0 over the dataset\n",
        "        samplewise_center=False,  # set each sample mean to 0\n",
        "        featurewise_std_normalization=False,  # divide inputs by std of the dataset\n",
        "        samplewise_std_normalization=False,  # divide each input by its std\n",
        "        zca_whitening=False,  # apply ZCA whitening\n",
        "        rotation_range=10,  # randomly rotate images in the range (degrees, 0 to 180)\n",
        "        zoom_range = 0.1, # Randomly zoom image\n",
        "        width_shift_range=0.1,  # randomly shift images horizontally (fraction of total width)\n",
        "        height_shift_range=0.1,  # randomly shift images vertically (fraction of total height)\n",
        "        horizontal_flip=False,  # randomly flip images\n",
        "        vertical_flip=False)  # randomly flip images\n",
        "\n",
        "datagen.fit(X_train)"
      ],
      "metadata": {
        "id": "OnrbtFKu4OiA"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from tensorflow.keras.callbacks import ReduceLROnPlateau, EarlyStopping\n",
        "\n",
        "# Set a learning rate annealer\n",
        "learning_rate_reduction = ReduceLROnPlateau(monitor='val_acc',\n",
        "                                            patience=3,\n",
        "                                            verbose=1,\n",
        "                                            factor=0.5,\n",
        "                                            min_lr=0.00001)\n"
      ],
      "metadata": {
        "id": "-kqlsIui4Q2n"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "split_proportion = 0.8\n",
        "\n",
        "# Randomly shuffle the rows of the DataFrame\n",
        "shuffled_data = df_clean.sample(frac=1, random_state=41)  # random_state for reproducibility\n",
        "\n",
        "# Calculate the number of rows for the first piece\n",
        "total_rows = shuffled_data.shape[0]\n",
        "split_size = int(total_rows * split_proportion)\n",
        "\n",
        "# Split the DataFrame into two pieces\n",
        "Train = shuffled_data.iloc[:split_size]\n",
        "Test = shuffled_data.iloc[split_size:]\n"
      ],
      "metadata": {
        "id": "IjdcWSvm4Q5f"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from keras.utils import to_categorical\n",
        "\n",
        "X_train_image = Train['image']\n",
        "y_train = to_categorical(Train['dx_code'])\n",
        "\n",
        "X_test_image = Test['image']\n",
        "y_test = to_categorical(Test['dx_code'])\n"
      ],
      "metadata": {
        "id": "wHm52msy4gLY"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from keras.utils import to_categorical\n",
        "\n",
        "X_train_image = Train['image']\n",
        "y_train = to_categorical(Train['dx_code'])\n",
        "\n",
        "X_test_image = Test['image']\n",
        "y_test = to_categorical(Test['dx_code'])\n"
      ],
      "metadata": {
        "id": "rmW7kZR04gNt"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "7ZxiPZyw4gQC"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "1HqO8f9S4gSH"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# How to change data augmentation and normalization method:\n"
      ],
      "metadata": {
        "id": "Bg-ylxUHXs4f"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Goal :\n",
        "'''\n",
        "Data-aug only change the images and we won;t know in advanced which will be applied to which\n",
        "\n",
        "To do\n",
        "'''"
      ],
      "metadata": {
        "id": "Yl1nkplBYAXq"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from tensorflow.keras.preprocessing.image import ImageDataGenerator\n",
        "\n",
        "#Data augmentation to prevent overfitting\n",
        "datagen = ImageDataGenerator(\n",
        "        featurewise_center=False,  # set input mean to 0 over the dataset\n",
        "        samplewise_center=False,  # set each sample mean to 0\n",
        "        featurewise_std_normalization=False,  # divide inputs by std of the dataset\n",
        "        samplewise_std_normalization=False,  # divide each input by its std\n",
        "        zca_whitening=False,  # apply ZCA whitening\n",
        "        rotation_range=10,  # randomly rotate images in the range (degrees, 0 to 180)\n",
        "        zoom_range = 0.1, # Randomly zoom image\n",
        "        width_shift_range=0.12,  # randomly shift images horizontally (fraction of total width)\n",
        "        height_shift_range=0.12,  # randomly shift images vertically (fraction of total height)\n",
        "        horizontal_flip=True,  # randomly flip images\n",
        "        vertical_flip=True)  # randomly flip images\n",
        "\n",
        "datagen.fit(x_train)"
      ],
      "metadata": {
        "id": "sH9FwAYDXyRB"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#Adding normalization and standardization to train test split\n",
        "\n",
        "def train_test_df_normstandard(df):\n",
        "    features=df.drop(columns=['cell_type_idx'],axis=1)\n",
        "    target=df['cell_type_idx']\n",
        "\n",
        "    # Create First Train and Test sets\n",
        "    x_train_o, x_test_o, y_train_o, y_test_o = train_test_split(features, target, test_size=0.20,random_state=123)\n",
        "\n",
        "    x_train = np.asarray(x_train_o['image'].tolist())\n",
        "    x_test = np.asarray(x_test_o['image'].tolist())\n",
        "\n",
        "    #Normalization\n",
        "    x_train = x_train / 255\n",
        "    x_test = x_test / 255\n",
        "\n",
        "    #The standardization is done using the training set Mean and Std. Deviation as reference\n",
        "    x_train_mean = np.mean(x_train)\n",
        "    x_train_std = np.std(x_train)\n",
        "\n",
        "    x_train = (x_train - x_train_mean)/x_train_std\n",
        "    x_test = (x_test - x_train_mean)/x_train_std\n",
        "\n",
        "    # Perform one-hot encoding on the labels\n",
        "    y_train = to_categorical(y_train_o, num_classes = 7)\n",
        "    y_test = to_categorical(y_test_o, num_classes = 7)\n",
        "\n",
        "    #Splitting training into Train and Validatation sets\n",
        "    x_train, x_validate, y_train, y_validate = train_test_split(x_train, y_train, test_size = 0.1,random_state=123)\n",
        "\n",
        "    #Reshaping the Images into 3 channels (RGB)\n",
        "    x_train = x_train.reshape(x_train.shape[0], *(100, 125, 3))\n",
        "    x_test = x_test.reshape(x_test.shape[0], *(100, 125, 3))\n",
        "    x_validate = x_validate.reshape(x_validate.shape[0], *(100, 125, 3))\n",
        "\n",
        "    return x_train,x_validate,x_test,y_train,y_validate,y_test\n",
        "\n",
        "x_train,x_validate,x_test,y_train,y_validate,y_test = train_test_df_normstandard(df_clean)"
      ],
      "metadata": {
        "id": "xir7teQDXyTW"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Try with ResNet50"
      ],
      "metadata": {
        "id": "XnOQGjPoX3vQ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "## RESNET50\n",
        "import tensorflow as tf\n",
        "from tensorflow.keras.applications import ResNet50\n",
        "from tensorflow.keras.layers import Dense, GlobalAveragePooling2D, BatchNormalization, Input, Concatenate\n",
        "from tensorflow.keras.models import Model\n",
        "from tensorflow.keras.optimizers import Adam\n",
        "from tensorflow.keras.callbacks import EarlyStopping\n",
        "\n",
        "categorical_input = Input(shape=(20,))\n",
        "\n",
        "# Load the pre-trained ResNet-101 model\n",
        "base_model = ResNet50(weights='imagenet', include_top=False)\n",
        "\n",
        "# Freeze some layers in the base model\n",
        "num_layers_to_freeze = 95\n",
        "for layer in base_model.layers[:num_layers_to_freeze]:\n",
        "    layer.trainable = True\n",
        "\n",
        "# After GlobalAveragePooling2D layer, concatenate with the categorical input\n",
        "x = base_model.output\n",
        "x = GlobalAveragePooling2D()(x)\n",
        "x = Dense(256, activation='relu', kernel_regularizer=tf.keras.regularizers.l2(0.01))(x)\n",
        "\n",
        "# Add Custom Layers for Categorical Data\n",
        "y = Dense(64, activation='relu')(categorical_input)\n",
        "x = Concatenate()([x, y])\n",
        "\n",
        "#x = BatchNormalization()(x)\n",
        "predictions = Dense(7, activation='softmax')(x)\n",
        "\n",
        "# Create the final model with both image and categorical inputs\n",
        "model_resnet = Model(inputs=[base_model.input, categorical_input], outputs=predictions)\n",
        "\n",
        "# Learning Rate Scheduler\n",
        "initial_learning_rate = 0.0005\n",
        "lr_schedule = tf.keras.optimizers.schedules.ExponentialDecay(\n",
        "    initial_learning_rate,\n",
        "    decay_steps=10000,\n",
        "    decay_rate=0.9\n",
        ")\n",
        "optimizer = Adam(learning_rate=lr_schedule, beta_1=0.9, beta_2=0.999, epsilon=1e-08, amsgrad=False)\n",
        "\n",
        "model_resnet.compile(optimizer=optimizer, loss=\"categorical_crossentropy\", metrics=[\"accuracy\"])\n",
        "\n",
        "# Early Stopping\n",
        "early_stopping = EarlyStopping(monitor='val_loss', patience=15, restore_best_weights=True)\n"
      ],
      "metadata": {
        "id": "QzLi1vw-UL8m"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Train the model with data augmentation and callbacks\n",
        "epochs = 60\n",
        "batch_size = 60\n",
        "history = model_resnet.fit(\n",
        "    [X_train_image, encoded_train],\n",
        "    y_train,\n",
        "    epochs=epochs,\n",
        "    batch_size=batch_size,\n",
        "    callbacks=[learning_rate_reduction ,early_stopping ],\n",
        "    validation_data=([X_test_image, encoded_test], y_test)\n",
        ")\n",
        "\n",
        "# Plot the training and validation loss\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "plt.figure(figsize=(10, 5))\n",
        "plt.plot(history.history['loss'], label='Training Loss')\n",
        "plt.plot(history.history['val_loss'], label='Validation Loss')\n",
        "plt.xlabel('Epochs')\n",
        "plt.ylabel('Loss')\n",
        "plt.legend()\n",
        "plt.title('Training and Validation Loss')\n",
        "plt.show()\n",
        "\n",
        "\n",
        "# Plot the training and validation accuracy\n",
        "plt.figure(figsize=(10, 5))\n",
        "plt.plot(history.history['accuracy'], label='Training Accuracy')\n",
        "plt.plot(history.history['val_accuracy'], label='Validation Accuracy')\n",
        "plt.xlabel('Epochs')\n",
        "plt.ylabel('Accuracy')\n",
        "plt.legend()\n",
        "plt.title('Training and Validation Accuracy')\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "SUDxW6kWUO6M"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import confusion_matrix, classification_report\n",
        "\n",
        "Y_pred = model_resnet.predict([X_test_image, encoded_test])\n",
        "Y_pred_classes = np.argmax(Y_pred, axis=1)\n",
        "Y_true = np.argmax(y_test, axis=1)\n",
        "\n",
        "# Compute the confusion matrix\n",
        "confusion_mtx = confusion_matrix(Y_true, Y_pred_classes)\n",
        "\n",
        "# Plot the confusion matrix with the new colorscale\n",
        "plot_confusion_matrix(confusion_mtx, classes=classes, normalize=False)\n",
        "\n",
        "report = classification_report(Y_true, Y_pred_classes)\n",
        "print(f\"Classification Report for <<ResNet50>> : \")\n",
        "print(report)\n"
      ],
      "metadata": {
        "id": "WsYJkXiEUO9D"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "nhsavoRQlNXJ"
      },
      "source": [
        "## Baseline: Without Data Augmentation\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "4THAVLErBbr_"
      },
      "source": [
        "### Resnet Without Data Augmentation\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "DfOuBHCSZ4Aj"
      },
      "outputs": [],
      "source": [
        "from tensorflow.keras.callbacks import ReduceLROnPlateau, EarlyStopping\n",
        "\n",
        "# Set a learning rate annealer\n",
        "learning_rate_reduction = ReduceLROnPlateau(monitor='val_accuracy',\n",
        "                                            patience=3,\n",
        "                                            verbose=1,\n",
        "                                            factor=0.5,\n",
        "                                            min_lr=0.00001)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "6WNPjF0EK16u"
      },
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "gJwhAHA3lGgu"
      },
      "outputs": [],
      "source": [
        "import tensorflow as tf\n",
        "from tensorflow.keras.applications import ResNet50\n",
        "from tensorflow.keras.layers import Dense, GlobalAveragePooling2D\n",
        "from tensorflow.keras.models import Model\n",
        "from tensorflow.keras.optimizers import Adam\n",
        "from tensorflow.keras.callbacks import EarlyStopping\n",
        "\n",
        "# Load the pre-trained ResNet-50 model (weights pre-trained on ImageNet)\n",
        "base_model = ResNet50(weights='imagenet', include_top=False)\n",
        "\n",
        "# Freeze some layers in the base model\n",
        "num_layers_to_freeze = 143  # Choose the number of layers you want to freeze for ResNet50\n",
        "for layer in base_model.layers[:num_layers_to_freeze]:\n",
        "    layer.trainable = False\n",
        "\n",
        "# Redefining FC Layer since include_top is set to False\n",
        "x = base_model.output\n",
        "x = GlobalAveragePooling2D()(x)\n",
        "x = Dense(256, activation='relu')(x)\n",
        "predictions = Dense(7, activation='softmax')(x)  # Assuming you have 7 classes\n",
        "\n",
        "# Create the final model\n",
        "model_resnet = Model(inputs=base_model.input, outputs=predictions)\n",
        "\n",
        "# Learning Rate Scheduler\n",
        "initial_learning_rate = 0.01\n",
        "lr_schedule = tf.keras.optimizers.schedules.ExponentialDecay(\n",
        "    initial_learning_rate,\n",
        "    decay_steps=10000,   # Adjust decay_steps\n",
        "    decay_rate=0.9       # Adjust decay_rate\n",
        ")\n",
        "optimizer = Adam(learning_rate=lr_schedule)\n",
        "\n",
        "model_resnet.compile(optimizer=optimizer, loss=\"categorical_crossentropy\", metrics=[\"accuracy\"])\n",
        "\n",
        "# Early Stopping\n",
        "early_stopping = EarlyStopping(monitor='val_loss', patience=15, restore_best_weights=True)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "-o3DzJVwAd65"
      },
      "outputs": [],
      "source": [
        "import plotly.graph_objects as go"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "7XUDT71KZab-"
      },
      "outputs": [],
      "source": [
        "# Fit the model\n",
        "epochs = 50\n",
        "batch_size = 60\n",
        "\n",
        "history = model_resnet.fit(\n",
        "    x_train, y_train,\n",
        "    batch_size=batch_size,\n",
        "    epochs=epochs,\n",
        "    verbose=1,\n",
        "    callbacks=[learning_rate_reduction, early_stopping],\n",
        "    validation_data=(x_validate, y_validate))\n",
        "\n",
        "# Plot the training and validation loss\n",
        "plt.figure(figsize=(10, 5))\n",
        "plt.plot(history.history['loss'], label='Training Loss')\n",
        "plt.plot(history.history['val_loss'], label='Validation Loss')\n",
        "plt.xlabel('Epochs')\n",
        "plt.ylabel('Loss')\n",
        "plt.legend()\n",
        "plt.title('Training and Validation Loss')\n",
        "plt.show()\n",
        "\n",
        "# Plot the training and validation accuracy\n",
        "plt.figure(figsize=(10, 5))\n",
        "plt.plot(history.history['accuracy'], label='Training Accuracy')\n",
        "plt.plot(history.history['val_accuracy'], label='Validation Accuracy')\n",
        "plt.xlabel('Epochs')\n",
        "plt.ylabel('Accuracy')\n",
        "plt.legend()\n",
        "plt.title('Training and Validation Accuracy')\n",
        "plt.show()\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "vtGMvumNb37Z"
      },
      "outputs": [],
      "source": [
        "# Function to plot the confusion matrix with Plotly\n",
        "def plot_confusion_matrix(cm, classes, normalize=False):\n",
        "    if normalize:\n",
        "        cm = cm.astype('float') / cm.sum(axis=1)[:, np.newaxis]\n",
        "        colorscale = 'Plasma'\n",
        "    else:\n",
        "        colorscale = 'Magma_r'  # Reversed 'Magma' colorscale for non-normalized matrix\n",
        "\n",
        "    annotations = []\n",
        "    for i in range(len(classes)):\n",
        "        for j in range(len(classes)):\n",
        "            annotations.append(\n",
        "                {\n",
        "                    'x': classes[j],\n",
        "                    'y': classes[i],\n",
        "                    'text': str(cm[i, j]),\n",
        "                    'showarrow': False,\n",
        "                    'font': {'color': 'red' if cm[i, j] > 0.5 else 'black'}\n",
        "                }\n",
        "            )\n",
        "\n",
        "    fig = go.Figure(data=go.Heatmap(\n",
        "        z=cm,\n",
        "        x=list(classes),\n",
        "        y=list(classes),\n",
        "        colorscale=colorscale,\n",
        "        colorbar=dict(title='Normalized' if normalize else 'Count'),\n",
        "        showscale=True,\n",
        "        hoverinfo='z'\n",
        "    ))\n",
        "\n",
        "    fig.update_layout(\n",
        "        title='Confusion Matrix',\n",
        "        xaxis=dict(title='Predicted label'),\n",
        "        yaxis=dict(title='True label'),\n",
        "        annotations=annotations\n",
        "    )\n",
        "\n",
        "    if normalize:\n",
        "        fig.update_layout(title_text='Normalized Confusion Matrix')\n",
        "    else:\n",
        "        fig.update_layout(title_text='Confusion Matrix (Counts)')\n",
        "\n",
        "    fig.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "WvLkWH-5aiwD"
      },
      "outputs": [],
      "source": [
        "#Printing classification report\n",
        "from sklearn.metrics import confusion_matrix, classification_report\n",
        "\n",
        "classes = range(7)\n",
        "\n",
        "# Y_true (true labels) and Y_pred_classes (predicted labels) Evaluating performance on test set\n",
        "Y_pred = model_resnet.predict(x_test)\n",
        "Y_pred_classes = np.argmax(Y_pred, axis=1)\n",
        "Y_true = np.argmax(y_test, axis=1)\n",
        "\n",
        "# Compute the confusion matrix\n",
        "confusion_mtx = confusion_matrix(Y_true, Y_pred_classes)\n",
        "\n",
        "# Plot the confusion matrix with the new colorscale\n",
        "plot_confusion_matrix(confusion_mtx, classes=classes, normalize=False)\n",
        "\n",
        "report = classification_report(Y_true, Y_pred_classes)\n",
        "print(f\"Classification Report for <<ResNet50>> : \")\n",
        "print(report)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "HWUGCslkBgMT"
      },
      "source": [
        "### Resnet With Data Augmentation\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "gr2PzQcAPg7Y"
      },
      "source": [
        "### Standardize and Augmentation"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "ErTTUKo3PcIn"
      },
      "outputs": [],
      "source": [
        "# Create an ImageDataGenerator with standardization\n",
        "\n",
        "datagen2 = ImageDataGenerator(\n",
        "        featurewise_center=True,  # set input mean to 0 over the dataset\n",
        "        samplewise_center=False,  # set each sample mean to 0\n",
        "        featurewise_std_normalization=True,  # divide inputs by std of the dataset\n",
        "        samplewise_std_normalization=False,  # divide each input by its std\n",
        "        zca_whitening=False,  # apply ZCA whitening\n",
        "        rotation_range=10,  # randomly rotate images in the range (degrees, 0 to 180)\n",
        "        zoom_range = 0.1, # Randomly zoom image\n",
        "        width_shift_range=0.12,  # randomly shift images horizontally (fraction of total width)\n",
        "        height_shift_range=0.12,  # randomly shift images vertically (fraction of total height)\n",
        "        horizontal_flip=True,  # randomly flip images\n",
        "        vertical_flip=True)  # randomly flip images\n",
        "\n",
        "# Fit the ImageDataGenerator to your training data\n",
        "datagen2.fit(x_train)\n",
        "\n",
        "# Fit the model using the generator\n",
        "history = model_resnet.fit_generator(\n",
        "    datagen2.flow(x_train, y_train, batch_size=batch_size),\n",
        "    epochs=epochs,\n",
        "    verbose=1,\n",
        "    steps_per_epoch=x_train.shape[0] // batch_size,\n",
        "    callbacks=[learning_rate_reduction, early_stopping],\n",
        "    validation_data=(x_validate, y_validate))\n",
        "\n",
        "# Plot the training and validation loss\n",
        "plt.figure(figsize=(10, 5))\n",
        "plt.plot(history.history['loss'], label='Training Loss')\n",
        "plt.plot(history.history['val_loss'], label='Validation Loss')\n",
        "plt.xlabel('Epochs')\n",
        "plt.ylabel('Loss')\n",
        "plt.legend()\n",
        "plt.title('Training and Validation Loss')\n",
        "plt.show()\n",
        "\n",
        "# Plot the training and validation accuracy\n",
        "plt.figure(figsize=(10, 5))\n",
        "plt.plot(history.history['accuracy'], label='Training Accuracy')\n",
        "plt.plot(history.history['val_accuracy'], label='Validation Accuracy')\n",
        "plt.xlabel('Epochs')\n",
        "plt.ylabel('Accuracy')\n",
        "plt.legend()\n",
        "plt.title('Training and Validation Accuracy')\n",
        "plt.show()\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "8Emsm8rlUEas"
      },
      "outputs": [],
      "source": [
        "# Create an ImageDataGenerator with standardization\n",
        "rescale_factor = 1.0/255\n",
        "datagen3 = ImageDataGenerator(rescale = rescale_factor,\n",
        "        featurewise_center=False,  # set input mean to 0 over the dataset\n",
        "        samplewise_center=False,  # set each sample mean to 0\n",
        "        featurewise_std_normalization=False,  # divide inputs by std of the dataset\n",
        "        samplewise_std_normalization=False,  # divide each input by its std\n",
        "        zca_whitening=False,  # apply ZCA whitening\n",
        "        rotation_range=10,  # randomly rotate images in the range (degrees, 0 to 180)\n",
        "        zoom_range = 0.1, # Randomly zoom image\n",
        "        width_shift_range=0.12,  # randomly shift images horizontally (fraction of total width)\n",
        "        height_shift_range=0.12,  # randomly shift images vertically (fraction of total height)\n",
        "        horizontal_flip=True,  # randomly flip images\n",
        "        vertical_flip=True)  # randomly flip images\n",
        "\n",
        "# Fit the ImageDataGenerator to your training data\n",
        "datagen3.fit(x_train)\n",
        "\n",
        "# Fit the model using the generator\n",
        "history = model_resnet.fit_generator(\n",
        "    datagen3.flow(x_train, y_train, batch_size=batch_size),\n",
        "    epochs=epochs,\n",
        "    verbose=1,\n",
        "    steps_per_epoch=x_train.shape[0] // batch_size,\n",
        "    callbacks=[learning_rate_reduction, early_stopping],\n",
        "    validation_data=(x_validate, y_validate))\n",
        "\n",
        "# Plot the training and validation loss\n",
        "plt.figure(figsize=(10, 5))\n",
        "plt.plot(history.history['loss'], label='Training Loss')\n",
        "plt.plot(history.history['val_loss'], label='Validation Loss')\n",
        "plt.xlabel('Epochs')\n",
        "plt.ylabel('Loss')\n",
        "plt.legend()\n",
        "plt.title('Training and Validation Loss')\n",
        "plt.show()\n",
        "\n",
        "# Plot the training and validation accuracy\n",
        "plt.figure(figsize=(10, 5))\n",
        "plt.plot(history.history['accuracy'], label='Training Accuracy')\n",
        "plt.plot(history.history['val_accuracy'], label='Validation Accuracy')\n",
        "plt.xlabel('Epochs')\n",
        "plt.ylabel('Accuracy')\n",
        "plt.legend()\n",
        "plt.title('Training and Validation Accuracy')\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "eJJpaO6EfgLz"
      },
      "outputs": [],
      "source": [
        "#Printing classification report\n",
        "from sklearn.metrics import confusion_matrix, classification_report\n",
        "\n",
        "classes = range(7)\n",
        "\n",
        "# Y_true (true labels) and Y_pred_classes (predicted labels) Evaluating performance on test set\n",
        "Y_pred = model_resnet.predict(x_test)\n",
        "Y_pred_classes = np.argmax(Y_pred, axis=1)\n",
        "Y_true = np.argmax(y_test, axis=1)\n",
        "\n",
        "# Compute the confusion matrix\n",
        "confusion_mtx = confusion_matrix(Y_true, Y_pred_classes)\n",
        "\n",
        "# Plot the confusion matrix with the new colorscale\n",
        "plot_confusion_matrix(confusion_mtx, classes=classes, normalize=False)\n",
        "\n",
        "report = classification_report(Y_true, Y_pred_classes)\n",
        "print(f\"Classification Report for <<ResNet50>> : \")\n",
        "print(report)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "ZoHZUXgrhajs"
      },
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Wby-IZaghbup"
      },
      "source": [
        "### ResNet50 Batch Norm and Dropout\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "GGWLGWmeh3xd"
      },
      "outputs": [],
      "source": [
        "from tensorflow.keras.callbacks import ReduceLROnPlateau, EarlyStopping\n",
        "\n",
        "# Set a learning rate annealer\n",
        "learning_rate_reduction = ReduceLROnPlateau(monitor='val_accuracy',\n",
        "                                            patience=3,\n",
        "                                            verbose=1,\n",
        "                                            factor=0.5,\n",
        "                                            min_lr=0.00001)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "1onDuAUFh3zg"
      },
      "outputs": [],
      "source": [
        "import tensorflow as tf\n",
        "from tensorflow.keras.applications import ResNet50\n",
        "from tensorflow.keras.layers import Dense, GlobalAveragePooling2D, BatchNormalization, Dropout\n",
        "from tensorflow.keras.models import Model\n",
        "from tensorflow.keras.optimizers import Adam\n",
        "from tensorflow.keras.callbacks import EarlyStopping\n",
        "\n",
        "# Load the pre-trained ResNet-50 model (weights pre-trained on ImageNet)\n",
        "base_model = ResNet50(weights='imagenet', include_top=False)\n",
        "\n",
        "# Freeze the layers of the base model\n",
        "for layer in base_model.layers:\n",
        "    layer.trainable = False\n",
        "\n",
        "# Add custom layers\n",
        "x = base_model.output\n",
        "x = GlobalAveragePooling2D()(x)\n",
        "x = BatchNormalization()(x)  # Batch Normalization layer\n",
        "x = Dropout(0.5)(x)  # Dropout layer\n",
        "x = Dense(256, activation='relu')(x)\n",
        "predictions = Dense(7, activation='softmax')(x)\n",
        "\n",
        "# Create the final model\n",
        "model_resnet = Model(inputs=base_model.input, outputs=predictions)\n",
        "\n",
        "# Learning Rate Scheduler\n",
        "initial_learning_rate = 0.01\n",
        "lr_schedule = tf.keras.optimizers.schedules.ExponentialDecay(\n",
        "    initial_learning_rate,\n",
        "    decay_steps=10000,   # Adjust decay_steps\n",
        "    decay_rate=0.9       # Adjust decay_rate\n",
        ")\n",
        "optimizer = Adam(learning_rate=lr_schedule)\n",
        "\n",
        "model_resnet.compile(optimizer=optimizer, loss=\"categorical_crossentropy\", metrics=[\"accuracy\"])\n",
        "\n",
        "# Early Stopping\n",
        "early_stopping = EarlyStopping(monitor='val_loss', patience=15, restore_best_weights=True)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "ZQ3ocM3oiIiM"
      },
      "outputs": [],
      "source": [
        "# Fit the model WUTHOUT AUG\n",
        "epochs = 50\n",
        "batch_size = 60\n",
        "\n",
        "history = model_resnet.fit(\n",
        "    x_train, y_train,\n",
        "    batch_size=batch_size,\n",
        "    epochs=epochs,\n",
        "    verbose=1,\n",
        "    callbacks=[learning_rate_reduction, early_stopping],\n",
        "    validation_data=(x_validate, y_validate))\n",
        "\n",
        "# Plot the training and validation loss\n",
        "plt.figure(figsize=(10, 5))\n",
        "plt.plot(history.history['loss'], label='Training Loss')\n",
        "plt.plot(history.history['val_loss'], label='Validation Loss')\n",
        "plt.xlabel('Epochs')\n",
        "plt.ylabel('Loss')\n",
        "plt.legend()\n",
        "plt.title('Training and Validation Loss')\n",
        "plt.show()\n",
        "\n",
        "# Plot the training and validation accuracy\n",
        "plt.figure(figsize=(10, 5))\n",
        "plt.plot(history.history['accuracy'], label='Training Accuracy')\n",
        "plt.plot(history.history['val_accuracy'], label='Validation Accuracy')\n",
        "plt.xlabel('Epochs')\n",
        "plt.ylabel('Accuracy')\n",
        "plt.legend()\n",
        "plt.title('Training and Validation Accuracy')\n",
        "plt.show()\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "H1dCES5tiTwX"
      },
      "outputs": [],
      "source": [
        "#Printing classification report\n",
        "from sklearn.metrics import confusion_matrix, classification_report\n",
        "\n",
        "classes = range(7)\n",
        "\n",
        "# Y_true (true labels) and Y_pred_classes (predicted labels) Evaluating performance on test set\n",
        "Y_pred = model_resnet.predict(x_test)\n",
        "Y_pred_classes = np.argmax(Y_pred, axis=1)\n",
        "Y_true = np.argmax(y_test, axis=1)\n",
        "\n",
        "# Compute the confusion matrix\n",
        "confusion_mtx = confusion_matrix(Y_true, Y_pred_classes)\n",
        "\n",
        "# Plot the confusion matrix with the new colorscale\n",
        "plot_confusion_matrix(confusion_mtx, classes=classes, normalize=False)\n",
        "\n",
        "report = classification_report(Y_true, Y_pred_classes)\n",
        "print(f\"Classification Report for <<ResNet50>> : \")\n",
        "print(report)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "4aUQzRyGiT94"
      },
      "outputs": [],
      "source": [
        "#WITH AUGMENTATION\n",
        "# Fit the model\n",
        "epochs = 50\n",
        "batch_size = 60\n",
        "\n",
        "history = model_resnet.fit_generator(datagen.flow(x_train, y_train, batch_size=batch_size),\n",
        "                                     epochs=epochs, verbose=1,\n",
        "                                     steps_per_epoch= x_train.shape[0] // batch_size,\n",
        "                                     callbacks= [learning_rate_reduction, early_stopping],\n",
        "                                     validation_data= (x_validate, y_validate))\n",
        "\n",
        "# Plot the training and validation loss\n",
        "plt.figure(figsize=(10, 5))\n",
        "plt.plot(history.history['loss'], label='Training Loss')\n",
        "plt.plot(history.history['val_loss'], label='Validation Loss')\n",
        "plt.xlabel('Epochs')\n",
        "plt.ylabel('Loss')\n",
        "plt.legend()\n",
        "plt.title('Training and Validation Loss')\n",
        "plt.show()\n",
        "\n",
        "# Plot the training and validation accuracy\n",
        "plt.figure(figsize=(10, 5))\n",
        "plt.plot(history.history['accuracy'], label='Training Accuracy')\n",
        "plt.plot(history.history['val_accuracy'], label='Validation Accuracy')\n",
        "plt.xlabel('Epochs')\n",
        "plt.ylabel('Accuracy')\n",
        "plt.legend()\n",
        "plt.title('Training and Validation Accuracy')\n",
        "plt.show()\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "L8Upg0NBibx5"
      },
      "outputs": [],
      "source": [
        "#Printing classification report\n",
        "from sklearn.metrics import confusion_matrix, classification_report\n",
        "\n",
        "classes = range(7)\n",
        "\n",
        "# Y_true (true labels) and Y_pred_classes (predicted labels) Evaluating performance on test set\n",
        "Y_pred = model_resnet.predict(x_test)\n",
        "Y_pred_classes = np.argmax(Y_pred, axis=1)\n",
        "Y_true = np.argmax(y_test, axis=1)\n",
        "\n",
        "# Compute the confusion matrix\n",
        "confusion_mtx = confusion_matrix(Y_true, Y_pred_classes)\n",
        "\n",
        "# Plot the confusion matrix with the new colorscale\n",
        "plot_confusion_matrix(confusion_mtx, classes=classes, normalize=False)\n",
        "\n",
        "report = classification_report(Y_true, Y_pred_classes)\n",
        "print(f\"Classification Report for <<ResNet50>> : \")\n",
        "print(report)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "DLV0RA-HbdGl"
      },
      "source": [
        "##### DenseNET WITH BATCHNORM AND DROPOUT"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "d7wyWvTiVBx2"
      },
      "outputs": [],
      "source": [
        "import tensorflow as tf\n",
        "from tensorflow.keras.applications import DenseNet201\n",
        "from tensorflow.keras.layers import Dense, GlobalAveragePooling2D, BatchNormalization, Dropout\n",
        "from tensorflow.keras.models import Model\n",
        "from tensorflow.keras.optimizers import Adam\n",
        "from tensorflow.keras.callbacks import EarlyStopping\n",
        "\n",
        "# Load the pre-trained ResNet-50 model (weights pre-trained on ImageNet)\n",
        "base_model = DenseNet201(weights='imagenet', include_top=False)\n",
        "\n",
        "# Freeze the layers of the base model\n",
        "for layer in base_model.layers:\n",
        "    layer.trainable = False\n",
        "\n",
        "# Add custom layers\n",
        "x = base_model.output\n",
        "x = GlobalAveragePooling2D()(x)\n",
        "x = BatchNormalization()(x)  # Batch Normalization layer\n",
        "x = Dropout(0.5)(x)  # Dropout layer\n",
        "x = Dense(256, activation='relu')(x)\n",
        "predictions = Dense(7, activation='softmax')(x)\n",
        "\n",
        "# Create the final model\n",
        "model_dense = Model(inputs=base_model.input, outputs=predictions)\n",
        "\n",
        "# Learning Rate Scheduler\n",
        "initial_learning_rate = 0.01\n",
        "lr_schedule = tf.keras.optimizers.schedules.ExponentialDecay(\n",
        "    initial_learning_rate,\n",
        "    decay_steps=10000,   # Adjust decay_steps\n",
        "    decay_rate=0.9       # Adjust decay_rate\n",
        ")\n",
        "optimizer = Adam(learning_rate=lr_schedule)\n",
        "\n",
        "model_dense.compile(optimizer=optimizer, loss=\"categorical_crossentropy\", metrics=[\"accuracy\"])\n",
        "\n",
        "# Early Stopping\n",
        "early_stopping = EarlyStopping(monitor='val_loss', patience=15, restore_best_weights=True)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "gIYImcDLVTvO"
      },
      "outputs": [],
      "source": [
        "# Fit the model WUTHOUT AUG\n",
        "epochs = 50\n",
        "batch_size = 60\n",
        "history = model_dense.fit(\n",
        "    x_train, y_train,\n",
        "    batch_size=batch_size,\n",
        "    epochs=epochs,\n",
        "    verbose=1,\n",
        "    callbacks=[learning_rate_reduction, early_stopping],\n",
        "    validation_data=(x_validate, y_validate))\n",
        "\n",
        "# Plot the training and validation loss\n",
        "plt.figure(figsize=(10, 5))\n",
        "plt.plot(history.history['loss'], label='Training Loss')\n",
        "plt.plot(history.history['val_loss'], label='Validation Loss')\n",
        "plt.xlabel('Epochs')\n",
        "plt.ylabel('Loss')\n",
        "plt.legend()\n",
        "plt.title('Training and Validation Loss')\n",
        "plt.show()\n",
        "\n",
        "# Plot the training and validation accuracy\n",
        "plt.figure(figsize=(10, 5))\n",
        "plt.plot(history.history['accuracy'], label='Training Accuracy')\n",
        "plt.plot(history.history['val_accuracy'], label='Validation Accuracy')\n",
        "plt.xlabel('Epochs')\n",
        "plt.ylabel('Accuracy')\n",
        "plt.legend()\n",
        "plt.title('Training and Validation Accuracy')\n",
        "plt.show()\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "p-IK_NTHVTx6"
      },
      "outputs": [],
      "source": [
        "#Printing classification report\n",
        "from sklearn.metrics import confusion_matrix, classification_report\n",
        "\n",
        "classes = range(7)\n",
        "\n",
        "# Y_true (true labels) and Y_pred_classes (predicted labels) Evaluating performance on test set\n",
        "Y_pred = model_dense.predict(x_test)\n",
        "Y_pred_classes = np.argmax(Y_pred, axis=1)\n",
        "Y_true = np.argmax(y_test, axis=1)\n",
        "\n",
        "# Compute the confusion matrix\n",
        "confusion_mtx = confusion_matrix(Y_true, Y_pred_classes)\n",
        "\n",
        "# Plot the confusion matrix with the new colorscale\n",
        "plot_confusion_matrix(confusion_mtx, classes=classes, normalize=False)\n",
        "\n",
        "report = classification_report(Y_true, Y_pred_classes)\n",
        "print(f\"Classification Report for <<DENSENET201>> : \")\n",
        "print(report)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "2T8PavnzVZ3C"
      },
      "outputs": [],
      "source": [
        "#WITH AUGMENTATION\n",
        "# Fit the model\n",
        "epochs = 50\n",
        "batch_size = 60\n",
        "\n",
        "history = model_dense.fit_generator(datagen.flow(x_train, y_train, batch_size=batch_size),\n",
        "                                     epochs=epochs, verbose=1,\n",
        "                                     steps_per_epoch= x_train.shape[0] // batch_size,\n",
        "                                     callbacks= [learning_rate_reduction, early_stopping],\n",
        "                                     validation_data= (x_validate, y_validate))\n",
        "\n",
        "# Plot the training and validation loss\n",
        "plt.figure(figsize=(10, 5))\n",
        "plt.plot(history.history['loss'], label='Training Loss')\n",
        "plt.plot(history.history['val_loss'], label='Validation Loss')\n",
        "plt.xlabel('Epochs')\n",
        "plt.ylabel('Loss')\n",
        "plt.legend()\n",
        "plt.title('Training and Validation Loss')\n",
        "plt.show()\n",
        "\n",
        "# Plot the training and validation accuracy\n",
        "plt.figure(figsize=(10, 5))\n",
        "plt.plot(history.history['accuracy'], label='Training Accuracy')\n",
        "plt.plot(history.history['val_accuracy'], label='Validation Accuracy')\n",
        "plt.xlabel('Epochs')\n",
        "plt.ylabel('Accuracy')\n",
        "plt.legend()\n",
        "plt.title('Training and Validation Accuracy')\n",
        "plt.show()\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "H96gEhPGVZ51"
      },
      "outputs": [],
      "source": [
        "#Printing classification report\n",
        "from sklearn.metrics import confusion_matrix, classification_report\n",
        "\n",
        "classes = range(7)\n",
        "\n",
        "# Y_true (true labels) and Y_pred_classes (predicted labels) Evaluating performance on test set\n",
        "Y_pred = model_dense.predict(x_test)\n",
        "Y_pred_classes = np.argmax(Y_pred, axis=1)\n",
        "Y_true = np.argmax(y_test, axis=1)\n",
        "\n",
        "# Compute the confusion matrix\n",
        "confusion_mtx = confusion_matrix(Y_true, Y_pred_classes)\n",
        "\n",
        "# Plot the confusion matrix with the new colorscale\n",
        "plot_confusion_matrix(confusion_mtx, classes=classes, normalize=False)\n",
        "\n",
        "report = classification_report(Y_true, Y_pred_classes)\n",
        "print(f\"Classification Report for <<ResNet50>> : \")\n",
        "print(report)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "LHKXWPsubphY"
      },
      "source": [
        "#### STANDARDIZATION + AUGEMENTATION + BATCHNORM + DROPOUT"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "z-Oxb4Qet5RI"
      },
      "outputs": [],
      "source": [
        "#Adding normalization and standardization to train test split\n",
        "\n",
        "def train_test_df_normstandard(df):\n",
        "    features=df.drop(columns=['cell_type_idx'],axis=1)\n",
        "    target=df['cell_type_idx']\n",
        "\n",
        "    # Create First Train and Test sets\n",
        "    x_train_o, x_test_o, y_train_o, y_test_o = train_test_split(features, target, test_size=0.20,random_state=123)\n",
        "\n",
        "    x_train = np.asarray(x_train_o['image'].tolist())\n",
        "    x_test = np.asarray(x_test_o['image'].tolist())\n",
        "\n",
        "    #Normalization\n",
        "    x_train = x_train / 255\n",
        "    x_test = x_test / 255\n",
        "\n",
        "    #The standardization is done using the training set Mean and Std. Deviation as reference\n",
        "    x_train_mean = np.mean(x_train)\n",
        "    x_train_std = np.std(x_train)\n",
        "\n",
        "    x_train = (x_train - x_train_mean)/x_train_std\n",
        "    x_test = (x_test - x_train_mean)/x_train_std\n",
        "\n",
        "    # Perform one-hot encoding on the labels\n",
        "    y_train = to_categorical(y_train_o, num_classes = 7)\n",
        "    y_test = to_categorical(y_test_o, num_classes = 7)\n",
        "\n",
        "    #Splitting training into Train and Validatation sets\n",
        "    x_train, x_validate, y_train, y_validate = train_test_split(x_train, y_train, test_size = 0.1,random_state=123)\n",
        "\n",
        "    #Reshaping the Images into 3 channels (RGB)\n",
        "    x_train = x_train.reshape(x_train.shape[0], *(100, 125, 3))\n",
        "    x_test = x_test.reshape(x_test.shape[0], *(100, 125, 3))\n",
        "    x_validate = x_validate.reshape(x_validate.shape[0], *(100, 125, 3))\n",
        "\n",
        "    return x_train,x_validate,x_test,y_train,y_validate,y_test\n",
        "\n",
        "x_train,x_validate,x_test,y_train,y_validate,y_test = train_test_df_normstandard(df_clean) #change to df_clean"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "4aF0IhEo4Z5y"
      },
      "outputs": [],
      "source": [
        "from tensorflow.keras.preprocessing.image import ImageDataGenerator\n",
        "\n",
        "#Data augmentation to prevent overfitting\n",
        "datagen = ImageDataGenerator(\n",
        "        featurewise_center=False,  # set input mean to 0 over the dataset\n",
        "        samplewise_center=False,  # set each sample mean to 0\n",
        "        featurewise_std_normalization=False,  # divide inputs by std of the dataset\n",
        "        samplewise_std_normalization=False,  # divide each input by its std\n",
        "        zca_whitening=False,  # apply ZCA whitening\n",
        "        rotation_range=10,  # randomly rotate images in the range (degrees, 0 to 180)\n",
        "        zoom_range = 0.1, # Randomly zoom image\n",
        "        width_shift_range=0.12,  # randomly shift images horizontally (fraction of total width)\n",
        "        height_shift_range=0.12,  # randomly shift images vertically (fraction of total height)\n",
        "        horizontal_flip=True,  # randomly flip images\n",
        "        vertical_flip=True)  # randomly flip images\n",
        "\n",
        "datagen.fit(x_train)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "yq9D6L8x4Z8p"
      },
      "outputs": [],
      "source": [
        "from tensorflow.keras.callbacks import ReduceLROnPlateau, EarlyStopping\n",
        "\n",
        "# Set a learning rate annealer\n",
        "learning_rate_reduction = ReduceLROnPlateau(monitor='val_accuracy',\n",
        "                                            patience=3,\n",
        "                                            verbose=1,\n",
        "                                            factor=0.5,\n",
        "                                            min_lr=0.00001)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "B8ySgXMH4Z_h"
      },
      "outputs": [],
      "source": [
        "import tensorflow as tf\n",
        "from tensorflow.keras.applications import ResNet50\n",
        "from tensorflow.keras.layers import Dense, GlobalAveragePooling2D, BatchNormalization, Dropout\n",
        "from tensorflow.keras.models import Model\n",
        "from tensorflow.keras.optimizers import Adam\n",
        "from tensorflow.keras.callbacks import EarlyStopping\n",
        "\n",
        "# Load the pre-trained ResNet-50 model (weights pre-trained on ImageNet)\n",
        "base_model = ResNet50(weights='imagenet', include_top=False)\n",
        "\n",
        "# Freeze some layers in the base model\n",
        "num_layers_to_freeze = 95  # Choose the number of layers you want to freeze\n",
        "for layer in base_model.layers[:num_layers_to_freeze]:\n",
        "    layer.trainable = False\n",
        "\n",
        "# Add custom layers\n",
        "x = base_model.output\n",
        "x = GlobalAveragePooling2D()(x)\n",
        "x = BatchNormalization()(x)  # Batch Normalization layer\n",
        "x = Dropout(0.5)(x)  # Dropout layer\n",
        "x = Dense(256, activation='relu')(x)\n",
        "predictions = Dense(7, activation='softmax')(x)\n",
        "\n",
        "# Create the final model\n",
        "model_resnet = Model(inputs=base_model.input, outputs=predictions)\n",
        "\n",
        "# Learning Rate Scheduler\n",
        "initial_learning_rate = 0.01\n",
        "lr_schedule = tf.keras.optimizers.schedules.ExponentialDecay(\n",
        "    initial_learning_rate,\n",
        "    decay_steps=10000,   # Adjust decay_steps\n",
        "    decay_rate=0.9       # Adjust decay_rate\n",
        ")\n",
        "optimizer = Adam(learning_rate=lr_schedule)\n",
        "\n",
        "model_resnet.compile(optimizer=optimizer, loss=\"categorical_crossentropy\", metrics=[\"accuracy\"])\n",
        "\n",
        "# Early Stopping\n",
        "early_stopping = EarlyStopping(monitor='val_loss', patience=15, restore_best_weights=True)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "NvM7e6Qe4aCH"
      },
      "outputs": [],
      "source": [
        "epochs = 50\n",
        "batch_size = 60\n",
        "history = model_resnet.fit_generator(datagen.flow(x_train, y_train, batch_size=batch_size),\n",
        "epochs=epochs, verbose=1, steps_per_epoch=x_train.shape[0] // batch_size,\n",
        "callbacks=[learning_rate_reduction, early_stopping], validation_data=(x_validate, y_validate))\n",
        "\n",
        "# Plot the training and validation loss\n",
        "plt.figure(figsize=(10, 5))\n",
        "plt.plot(history.history['loss'], label='Training Loss')\n",
        "plt.plot(history.history['val_loss'], label='Validation Loss')\n",
        "plt.xlabel('Epochs')\n",
        "plt.ylabel('Loss')\n",
        "plt.legend()\n",
        "plt.title('Training and Validation Loss (ResNet50 with Input Normalization)')\n",
        "plt.show()\n",
        "\n",
        "# Plot the training and validation accuracy\n",
        "plt.figure(figsize=(10, 5))\n",
        "plt.plot(history.history['accuracy'], label='Training Accuracy')\n",
        "plt.plot(history.history['val_accuracy'], label='Validation Accuracy')\n",
        "plt.xlabel('Epochs')\n",
        "plt.ylabel('Accuracy')\n",
        "plt.legend()\n",
        "plt.title('Training and Validation Accuracy (ResNet50 with Input Normalization)')\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "zU4-6W9B4aEv"
      },
      "outputs": [],
      "source": [
        "#Printing classification report\n",
        "from sklearn.metrics import confusion_matrix, classification_report\n",
        "\n",
        "classes = range(7)\n",
        "\n",
        "# Y_true (true labels) and Y_pred_classes (predicted labels) Evaluating performance on test set\n",
        "Y_pred = model_resnet.predict(x_test)\n",
        "Y_pred_classes = np.argmax(Y_pred, axis=1)\n",
        "Y_true = np.argmax(y_test, axis=1)\n",
        "\n",
        "# Compute the confusion matrix\n",
        "confusion_mtx = confusion_matrix(Y_true, Y_pred_classes)\n",
        "\n",
        "# Plot the confusion matrix with the new colorscale\n",
        "plot_confusion_matrix(confusion_mtx, classes=classes, normalize=False)\n",
        "\n",
        "report = classification_report(Y_true, Y_pred_classes)\n",
        "print(f\"Classification Report for <<ResNet50>> : \")\n",
        "print(report)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "93XOwEbF4aHl"
      },
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Tbc1cFC1t5ZO"
      },
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "rs1ILQzaSlop"
      },
      "source": [
        "## Now Introducing with Input Normalization vs Without Input Normalization"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "bNK2caIgli6V"
      },
      "outputs": [],
      "source": [
        "import tensorflow as tf\n",
        "from tensorflow.keras import datasets, layers, models\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "normalizer = layers.Normalization()\n",
        "normalizer.adapt(x_train)\n",
        "\n",
        "# Create a model that include the normalization layer\n",
        "inputs = Input(shape=x_train.shape[1:])\n",
        "x = normalizer(inputs)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "_-5wAh3-SwLU"
      },
      "source": [
        "## Build Off Which One Is Better + Batch Normalization vs w/o Batch Normalization"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "7vNoDKZXTAtJ"
      },
      "source": [
        "## Hyperparamater Tuning using GridSearchCV\n",
        "\n",
        "1. Different Learning Rates but with same Learning Rate Scheduler\n",
        "3. Different Optimizer\n",
        "4. Different Activation Function\n",
        "5. Instead of optimizing accuracy, we would want to optimize F1 score\n",
        "6. Vary Number of Layers to Freeze\n",
        "7. Vary Dropout Rate\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "O-wn7HkGoGn7"
      },
      "outputs": [],
      "source": []
    }
  ],
  "metadata": {
    "accelerator": "GPU",
    "colab": {
      "collapsed_sections": [
        "4THAVLErBbr_",
        "Wby-IZaghbup",
        "rs1ILQzaSlop",
        "7vNoDKZXTAtJ"
      ],
      "provenance": [],
      "gpuType": "T4"
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
